[{"path":"https://tony-aw.github.io/tinyoperations/articles/a_safer.html","id":"decimal-inequality-testing-operators","dir":"Articles","previous_headings":"","what":"Decimal (in)equality testing operators","title":"Safer functionality","text":"package adds %d==%, %d!=% %d<%, %d>%, %d<=%, %d>=% ()equality operators, perform safer decimal number truth testing. virtually equivalent regular ()equality operators, ==, !=, <, >, <=, >=, except one aspect: decimal number truth testing operators assume absolute difference x y smaller Machine tolerance, sqrt(.Machine$double.eps), x y consider equal. Thus provide safer decimal number ()equality operators. example: (0.1*7) == 0.7 returns FALSE, even though equal, due way decimal numbers stored programming languages like R, Python, etc. (0.1*7) %d==% 0.7 returns TRUE. examples:   also x %d{}% bnd x %d!{}% bnd operators, bnd vector length 2, 2-column matrix (nrow(bnd)==length(x) nrow(bnd)==1). x %d{}% bnd operator checks x within closed interval bounds defined bnd. x %d!{}% bnd operator checks x outside closed interval bounds defined bnd. Examples:  ","code":"x <- c(0.3, 0.6, 0.7) y <- c(0.1*3, 0.1*6, 0.1*7) print(x); print(y) #> [1] 0.3 0.6 0.7 #> [1] 0.3 0.6 0.7 x == y # gives FALSE, but should be TRUE #> [1] FALSE FALSE FALSE x!= y # gives TRUE, should be FALSE #> [1] TRUE TRUE TRUE x > y # not wrong #> [1] FALSE FALSE FALSE x < y # gives TRUE, should be FALSE #> [1] TRUE TRUE TRUE x %d==% y # here it's done correctly #> [1] TRUE TRUE TRUE x %d!=% y #> [1] FALSE FALSE FALSE x %d<% y # correct #> [1] FALSE FALSE FALSE x %d>% y # correct #> [1] FALSE FALSE FALSE x %d<=% y # correct #> [1] TRUE TRUE TRUE x %d>=% y # correct #> [1] TRUE TRUE TRUE x <- c(0.3, 0.6, 0.7) bnd <- matrix(c(x-0.1, x+0.1), ncol=2) x %d{}% bnd #> [1] TRUE TRUE TRUE x %d!{}% bnd #> [1] FALSE FALSE FALSE"},{"path":"https://tony-aw.github.io/tinyoperations/articles/a_safer.html","id":"safer-atomic-type-casting","dir":"Articles","previous_headings":"","what":"Safer atomic type casting","title":"Safer functionality","text":"Atomic type casting R generally performed using functions .logical(), .integer(), .double(), .character(). functions annoying property strip attributes. safest consistent way (far able test ) convert atomic types without loosing attributes, without getting inconsistent results, first store attributes, convert object, re-assign attributes. Like : code … just sad. ’ve taken liberty creating convenient atomic type conversion functions (properly tested, course). as_bool(): .logical(), attributes preserved. as_int(): .integer(), attributes preserved. as_dbl(): .double() (.e. convert real numbers), attributes preserved. as_chr(): .character(), attributes preserved. “class” attribute removed converting functions. Examples:  ","code":"x <- c(rep(0, 2), seq(0, 2.5, by=0.5)) |> matrix(ncol=2) colnames(x) <- c(\"one\", \"two\") attr(x, \"test\") <- \"test\" print(x) #>      one two #> [1,] 0.0 1.0 #> [2,] 0.0 1.5 #> [3,] 0.0 2.0 #> [4,] 0.5 2.5 #> attr(,\"test\") #> [1] \"test\"  # First, store the attributes: myattr <- attributes(x) # Second, convert the object: x <- as.integer(x) print(x) # no longer a matrix, nor any other attributes #> [1] 0 0 0 0 1 1 2 2 # Third, re-assign attributes: attributes(x) <- myattr print(x) #>      one two #> [1,]   0   1 #> [2,]   0   1 #> [3,]   0   2 #> [4,]   0   2 #> attr(,\"test\") #> [1] \"test\" x <- c(rep(0, 2), seq(0, 2.5, by=0.5)) |> matrix(ncol=2) colnames(x) <- c(\"one\", \"two\") attr(x, \"test\") <- \"test\" print(x) #>      one two #> [1,] 0.0 1.0 #> [2,] 0.0 1.5 #> [3,] 0.0 2.0 #> [4,] 0.5 2.5 #> attr(,\"test\") #> [1] \"test\"  as_bool(x) #>        one  two #> [1,] FALSE TRUE #> [2,] FALSE TRUE #> [3,] FALSE TRUE #> [4,]  TRUE TRUE #> attr(,\"test\") #> [1] \"test\" as_int(x) #>      one two #> [1,]   0   1 #> [2,]   0   1 #> [3,]   0   2 #> [4,]   0   2 #> attr(,\"test\") #> [1] \"test\" as_dbl(x) #>      one two #> [1,] 0.0 1.0 #> [2,] 0.0 1.5 #> [3,] 0.0 2.0 #> [4,] 0.5 2.5 #> attr(,\"test\") #> [1] \"test\" as_chr(x) #>      one   two   #> [1,] \"0\"   \"1\"   #> [2,] \"0\"   \"1.5\" #> [3,] \"0\"   \"2\"   #> [4,] \"0.5\" \"2.5\" #> attr(,\"test\") #> [1] \"test\""},{"path":"https://tony-aw.github.io/tinyoperations/articles/a_safer.html","id":"locked-constants","dir":"Articles","previous_headings":"","what":"Locked constants","title":"Safer functionality","text":"tinyoperations R package also adds things.   One can re-assign values T F. One can even say T <- FALSE F <- TRUE!. tinyoperations adds lock_TF() function forces T stay TRUE F stay FALSE. Essentially, lock_TF() function locks T F TRUE FALSE, prevent user re-assigning . Removing created T F constants allows re-assignment .   X %<-c% operator creates CONSTANT X assignment . Constants changed, accessed removed. piece code requires unchangeable constant, use operator create said constant.  ","code":""},{"path":"https://tony-aw.github.io/tinyoperations/articles/b_strings_functions.html","id":"stri_locate_ith","dir":"Articles","previous_headings":"","what":"stri_locate_ith","title":"String related functions","text":"Suppose one wants transform first vowels strings character vector str, upper case vowels become lower case, vice-versa. One can completely stringi + base R follows: now suppose one wants transform second-last vowel. going ? ’s impossible, also super straight-forward. clear code, stringi really needs kind “stri_locate_ith” function. , course, tinyoperations package provides just . stri_locate_ith(str, , ...) function locates every element/string character vector str, \\(^\\textrm{th}\\) occurrence (regex/fixed/etc) pattern. positive, occurrence counted left right. Negative values also allowed, case occurrence counted right left. =0 allowed though. Thus, get second occurrence pattern, use =2, get second-last occurrence, use =-2. stri_locate_ith(str, , ...) function uses exact argument naming convention stringi, keep code consistent. just like stringi::stri_locate_first/last, stri_locate_ith(str, , ...) function vectorized function: str well pattern (regex, fixed, coll, charclass) can different-valued vectors. also vectorized sense loops (R) used, vectorized functions.   transform second-last occurrence, one can now use stri_locate_ith() similar way done stri_locate_first/last: Notice code virtually equivalent. need change locate function.  ","code":"x <- c(\"HELLO WORLD\", \"goodbye world\") loc <- stringi::stri_locate_first(x, regex=\"a|e|i|o|u\", case_insensitive=TRUE) extr <- stringi::stri_sub(x, from=loc) repl <- chartr(extr, old = \"a-zA-Z\", new = \"A-Za-z\") stringi::stri_sub_replace(x, loc, replacement=repl) #> [1] \"HeLLO WORLD\"   \"gOodbye world\" x <- c(\"HELLO WORLD\", \"goodbye world\")  loc <- stri_locate_ith( # this part is the key-difference   x, -2, regex=\"a|e|i|o|u\", case_insensitive=TRUE )  extr <- stringi::stri_sub(x, from=loc) repl <- chartr(extr, old = \"a-zA-Z\", new = \"A-Za-z\") stringi::stri_sub_replace(x, loc, replacement=repl) #> [1] \"HELLo WORLD\"   \"goodbyE world\""},{"path":"https://tony-aw.github.io/tinyoperations/articles/b_strings_functions.html","id":"strcut_---functions","dir":"Articles","previous_headings":"","what":"strcut_ - functions","title":"String related functions","text":"tinyoperations R package adds 2 strcut functions: strcut_loc() strcut_brk(). strcut_loc()function cuts every string character vector around location range loc, every string cut following parts: sub-string loc; sub-string loc ; sub-string loc. location range loc usually matrix 2 columns, giving start end points pattern match. strcut_brk() function basically wrapper around stringi::stri_split_boundaries(..., simplify=TRUE), conveniently named arguments. Examples:  ","code":"x <- rep(paste0(1:10, collapse=\"\"), 10) print(x) #>  [1] \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" #>  [6] \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" loc <- stri_locate_ith(x, 1:10, fixed = as.character(1:10)) strcut_loc(x, loc) #>       prepart     mainpart postpart     #>  [1,] \"\"          \"1\"      \"2345678910\" #>  [2,] \"1\"         \"2\"      \"345678910\"  #>  [3,] \"12\"        \"3\"      \"45678910\"   #>  [4,] \"123\"       \"4\"      \"5678910\"    #>  [5,] \"1234\"      \"5\"      \"678910\"     #>  [6,] \"12345\"     \"6\"      \"78910\"      #>  [7,] \"123456\"    \"7\"      \"8910\"       #>  [8,] \"1234567\"   \"8\"      \"910\"        #>  [9,] \"12345678\"  \"9\"      \"10\"         #> [10,] \"123456789\" \"10\"     \"\" strcut_loc(x, c(5,5)) #>       prepart mainpart postpart #>  [1,] \"1234\"  \"5\"      \"678910\" #>  [2,] \"1234\"  \"5\"      \"678910\" #>  [3,] \"1234\"  \"5\"      \"678910\" #>  [4,] \"1234\"  \"5\"      \"678910\" #>  [5,] \"1234\"  \"5\"      \"678910\" #>  [6,] \"1234\"  \"5\"      \"678910\" #>  [7,] \"1234\"  \"5\"      \"678910\" #>  [8,] \"1234\"  \"5\"      \"678910\" #>  [9,] \"1234\"  \"5\"      \"678910\" #> [10,] \"1234\"  \"5\"      \"678910\"   test <- c(\"The above-mentioned    features are very useful. \", \"Spam, spam, eggs, bacon, and spam. 123 456 789\") strcut_brk(test, \"line\") #>      [,1]     [,2]     [,3]            [,4]        [,5]   [,6]     [,7]       #> [1,] \"The \"   \"above-\" \"mentioned    \" \"features \" \"are \" \"very \"  \"useful. \" #> [2,] \"Spam, \" \"spam, \" \"eggs, \"        \"bacon, \"   \"and \" \"spam. \" \"123 \"     #>      [,8]   [,9]  #> [1,] \"\"     \"\"    #> [2,] \"456 \" \"789\" strcut_brk(test, \"word\") #>      [,1]   [,2] [,3]    [,4]   [,5]        [,6]   [,7]       [,8] [,9]  #> [1,] \"The\"  \" \"  \"above\" \"-\"    \"mentioned\" \"    \" \"features\" \" \"  \"are\" #> [2,] \"Spam\" \",\"  \" \"     \"spam\" \",\"         \" \"    \"eggs\"     \",\"  \" \"   #>      [,10]   [,11]  [,12] [,13]    [,14] [,15]  [,16] [,17] [,18] [,19] [,20] #> [1,] \" \"     \"very\" \" \"   \"useful\" \".\"   \" \"    \"\"    \"\"    \"\"    \"\"    \"\"    #> [2,] \"bacon\" \",\"    \" \"   \"and\"    \" \"   \"spam\" \".\"   \" \"   \"123\" \" \"   \"456\" #>      [,21] [,22] #> [1,] \"\"    \"\"    #> [2,] \" \"   \"789\" strcut_brk(test, \"sentence\") #>      [,1]                                                [,2]          #> [1,] \"The above-mentioned    features are very useful. \" \"\"            #> [2,] \"Spam, spam, eggs, bacon, and spam. \"               \"123 456 789\" strcut_brk(test, \"chr\") #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,] \"T\"  \"h\"  \"e\"  \" \"  \"a\"  \"b\"  \"o\"  \"v\"  \"e\"  \"-\"   \"m\"   \"e\"   \"n\"   \"t\"   #> [2,] \"S\"  \"p\"  \"a\"  \"m\"  \",\"  \" \"  \"s\"  \"p\"  \"a\"  \"m\"   \",\"   \" \"   \"e\"   \"g\"   #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,] \"i\"   \"o\"   \"n\"   \"e\"   \"d\"   \" \"   \" \"   \" \"   \" \"   \"f\"   \"e\"   \"a\"   #> [2,] \"g\"   \"s\"   \",\"   \" \"   \"b\"   \"a\"   \"c\"   \"o\"   \"n\"   \",\"   \" \"   \"a\"   #>      [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] #> [1,] \"t\"   \"u\"   \"r\"   \"e\"   \"s\"   \" \"   \"a\"   \"r\"   \"e\"   \" \"   \"v\"   \"e\"   #> [2,] \"n\"   \"d\"   \" \"   \"s\"   \"p\"   \"a\"   \"m\"   \".\"   \" \"   \"1\"   \"2\"   \"3\"   #>      [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] #> [1,] \"r\"   \"y\"   \" \"   \"u\"   \"s\"   \"e\"   \"f\"   \"u\"   \"l\"   \".\"   \" \"   #> [2,] \" \"   \"4\"   \"5\"   \"6\"   \" \"   \"7\"   \"8\"   \"9\"   \"\"    \"\"    \"\""},{"path":"https://tony-aw.github.io/tinyoperations/articles/b_strings_functions.html","id":"matrix-re-ordering-operators","dir":"Articles","previous_headings":"","what":"Matrix re-ordering operators","title":"String related functions","text":"matrix re-ordering operators quite handy re-ordering strings, since strcut_ - functions return matrices, stri_join_mat() aliases concatenate matrices. See documentation matrix operators: ?`%row~%` ?`%col~%` See also “Miscellaneous functionality” article.  ","code":""},{"path":"https://tony-aw.github.io/tinyoperations/articles/b_strings_functions.html","id":"matrix-joining","dir":"Articles","previous_headings":"","what":"Matrix joining","title":"String related functions","text":"tinyoperations package adds tiny additional function stringi: stri_join_mat (aliases stri_c_mat stri_paste_mat). name suggests, functions perform row-wise (margin=1; default) column-wise (margin=2) joining matrix strings, thereby transforming vector strings. can already base R, requires converting matrix data.frame list, calling stri_join inside .call(), just seems much trouble something soooo abysmally simple. example usage re-ordering strings, words, sentences :  ","code":"# sorting characters in strings: x <- c(\"Hello world\", \"Goodbye world\") x <- strcut_brk(x, \"chr\") mat <- stringi::stri_rank(as.vector(x)) |>  matrix(ncol=ncol(x)) sorted <- x %row~% mat stri_join_mat(sorted, margin=1, sep=\"\") # <- using new function here #> [1] \" deHllloorw\"   \" bddeGlooorwy\"  # sorting words: x <- c(\"Hello everyone\", \"Goodbye everyone\") x <- strcut_brk(x, \"word\") mat <- stringi::stri_rank(as.vector(x)) |>  matrix(ncol=ncol(x)) sorted <- x %row~% mat stri_c_mat(sorted, margin=1, sep=\" \") # <- alias for stri_join_mat #> [1] \"  everyone Hello\"   \"  everyone Goodbye\"  # randomly shuffle sentences: x <- c(\"Hello, who are you? Oh, really?! Cool!\", \"I don't care. But I really don't.\") x <- strcut_brk(x, \"sentence\") mat <- sample(1:length(x)) |> matrix(ncol=ncol(x)) shuffled <- x %row~% mat stri_paste_mat(shuffled, margin=1, sep=\" \") # <- another alias for stri_join_mat #> [1] \"Oh, really?!  Cool! Hello, who are you? \" #> [2] \"But I really don't. I don't care.  \""},{"path":"https://tony-aw.github.io/tinyoperations/articles/b_strings_functions.html","id":"performance","dir":"Articles","previous_headings":"","what":"Performance","title":"String related functions","text":"Although functions R package written R, functions - especially string related ones - somewhat aggressively optimized. string related functions, example, order magnitude terms speed stringi functions call. speed comparisons given, using rbenchmark R package.  ","code":"library(rbenchmark) load(\"speedtest.RData\")"},{"path":"https://tony-aw.github.io/tinyoperations/articles/b_strings_functions.html","id":"stri_locate_ith-1","dir":"Articles","previous_headings":"Performance","what":"stri_locate_ith","title":"String related functions","text":" ","code":"n <- 1e5 x <- rep(paste0(1:100, collapse=\"\"), n) p <- \"\\\\d\" i <- sample(c(-50:-1, 1:50), replace=TRUE, size = n) locate_stringi <- function(...) {   stringi::stri_locate_all(...)   stringi::stri_count(...) } benchmark(   \"stri_locate_ith\" = { stri_locate_ith(x, i, regex=p) },   \"locate_stringi\" = { locate_stringi(str=x, regex=p) },   replications = 50,   order = NULL,   columns = c(\"test\", \"replications\", \"elapsed\",                       \"relative\", \"user.self\", \"sys.self\") ) |> knitr::kable()"},{"path":"https://tony-aw.github.io/tinyoperations/articles/b_strings_functions.html","id":"strcut","dir":"Articles","previous_headings":"Performance","what":"strcut","title":"String related functions","text":" ","code":"n <- 1e5 x <- rep(\"hello\", n) i <- sample(1:3, n, replace = TRUE) loc <- stri_locate_ith(x, i=i, regex=\"a|e|i|o|u\") benchmark(   \"strcut_loc\" = { strcut_loc(x, loc) },   \"strcut_brk\" = { strcut_brk(x, brk=\"chr\") },   \"stringi::stri_split_boundaries\" = {     stringi::stri_split_boundaries(x, type=\"character\")     },   replications = 50,   order = NULL,   columns = c(\"test\", \"replications\", \"elapsed\",               \"relative\", \"user.self\", \"sys.self\") ) |> knitr::kable()"},{"path":"https://tony-aw.github.io/tinyoperations/articles/c_strings_inops.html","id":"string-subsetting-operators","dir":"Articles","previous_headings":"","what":"String subsetting operators","title":"String related infix operators","text":"x %sget% ss operator returns subset string character vector x. ss vector length 2, matrix nrow(ss)=length(x) 2 columns. object ss consist entirely non-negative integers (thus 0, 1, 2, etc. valid, -1, -2, -3 etc valid). first element/column ss gives number characters counting left side extracted x. second element/column ss gives number characters counting right side extracted x. 2 examples: Thus x %sget% ss “gets” extracts given number characters left right, removes rest. also x %strim% ss, opposite: trims away number characters left right defined matrix ss, leaving whatever left. 2 examples:  ","code":"x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(2,3) x %sget% ss #> [1] \"abklm\" \"noxyz\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(1,0) x %sget% ss #> [1] \"a\" \"n\" x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(2,3) x %strim% ss #> [1] \"cdefghij\" \"pqrstuvw\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(1,0) x %strim% ss #> [1] \"bcdefghijklm\" \"opqrstuvwxyz\""},{"path":"https://tony-aw.github.io/tinyoperations/articles/c_strings_inops.html","id":"string-arithmetic","dir":"Articles","previous_headings":"","what":"String arithmetic","title":"String related infix operators","text":"tinyoperations package adds 4 string arithmetic operators: x %s+% y concatenates x y; x %s-% p removes pattern p string character vector x; x %s*% n repeats string character vector x n times; x %s/% p counts often pattern p occurs string vector x .e.: right-side arguments p, y, n can single value, vector length x.  ","code":"\"Hello \"%s+% \" world\" #> [1] \"Hello  world\" c(\"Hello world\", \"Goodbye world\") %s-% \" world\" #> [1] \"Hello\"   \"Goodbye\" c(\"Ha\", \"Ho\", \"Hi\", \"Hu\", \"He\", \"Ha\") %s*% 2:7 #> [1] \"HaHa\"           \"HoHoHo\"         \"HiHiHiHi\"       \"HuHuHuHuHu\"     #> [5] \"HeHeHeHeHeHe\"   \"HaHaHaHaHaHaHa\" c(\"hello world & goodbye world\", \"world domination!\") %s/% \"world\" #> [1] 2 1"},{"path":"https://tony-aw.github.io/tinyoperations/articles/c_strings_inops.html","id":"string-detection-operators","dir":"Articles","previous_headings":"","what":"String detection operators","title":"String related infix operators","text":"x %s{}% p operator checks every string character vector x pattern defined p present. x %s!{}% p operator checks every string character vector x pattern defined p present. Examples:  ","code":"x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %s{}% \"a\" #> [1]  TRUE FALSE x %s!{}% \"a\" #> [1] FALSE  TRUE which(x %s{}% \"a\") #> [1] 1 which(x %s!{}% \"a\") #> [1] 2 x[x %s{}% \"a\"] #> [1] \"abcdefghijklm\" x[x %s!{}% \"a\"] #> [1] \"nopqrstuvwxyz\""},{"path":"https://tony-aw.github.io/tinyoperations/articles/c_strings_inops.html","id":"specifying-pattern-search-attributes-in-string-infix-operators","dir":"Articles","previous_headings":"","what":"Specifying Pattern search attributes in string infix operators","title":"String related infix operators","text":"x %s-% p x %s/% p operators (-place equivalents, given later), string detection operators (%s{}%, %s!{}%) perform pattern matching various purposes. character vector string given right hand side, interpreted case-sensitive regex patterns stringi. , course, sometimes one wants change . example, one may want case insensitive. perhaps one wants use fixed expressions, something else. Instead giving string character vector regex patterns, one can also supply list specify exactly pattern interpreted. list use exact naming convention stringi. example: list(regex=p, case_insensitive=FALSE, ...) list(fixed=p, ...) list(coll=p, ...) list(charclass=p, ...) Examples Regular expressions: Examples Fixed expressions: . ’m sure get idea.  ","code":"x <- c(\"Hello world\", \"Goodbye world\") p <- list(regex=\" world\") x %s-% p #> [1] \"Hello\"   \"Goodbye\"  x <- c(\"Ha\", \"Ho\", \"Hi\", \"Hu\", \"He\", \"Ha\") %s*% 10 p <- list(regex=\"Ha\") x %s/% p #> [1] 10  0  0  0  0 10  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- list(regex = c(\"A\", \"A\"), case_insensitive=TRUE) x %s{}% p #> [1]  TRUE FALSE x %s!{}% p #> [1] FALSE  TRUE x <- c(\"Hello world\", \"Goodbye world\") p <- list(fixed=\" world\") x %s-% p #> [1] \"Hello\"   \"Goodbye\"  x <- c(\"Ha\", \"Ho\", \"Hi\", \"Hu\", \"He\", \"Ha\") %s*% 10 p <- list(fixed=\"Ha\") x %s/% p #> [1] 10  0  0  0  0 10  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- list(fixed = c(\"A\", \"A\"), case_insensitive=TRUE) x %s{}% p #> [1]  TRUE FALSE x %s!{}% p #> [1] FALSE  TRUE"},{"path":"https://tony-aw.github.io/tinyoperations/articles/c_strings_inops.html","id":"in-place-modifying-string-arithmetic-and-sub-setting","dir":"Articles","previous_headings":"","what":"In-place modifying string arithmetic and sub-setting","title":"String related infix operators","text":"exception %ss% infix operators string arithmetic string sub-setting -place modifying equivalent: x %s+ =% y x <- x %s+% y x %s- =% p x <- x %s-% p x %s* =% n x <- x %s*% n x %s/ =% p x <- x %s/% p x %sget =% ss x <- x %sget% ss x %strim =% ss x <- x %strim% ss Notice extra space = sign.  ","code":""},{"path":"https://tony-aw.github.io/tinyoperations/articles/d_DRY.html","id":"the-transform_if-function","dir":"Articles","previous_headings":"","what":"The transform_if function","title":"Don't Repeat Yourself","text":"“Don’t Repeat ”, sometimes abbreviated “DRY”, coding principle try reduce repeating patterns code (within reason). Consider following code: conditional subset object object transformed condition using function referring object . Consequently, reference object written 4 times! can become cumbersome quickly. Notice also code gives unnecessary warning, due ifelse() requiring entirity log(object). tinyoperations package therefore adds transform_if(x, cond, yes, , ) function, “dry” . , argument cond function must given returns logical vector. every value cond(x)==TRUE, function yes(x) run, every value cond(x)==FALSE, function (x) run, every value cond(x)==NA, function run. function-based approach used instead directly supplying vectors, unnecessary warnings annoying errors avoided (unlike code). code can now re-written less warning/error prone compact manner : Instead supplying function cond, one can also directly supply logical vector argument cond. Moreover, transformed value atomic scalar, don’t really need function; can just fill scalar (vectors allowed though, lead unnecessary warnings even annoying errors occur ifelse()). one can thus also re-write original code (without warnings/errors compact) :  ","code":"object <- matrix(c(-9:8, NA, NA) , ncol=2) y <- 0 z <- 1000 ifelse(   is.na(object>y), -z,   ifelse(     object>y,  log(object), object^2   ) ) #> Warning in log(object): NaNs produced #>       [,1]          [,2] #>  [1,]   81     0.0000000 #>  [2,]   64     0.6931472 #>  [3,]   49     1.0986123 #>  [4,]   36     1.3862944 #>  [5,]   25     1.6094379 #>  [6,]   16     1.7917595 #>  [7,]    9     1.9459101 #>  [8,]    4     2.0794415 #>  [9,]    1 -1000.0000000 #> [10,]    0 -1000.0000000 object |> transform_if(\\(x)x>y, log, \\(x)x^2, \\(x) -z) #>       [,1]          [,2] #>  [1,]   81     0.0000000 #>  [2,]   64     0.6931472 #>  [3,]   49     1.0986123 #>  [4,]   36     1.3862944 #>  [5,]   25     1.6094379 #>  [6,]   16     1.7917595 #>  [7,]    9     1.9459101 #>  [8,]    4     2.0794415 #>  [9,]    1 -1000.0000000 #> [10,]    0 -1000.0000000 object |> transform_if(object > y, log, \\(x)x^2, -z) #>       [,1]          [,2] #>  [1,]   81     0.0000000 #>  [2,]   64     0.6931472 #>  [3,]   49     1.0986123 #>  [4,]   36     1.3862944 #>  [5,]   25     1.6094379 #>  [6,]   16     1.7917595 #>  [7,]    9     1.9459101 #>  [8,]    4     2.0794415 #>  [9,]    1 -1000.0000000 #> [10,]    0 -1000.0000000"},{"path":"https://tony-aw.github.io/tinyoperations/articles/d_DRY.html","id":"subset-if-and-unreal-replacement","dir":"Articles","previous_headings":"","what":"Subset if and unreal replacement","title":"Don't Repeat Yourself","text":"tinyoperations package adds 2 “subset_if” operators: x %[]% cond operator selects elements vector/matrix/array x, result cond(x) returns TRUE. x %[!]% cond operator selects elements vector/matrix/array x, result cond(x) returns FALSE. example:   Another operator added tinyoperations x %unreal =% y, replaces NA, NaN, Inf -Inf x value given y. x %unreal =% y x[.na(x)|.nan(x)|.infinite(x)] <- y.  ","code":"object_with_very_long_name <- matrix(-10:9, ncol=2) print(object_with_very_long_name) #>       [,1] [,2] #>  [1,]  -10    0 #>  [2,]   -9    1 #>  [3,]   -8    2 #>  [4,]   -7    3 #>  [5,]   -6    4 #>  [6,]   -5    5 #>  [7,]   -4    6 #>  [8,]   -3    7 #>  [9,]   -2    8 #> [10,]   -1    9 object_with_very_long_name %[if]% \\(x)x %in% 1:10 #> [1] 1 2 3 4 5 6 7 8 9 object_with_very_long_name %[!if]% \\(x)x %in% 1:10 #>  [1] -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0"},{"path":"https://tony-aw.github.io/tinyoperations/articles/d_DRY.html","id":"generalized-in-place-mathematical-modifier","dir":"Articles","previous_headings":"","what":"Generalized in-place (mathematical) modifier","title":"Don't Repeat Yourself","text":"R package includes infix operators -place modifying mathematical arithmetic. Consider following line code: expression, mtcars$mpg[mtcars$cyl>6], written twice, making code rather long cumbersome, even though ’re just squaring expression. R package solves laid-problem implementing generalized -place (mathematical) modifier, x %:=% f operator. tinyoperations one can now make compact (“tiny”, ) follows:  ","code":"mtcars$mpg[mtcars$cyl>6] <- mtcars$mpg[mtcars$cyl>6]^2 mtcars$mpg[mtcars$cyl>6] %:=% \\(x)x^2"},{"path":"https://tony-aw.github.io/tinyoperations/articles/d_DRY.html","id":"in-place-modifying-string-arithmetic-and-sub-setting","dir":"Articles","previous_headings":"","what":"In-place modifying string arithmetic and sub-setting","title":"Don't Repeat Yourself","text":"exception %ss%, infix operators string arithmetic string sub-setting -place modifying equivalent: x %s+ =% y x <- x %s+% y x %s- =% p x <- x %s-% p x %s* =% n x <- x %s*% n x %s/ =% p x <- x %s/% p x %sget =% ss x <- x %sget% ss x %strim =% ss x <- x %strim% ss Notice extra space = sign.  ","code":""},{"path":"https://tony-aw.github.io/tinyoperations/articles/e_import_pkgs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Import system","text":"One can load package without attaching package (.e. using :: using package alias), one can attach package (.e. using library() require()). options pros cons, obviously. advantages disadvantages loading without attaching package versus attaching package - least relevant article - can compactly presented following table: tinyoperations attempts import system, somewhat find best worlds. Basically, tinyoperations functions allow following import functionality lacking base R: Allow R package + re-exports + dependencies + enhances + extensions loaded one alias. essentially combines attaching advantage using multiple related packages (row 7 table ), whilst keeping advantages aliasing package. Allow exposing infix operators current environment. gains attaching advantage less typing (row 6 table ), whilst simultaneously avoiding disadvantage attaching functions package globally (row 4). import package system presented just another option provided, just like import box packages provide alternative import systems. Please feel free completely ignore article ’re really adamant attaching packages using library()/require() :-). article rather lengthy, start quick example code using tinyoperations’ import system: code run without attaching packages dependencies. none problems attaching package present. Despite length article, mostly due overly detailed, import system made simple user. follows descriptions main functions together form new, infix-operator friendly & multi-package assignment friendly, import management system.  ","code":"# loading \"tidytable\" + its re-exports + \"data.table\" under alias \"tdt.\": import_as(    tdt., \"tidytable\", dependencies = \"data.table\" ) #> Importing packages... #> Done #> You can now access the functions using `tdt.$` #> Methods will work like normally  #> For conflicts report, packages order, and other attributes, run `attr.import(tdt.)`  # exposing operators from `magrrittr` to current environment: import_inops(\"magrittr\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done  # directly assigning the \"starwars\" dataset to object \"d\": d <- import_data(\"starwars\", \"dplyr\")   # see it in action: d %>% tdt.$filter(species == \"Droid\") %>%   tdt.$select(name, tdt.$ends_with(\"color\")) #> # A tidytable: 6 × 4 #>   name   hair_color skin_color  eye_color #>   <chr>  <chr>      <chr>       <chr>     #> 1 C-3PO  NA         gold        yellow    #> 2 R2-D2  NA         white, blue red       #> 3 R5-D4  NA         white, red  red       #> 4 IG-88  none       metal       red       #> 5 R4-P17 none       silver, red red, blue #> 6 BB8    none       none        black  rm(list=ls()) # clearing everything"},{"path":"https://tony-aw.github.io/tinyoperations/articles/e_import_pkgs.html","id":"import_as","dir":"Articles","previous_headings":"","what":"import_as","title":"Import system","text":"One can load package without attaching , assign alias, base R, using, example: , instead attaching package using library() require(), can (often) quite beneficial (see Introduction section article). Loading package alias drawbacks. One easily import multiple related packages alias. Although one may always want import multiple related packages single alias, several situations importing multiple packages single alias may preferable: multiple packages meant work together, constantly switching different package name/alias prefixes may eventually become annoying even syntactically chaotic-looking. package may one several dependencies supposed loaded together. example: tidytable package essentially needs data.table package loaded also. package may many extensions may want load together. example: ggplot2 many extensions (see https://exts.ggplot2.tidyverse.org/gallery/). one wishes alias ggplot2 including many extensions, nice load multiple R packages alias. Suppose package B supposed overwrite couple functions package (example package B extends improves functionality function package ). case may want import package , overwrite package B. several cases perhaps desirable load multiple packages alias. tinyoperations’s import_as() function comes . loads R package + re-exports alias, also loads specified dependencies, enhances /extensions package alias. also informs user objects package overwrite objects packages, never surprised. import_as(alias, ...) thus essentially user-friendly multi-package equivalent alias <- loadNamespace(...). main arguments import_as() function : alias: name (unquoted) alias object load package(s). keep aliases easily distinguishable objects can also subset $ operator, recommend ending (starting!) alias names dot (.). main_package: name (string) main package load. re_exports: R packages export functions defined package, direct dependencies - “re-exports”. TRUE (default), re-exports main_package added alias, analogous behaviour base R’s :: operator. FALSE, re-exports added. dependencies: optional character vector giving dependencies main_package load alias also. enhances: optional character vector giving packages enhanced main_package load alias also. extensions: optional character vector giving extensions/reverse-dependencies main_package load alias also. lib.loc: library paths look packages; defaults .libPaths(). argument present import_ - functions. one example. Lets load data.table extensions tidytable, alias, call “tdt.” (“tidy data.table”): Now can course use loaded packages one normally using package alias: tdt.$some_function().  ","code":"alias <- loadNamespace(\"packagename\", lib.loc = lib.loc) import_as(tdt., \"data.table\", extensions = \"tidytable\") # this creates the tdt. object #> Importing packages... #> Done #> You can now access the functions using `tdt.$` #> Methods will work like normally  #> For conflicts report, packages order, and other attributes, run `attr.import(tdt.)`"},{"path":"https://tony-aw.github.io/tinyoperations/articles/e_import_pkgs.html","id":"import_inops","dir":"Articles","previous_headings":"","what":"import_inops","title":"Import system","text":"aliasing R package, infix operators also loaded alias. However, may cumbersome use alias. example : : cumbersome. Therefore, tinyoperations also adds import_inops() function, exposes infix operators. infix operators exposed current environment (like global environment, environment within function), attach functions namespace. example, expose infix operators alias object current environment, one can following: One can give unexpose argument instead expose argument, delete infix operators packages/package alias exposed current environment import_inops(). Infix operators defined user touched. example: One can also expose unexpose infix operators directly package, instead via alias object. case package name must given string. example, following code exposes infix operators data.table R package: similarly one can remove exposed infix operators current environment follows:   import_inops() function exclude include.arguments specify exactly infix operators expose current environment, well overwrite inherits arguments specify infix operators expose already exist current environment (loaded namespaces). can handy prevent overwriting (user defined) infix operators already present current environment loaded namespaces. Examples:   user rather attach infix operators (global) namespace, tinyoperations provides pkg_lsf() function, returns character vector listing functions infix operators package. vector can used include.argument library() function. Like :  ","code":"import_as(to., \"tinyoperations\") to.$`%row~%`(x, mat) tinyoperations::`%row~%`(x, mat) import_inops(expose = tdt.) #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... import_inops(unexpose = tdt.) #> unexposing infix operators... #> Done import_inops(expose =\"data.table\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = \"data.table\") #> checking for infix operators exposed to the current environment by `import_inops()` ... #> Removing the following infix operators: #> %between%, %chin%, %flike%, %ilike%, %inrange%, %like%, := #> Done import_inops(expose = tdt., include.only = \":=\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... import_inops(unexpose = tdt.) #> unexposing infix operators... #> Done import_inops(expose = \"data.table\", , include.only = \":=\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = \"data.table\") #> checking for infix operators exposed to the current environment by `import_inops()` ... #> Removing the following infix operators: #> := #> Done library(magrittr, include.only = pkg_lsf(\"magrittr\", type = \"inops\"))"},{"path":"https://tony-aw.github.io/tinyoperations/articles/e_import_pkgs.html","id":"import_data","dir":"Articles","previous_headings":"","what":"import_data","title":"Import system","text":"import_as() import_inops() functions get functions package namespace. packages often also data sets, often part namespace. data() function core R can already load data packages, function loads data global environment, instead returning data directly, making assigning data specific variable bit annoying. Therefore, tinyoperations package introduces import_data() function, directly returns data set package. example, import chicago data set gamair R package, assign directly variable (without re-assignment ), one simply runs following:  ","code":"d <- import_data(\"chicago\", \"gamair\") head(d) #>   death pm10median pm25median  o3median  so2median    time tmpd #> 1   130 -7.4335443         NA -19.59234  1.9280426 -2556.5 31.5 #> 2   150         NA         NA -19.03861 -0.9855631 -2555.5 33.0 #> 3   101 -0.8265306         NA -20.21734 -1.8914161 -2554.5 33.0 #> 4   135  5.5664557         NA -19.67567  6.1393413 -2553.5 29.0 #> 5   126         NA         NA -19.21734  2.2784649 -2552.5 32.0 #> 6   130  6.5664557         NA -17.63400  9.8585839 -2551.5 40.0"},{"path":"https://tony-aw.github.io/tinyoperations/articles/e_import_pkgs.html","id":"regarding-s3-methods","dir":"Articles","previous_headings":"","what":"Regarding S3 methods","title":"Import system","text":"importing packages tinyoperations’ import system, S3 methods work just fine. example, S3 method ” plot() ” works objects mgcv R package, even loaded alias:  Also, S3 methods defined package automatically registered, thus automatically work. example, following code just works: importing packages, everything works expected, including S3 methods.  ","code":"import_as(mgcv., \"mgcv\") |> suppressMessages() d <- import_data(\"chicago\", \"gamair\")  # just a random model for the sake of demonstration: model <- mgcv.$gam(death ~ s(o3median), data=d) isS3method(f=\"plot\", class=\"gam\") # this is an S3 method #> [1] TRUE plot(model) import_as(dpr., \"dplyr\") |> suppressMessages() import_inops(\"magrittr\") |> suppressMessages() d <- import_data(\"starwars\", \"dplyr\") d <- d %>% dpr.$group_by(species)  isS3method(f=\"arrange\", class=\"data.frame\", envir = dpr.) # this is an S3 method #> [1] TRUE isS3method(f=\"relocate\", class=\"data.frame\", envir = dpr.) # this is an S3 method #> [1] TRUE # this works: d %>%   dpr.$arrange(dpr.$desc(mass)) %>%   dpr.$relocate(species, mass) #> # A tibble: 87 × 14 #> # Groups:   species [38] #>    species    mass name  height hair_color skin_color eye_color birth_year sex   #>    <chr>     <dbl> <chr>  <int> <chr>      <chr>      <chr>          <dbl> <chr> #>  1 Hutt       1358 Jabb…    175 NA         green-tan… orange         600   herm… #>  2 Kaleesh     159 Grie…    216 none       brown, wh… green, y…       NA   male  #>  3 Droid       140 IG-88    200 none       metal      red             15   none  #>  4 Human       136 Dart…    202 none       white      yellow          41.9 male  #>  5 Wookiee     136 Tarf…    234 brown      brown      blue            NA   male  #>  6 Human       120 Owen…    178 brown, gr… light      blue            52   male  #>  7 Trandosh…   113 Bossk    190 none       green      red             53   male  #>  8 Wookiee     112 Chew…    228 brown      unknown    blue           200   male  #>  9 Human       110 Jek …    180 brown      fair       blue            NA   male  #> 10 Besalisk    102 Dext…    198 none       brown      yellow          NA   male  #> # ℹ 77 more rows #> # ℹ 5 more variables: gender <chr>, homeworld <chr>, films <list>, #> #   vehicles <list>, starships <list>"},{"path":"https://tony-aw.github.io/tinyoperations/articles/e_import_pkgs.html","id":"miscellaneous-comments-on-package-imports","dir":"Articles","previous_headings":"","what":"Miscellaneous comments on package imports","title":"Import system","text":"“import_” functions tinyoperations package lib.loc argument explicitly specify get packages (just like base R’s loadNamespace(), library(), install.packages() functions).   magrittr rlang packages add “pronouns” R: ., . data, .env. Fret , pronouns work regardless attached package . don’t need use something like rlang::.data rlang.$.data pronoun work. just work.   created alias object special attributes showing loaded package overwrites loaded functions, order packages loaded . special attributes can obtained attr.import() function. example: See help file details.   help.import() function gets help file function (topic string ), even function inside alias object, function unattached function (like exposed infix operators). Example:   additional miscellaneous functions related package import system perhaps mentioned also: pkg_get_deps() function gets dependencies (enhances) package, regardless package CRAN non-CRAN. See help file details. pkgs %installed % lib.loc operator checks packages specified character vector pkgs installed library paths lib.loc, without attaching even loading packages.   also function sourcing modules: source_selection(); see “Miscellaneous functionality” article.  ","code":"import_as(tdt., \"tidytable\", re_exports = TRUE, dependencies = \"data.table\") #> Importing packages... #> Done #> You can now access the functions using `tdt.$` #> Methods will work like normally  #> For conflicts report, packages order, and other attributes, run `attr.import(tdt.)` attr.import(tdt., \"pkgs\") #> $packages_order #> [1] \"data.table\" \"tidytable\"  #>  #> $main_package #> [1] \"tidytable\" #>  #> $re_exports.pkgs #> [1] \"data.table\" \"rlang\"      \"tidyselect\" \"magrittr\"   \"pillar\" attr.import(tdt., \"conflicts\")|> knitr::kable() attr.import(tdt., \"versions\")|> knitr::kable() attr.import(tdt., \"args\") #> $main_package #> [1] \"tidytable\" #>  #> $re_exports #> [1] TRUE #>  #> $dependencies #> [1] \"data.table\" #>  #> $enhances #> NULL #>  #> $extensions #> NULL #>  #> $lib.loc #> [1] \"C:/Users/Tony/AppData/Local/Temp/RtmpqWst3a/temp_libpath1b1057b83f7a\" #> [2] \"D:/Programs/R-4.3.0/library\"                                          #>  #> $loadorder #> [1] \"dependencies\" \"main_package\" \"enhances\"     \"extensions\" import_as(mr., \"magrittr\") import_inops(mr.)  help.import(i=mr.$add) help.import(i=`%>%`) help.import(i=\"add\", alias=mr.)"},{"path":"https://tony-aw.github.io/tinyoperations/articles/e_import_pkgs.html","id":"an-example","dir":"Articles","previous_headings":"","what":"An example","title":"Import system","text":"One R package benefit import system introduced tinyoperations, dplyr R package. dplyr R package overwrites core R functions (including base R) overwrites functions pre-installed recommended R packages (MASS). .e.: Moreover, dplyr’s function names sometimes generic enough obvious way tell function came dplyr package (comparison: one can generally recognize stringi functions start stri_). look CRAN page dplyr, ’ll notice interesting extensions might want use, powerjoin. prevent masking base R functions, prevent obscurity regarding functions come dplyr powerjoin, functions come core R, one constantly use dplyr:: powerjoin::. constantly switching package prefixes aliases perhaps undesirable. tinyoperations’ import_as() function might help. example dplyr loaded (including re-exports), along powerjoin (extension), one alias ’ll call “dpr.”. Moreover, infix operators magrittr exposed current environment. functions dplyr can now used dpr.$ prefix. way, base R functions longer overwritten, clear someone reads code whether functions like filter() function base R filter function, dplyr filter function, latter called dpr.$filter(). Let’s first run simple example code loaded functions: Just add dpr.$ front functions ’d normally use, everything works just expected. Now lets run example powerjoin GitHub page (https://github.com/moodymudskipper/powerjoin), using alias: Notice change made, functions start dpr.$, rest . need constantly switching dplyr::..., powerjoin::... - yet still clear code functions came dplyr + powerjoin family, fear overwriting functions R packages - let alone core R functions.   show import_as() actually load exported functions, including re-exports, consider following proof:  ","code":"rm(list=ls()) # clearing environment again library(MASS) library(dplyr) # <- notice dplyr overwrites base R and recommended R packages #> Warning: package 'dplyr' was built under R version 4.3.1 #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:MASS': #>  #>     select #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  # detaching dplyr again: detach(\"package:dplyr\") import_as(   dpr., \"dplyr\", extensions = \"powerjoin\", lib.loc=.libPaths() ) #> Importing packages... #> Done #> You can now access the functions using `dpr.$` #> Methods will work like normally  #> For conflicts report, packages order, and other attributes, run `attr.import(dpr.)`  import_inops(\"magrittr\") # getting the operators from `magrittr` #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done d <- import_data(\"starwars\", \"dplyr\") d %>%   dpr.$filter(.data$species == \"Droid\") %>% # notice the pronoun can be used without problems   dpr.$select(name, dpr.$ends_with(\"color\")) #> # A tibble: 6 × 4 #>   name   hair_color skin_color  eye_color #>   <chr>  <chr>      <chr>       <chr>     #> 1 C-3PO  NA         gold        yellow    #> 2 R2-D2  NA         white, blue red       #> 3 R5-D4  NA         white, red  red       #> 4 IG-88  none       metal       red       #> 5 R4-P17 none       silver, red red, blue #> 6 BB8    none       none        black male_penguins <- dpr.$tribble(      ~name,    ~species,     ~island, ~flipper_length_mm, ~body_mass_g,  \"Giordan\",    \"Gentoo\",    \"Biscoe\",               222L,        5250L,   \"Lynden\",    \"Adelie\", \"Torgersen\",               190L,        3900L,   \"Reiner\",    \"Adelie\",     \"Dream\",               185L,        3650L )  female_penguins <- dpr.$tribble(      ~name,    ~species,  ~island, ~flipper_length_mm, ~body_mass_g,   \"Alonda\",    \"Gentoo\", \"Biscoe\",               211,        4500L,      \"Ola\",    \"Adelie\",  \"Dream\",               190,        3600L, \"Mishayla\",    \"Gentoo\", \"Biscoe\",               215,        4750L, ) dpr.$check_specs() #> # powerjoin check specifications #> ℹ implicit_keys #> → column_conflict #> → duplicate_keys_left #> → duplicate_keys_right #> → unmatched_keys_left #> → unmatched_keys_right #> → missing_key_combination_left #> → missing_key_combination_right #> → inconsistent_factor_levels #> → inconsistent_type #> → grouped_input #> → na_keys  dpr.$power_inner_join(   male_penguins[c(\"species\", \"island\")],   female_penguins[c(\"species\", \"island\")] ) #> Joining, by = c(\"species\", \"island\") #> # A tibble: 3 × 2 #>   species island #>   <chr>   <chr>  #> 1 Gentoo  Biscoe #> 2 Gentoo  Biscoe #> 3 Adelie  Dream import_as(dpr., \"dplyr\", re_exports = TRUE) #> Importing packages... #> Done #> You can now access the functions using `dpr.$` #> Methods will work like normally  #> For conflicts report, packages order, and other attributes, run `attr.import(dpr.)` out <- setdiff(names(dpr.), \".__attributes__.\") |> sort() foo <- loadNamespace(\"dplyr\") |> getNamespaceExports() check <- all(out == sort(foo)) print(check) # must be TRUE #> [1] TRUE if(!isTRUE(check)) {   stop(\"Tony is really stupid\") }"},{"path":"https://tony-aw.github.io/tinyoperations/articles/f_misc.html","id":"matrix-re-ordering-operators","dir":"Articles","previous_headings":"","what":"Matrix re-ordering operators","title":"Miscellaneous functionality","text":"tinyoperations R package adds 2 additional matrix operators: x %row~% mat operator re-orders elements every row, row ordered independently rows, matrix x, ordering ranks given matrix mat. x %col~% mat operator re-orders elements every column, column ordered independently columns, matrix x, ordering ranks given matrix mat. matrix x numeric matrix, one wants numerically sort elements every row column, x %row~% x x %col~% x suffice, respectively. matrix x numeric, sorting using x %row~% x x %col~% x still possible, probably best option. non-numeric case, providing matrix ordering ranks probably faster give accurate ordering. mat matrix non-repeating random integers (.e. sample(1:length(x), replace=FALSE)), x %row~% mat randomly shuffle elements every row, shuffling order row independent shuffling order rows. Similarly, x %col~% mat randomly shuffle elements every column, shuffling order column independent shuffling order columns. Re-ordering/sorting every row/column matrix operators generally faster loops apply-like functions.   Examples numeric matrix: Examples character matrix:  ","code":"x <- matrix(sample(1:25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    8    6    3   14    4 #> [2,]   13    1   18   20   16 #> [3,]   19    9   17   22    2 #> [4,]   24   12   25   10   15 #> [5,]    7   23    5   11   21 x %row~% x # sort elements of every row #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    3    4    6    8   14 #> [2,]    1   13   16   18   20 #> [3,]    2    9   17   19   22 #> [4,]   10   12   15   24   25 #> [5,]    5    7   11   21   23 x %row~% -x # reverse-sort elements of every row #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   14    8    6    4    3 #> [2,]   20   18   16   13    1 #> [3,]   22   19   17    9    2 #> [4,]   25   24   15   12   10 #> [5,]   23   21   11    7    5 x %col~% x # sort elements of every column #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    7    1    3   10    2 #> [2,]    8    6    5   11    4 #> [3,]   13    9   17   14   15 #> [4,]   19   12   18   20   16 #> [5,]   24   23   25   22   21 x %col~% -x # reverse-sort elements of every column #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   24   23   25   22   21 #> [2,]   19   12   18   20   16 #> [3,]   13    9   17   14   15 #> [4,]    8    6    5   11    4 #> [5,]    7    1    3   10    2  x <- matrix(sample(1:25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   22   15   13    1   10 #> [2,]    9   23   16    8   24 #> [3,]   19   18    2   11    5 #> [4,]    6    7   12   25   20 #> [5,]    4   21    3   17   14 rand <- sample(1:length(x)) |> matrix(ncol=ncol(x)) # matrix of random integers x %row~% rand # random shuffle every row independent of other rows #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1   10   22   13   15 #> [2,]    9   16    8   24   23 #> [3,]    5    2   11   19   18 #> [4,]   12    6    7   25   20 #> [5,]    4   21   17   14    3 x %col~% rand # random shuffle every column independent of other columns #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    4   21   12    1    5 #> [2,]    6    7    2   11   10 #> [3,]    9   23   13   17   14 #> [4,]   22   15   16   25   24 #> [5,]   19   18    3    8   20 x <- matrix(sample(letters, 25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"c\"  \"r\"  \"a\"  \"w\"  \"f\"  #> [2,] \"d\"  \"y\"  \"z\"  \"h\"  \"g\"  #> [3,] \"e\"  \"v\"  \"m\"  \"k\"  \"u\"  #> [4,] \"s\"  \"j\"  \"l\"  \"q\"  \"t\"  #> [5,] \"b\"  \"n\"  \"p\"  \"i\"  \"x\" mat <- stringi::stri_rank(as.vector(x)) |>   matrix(ncol=ncol(x)) # matrix of ordering ranks x %row~% mat # sort elements of every row #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"a\"  \"c\"  \"f\"  \"r\"  \"w\"  #> [2,] \"d\"  \"g\"  \"h\"  \"y\"  \"z\"  #> [3,] \"e\"  \"k\"  \"m\"  \"u\"  \"v\"  #> [4,] \"j\"  \"l\"  \"q\"  \"s\"  \"t\"  #> [5,] \"b\"  \"i\"  \"n\"  \"p\"  \"x\" x %row~% -mat # reverse-sort elements of every row #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"w\"  \"r\"  \"f\"  \"c\"  \"a\"  #> [2,] \"z\"  \"y\"  \"h\"  \"g\"  \"d\"  #> [3,] \"v\"  \"u\"  \"m\"  \"k\"  \"e\"  #> [4,] \"t\"  \"s\"  \"q\"  \"l\"  \"j\"  #> [5,] \"x\"  \"p\"  \"n\"  \"i\"  \"b\" x %col~% mat # sort elements of every column #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"b\"  \"j\"  \"a\"  \"h\"  \"f\"  #> [2,] \"c\"  \"n\"  \"l\"  \"i\"  \"g\"  #> [3,] \"d\"  \"r\"  \"m\"  \"k\"  \"t\"  #> [4,] \"e\"  \"v\"  \"p\"  \"q\"  \"u\"  #> [5,] \"s\"  \"y\"  \"z\"  \"w\"  \"x\" x %col~% -mat # reverse-sort elements of every column #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"s\"  \"y\"  \"z\"  \"w\"  \"x\"  #> [2,] \"e\"  \"v\"  \"p\"  \"q\"  \"u\"  #> [3,] \"d\"  \"r\"  \"m\"  \"k\"  \"t\"  #> [4,] \"c\"  \"n\"  \"l\"  \"i\"  \"g\"  #> [5,] \"b\"  \"j\"  \"a\"  \"h\"  \"f\"  x <- matrix(sample(letters, 25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"h\"  \"t\"  \"z\"  \"m\"  \"c\"  #> [2,] \"u\"  \"s\"  \"f\"  \"j\"  \"e\"  #> [3,] \"i\"  \"o\"  \"k\"  \"y\"  \"n\"  #> [4,] \"q\"  \"a\"  \"w\"  \"x\"  \"d\"  #> [5,] \"g\"  \"r\"  \"b\"  \"p\"  \"v\" rand <- sample(1:length(x)) |> matrix(ncol=ncol(x)) # matrix of random integers x %row~% rand # random shuffle every row independent of other rows #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"c\"  \"z\"  \"h\"  \"t\"  \"m\"  #> [2,] \"s\"  \"u\"  \"j\"  \"e\"  \"f\"  #> [3,] \"y\"  \"n\"  \"k\"  \"o\"  \"i\"  #> [4,] \"w\"  \"a\"  \"q\"  \"d\"  \"x\"  #> [5,] \"b\"  \"v\"  \"p\"  \"g\"  \"r\" x %col~% rand # random shuffle every column independent of other columns #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"u\"  \"s\"  \"z\"  \"j\"  \"c\"  #> [2,] \"h\"  \"t\"  \"b\"  \"y\"  \"v\"  #> [3,] \"g\"  \"o\"  \"k\"  \"p\"  \"n\"  #> [4,] \"q\"  \"a\"  \"w\"  \"m\"  \"e\"  #> [5,] \"i\"  \"r\"  \"f\"  \"x\"  \"d\""},{"path":"https://tony-aw.github.io/tinyoperations/articles/f_misc.html","id":"additional-logic-operators","dir":"Articles","previous_headings":"","what":"Additional logic operators","title":"Miscellaneous functionality","text":"tinyoperations package adds basic logic operators: %xor%: Exclusive %n&%: (.e. (!x) & (!y)). Note either x y NA, %n&% also give NA (unlike (!x) & (!y), give FALSE.) %?=%: checks x y unknown unreal (NA, NaN, Inf, -Inf) %%: opposite %% (.e. !x %% y) examples: Numbers can many different sub-types whilst still numeric. n %=numtype% numtype operator check every value numeric vector n can considered number belonging type numtype. following values numtype allowed: “~0”: zero, else number whose absolute value smaller Machine tolerance (sqrt(.Machine$double.eps)); “B”: binary numbers (0 1); “prop”: proportions; “”: Integers; “odd”: odd integers; “even”: even integers “R”: Real numbers; “unreal”: infinity, NA, NaN; string counterpart %=numtype% s %=strtype% strtype, checks every value character vector s can seen certain strtype. following values strtype allowed: “empty”: checks string consists empty spaces. “unreal”: checks string NA, literal string “NA”, “NaN” “Inf”, regardless leading trailing spaces. “numeric”: checks string can converted number, disregarding leading trailing spaces. .e. string “5.0” can converted actual number 5.0. “special”: checks string consists special characters. examples:  ","code":"x <- c(TRUE, FALSE, TRUE, FALSE, NA, NaN, Inf, -Inf, TRUE, FALSE) y <- c(FALSE, TRUE, TRUE, FALSE, rep(NA, 6)) outcome <- data.frame(   x=x, y=y,   \"x %xor% y\"=x %xor% y, \"x %n&% y\" = x %n&% y, \"x %?=% y\" = x %?=% y,   check.names = FALSE ) knitr::kable(outcome) 1:3 %out% 1:10 #> [1] FALSE FALSE FALSE 1:10 %out% 1:3 #>  [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE 1e-20 %=numtype% \"~0\" #> [1] TRUE n <- c(0:5, 0:-5, 0.1, -0.1, 0, 1, Inf, -Inf, NA, NaN) n[n %=numtype% \"B\"] #> [1] 0 1 0 0 1 n[n %=numtype% \"prop\"] #> [1] 0.0 1.0 0.0 0.1 0.0 1.0 n[n %=numtype% \"B\"] #> [1] 0 1 0 0 1 n[n %=numtype% \"I\"] #>  [1]  0  1  2  3  4  5  0 -1 -2 -3 -4 -5  0  1 n[n %=numtype% \"odd\"] #> [1]  1  3  5 -1 -3 -5  1 n[n %=numtype% \"even\"] #> [1]  0  2  4  0 -2 -4  0 n[n %=numtype% \"R\"] #>  [1]  0.0  1.0  2.0  3.0  4.0  5.0  0.0 -1.0 -2.0 -3.0 -4.0 -5.0  0.1 -0.1  0.0 #> [16]  1.0 n[n %=numtype% \"unreal\"] #> [1]  Inf -Inf   NA  NaN  s <- c(\" AbcZ123 \", \" abc \", \" 1.3 \", \" !#$%^&*() \", \"  \", \"  NA  \", \"  NaN  \", \" Inf \") s[s %=strtype% \"empty\"] #> [1] \"  \" s[s %=strtype% \"unreal\"] #> [1] \"  NA  \"  \"  NaN  \" \" Inf \" s[s %=strtype% \"numeric\"] #> [1] \" 1.3 \" \" Inf \" s[s %=strtype% \"special\"] #> [1] \" !#$%^&*() \""},{"path":"https://tony-aw.github.io/tinyoperations/articles/f_misc.html","id":"source-selection","dir":"Articles","previous_headings":"","what":"Source selection","title":"Miscellaneous functionality","text":"source_selection() function base R’s source() function, except allows placing selected objects functions current environment, instead objects. objects selected can specified using combination following: supplying character vector exact object names select argument. supplying character vector regex patterns regex argument. supplying character vector fixed patterns fixed argument. Example:  ","code":"exprs <- expression({   helloworld = function()print(\"helloworld\")   goodbyeworld <- function() print(\"goodbye world\")   `%s+test%` <- function(x,y) stringi::`%s+%`(x,y)   `%s*test%` <- function(x,y) stringi::`%s*%`(x,y)   mymethod <- function(x) UseMethod(\"mymethod\", x)   mymethod.numeric <- function(x)x * 2   mymethod.character <- function(x)chartr(x, old = \"a-zA-Z\", new = \"A-Za-z\") })  temp.fun <- function(){   source_selection(list(exprs=exprs), regex= \"^mymethod\", fixed = c(\"%\", \":=\"))   ls() # list all objects residing within the function definition } temp.fun() #> Importing module ... #> Done #> [1] \"%s*test%\"           \"%s+test%\"           \"mymethod\"           #> [4] \"mymethod.character\" \"mymethod.numeric\"  temp.fun <- function(){   source_selection(list(exprs=exprs), select = c(\"helloworld\", \"goodbyeworld\"))   ls() # list all objects residing within the function definition } temp.fun() #> Importing module ...  #>  #> Done #> [1] \"goodbyeworld\" \"helloworld\""},{"path":"https://tony-aw.github.io/tinyoperations/articles/g_otherpkgs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Relations to other packages","text":"article lays tinyoperations R package relates R packages, compatibility R packages, etc.    ","code":""},{"path":"https://tony-aw.github.io/tinyoperations/articles/g_otherpkgs.html","id":"compatibility-with-other-r-packages","dir":"Articles","previous_headings":"","what":"Compatibility with other R packages","title":"Relations to other packages","text":"made sure name operators tinyoperations operators popular operator-related packages: magrittr zeallot.   import R package provides somewhat similar capabilities tinyoperations import management system, still quite different. tinyoperations’ import system focuses loading main package + re-exports + (reverse) dependencies alias, exposing infix operators package current environment. import package really provide functionality directly (far know). Strictly speaking incompatibility tinyoperations import. can safely use implementations import system, wish.   using renv R package, note registers packages loads using plain library() require() calls. Anything different , even things like (... ...)library(...) (...)library(...), understood renv. Therefore, using renv, please make sure set following: make sure packages installed project library, regardless loaded, registered renv. makes renv compatible calls like import_as tinyoperations, things like (... ...)library(...) (...)library(...).   One may noticed functionality R packages inspired programming languages, particular Python (please, refrain taking torches pitchforks!). first R package take inspiration programming languages like Python. Therefore, one might find overlapping function operator names packages something similar; mindful .  ","code":"renv::settings$snapshot.type(\"all\")"},{"path":"https://tony-aw.github.io/tinyoperations/articles/g_otherpkgs.html","id":"recommended-r-packages","dir":"Articles","previous_headings":"","what":"Recommended R packages","title":"Relations to other packages","text":"stringi course required packages. Besides , highly recommend fastverse set R packages (https://github.com/fastverse/fastverse), set R packages (mostly) data wrangling, focused high speed, better memory management, minimal dependencies. quick ’n easy back-tracing errors, recommend rlang R package.  ","code":""},{"path":"https://tony-aw.github.io/tinyoperations/articles/g_otherpkgs.html","id":"tinyverse-solutions-to-library-handling-without-external-r-packages","dir":"Articles","previous_headings":"","what":"Tinyverse solutions to library handling without external R packages","title":"Relations to other packages","text":"tinyverse (https://cran.r-project.org/web/packages/pacs/vignettes/tinyverse.html) - confused tidyverse - attempts minimize dependencies, thus avoid using external R packages unless necessary. “External R packages” meaning base/core R, pre-installed recommended R packages, rstudioapi. library handling issues traditionally solved external R packages - even though can solved quite well without external R packages (especially since R version 4+). Since R package adheres tinyverse philosophy focuses coding etiquette, solutions briefly given without use external R packages: Force error using function appears multiple attached packages: one can use options(conflicts.policy = ...) specify error enforced. Give warnings partial argument matching occurs: one can use options( warnPartialMatchArgs = TRUE, warnPartialMatchAttr = TRUE, warnPartialMatchDollar = TRUE). Get path current script project root folder: without R-Studio one can use commandArgs() function; R-Studio one can use rstudioapi::getSourceEditorContext()$path. Using setwd(\"..\") set working directory one folder - often project root folder. Project isolation: set library folder specific project (.e. using .libPaths()). Date-based version control: MRAN longer available, one may use R-Studio package manager website repository (see https://packagemanager.posit.com/client/#/repos/2/overview https://packagemanager.posit.co/client/#/repos/2/overview).  ","code":""},{"path":"https://tony-aw.github.io/tinyoperations/articles/tinyoperations.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"","text":"tinyoperations R-package adds functions infix operators help programming etiquette. primarily focuses 4 things: Safer decimal ()equality testing, safer atomic conversions, functions safer coding. Extending string manipulation capabilities stringi R package. Reducing repetitive code. new package module import system, combines benefits aliasing package benefits attaching package. tinyoperations R-package one dependency, namely stringi. functions R-package fully vectorized optimized, well documented. Although relatively small R package, understand may want go articles help files tinyoperations without knowing R package even worthy time. ’ll give quick glimpse possible R package.  ","code":""},{"path":"https://tony-aw.github.io/tinyoperations/articles/tinyoperations.html","id":"installation","dir":"Articles","previous_headings":"Introduction","what":"Installation","title":"","text":"One can install tinyoperations github like : attach package - thus exposing functions namespace - using: one can open introduction help page tinyoperations package using:  ","code":"remotes::install_github(\"https://github.com/tony-aw/tinyoperations\") library(tinyoperations) tinyoperations::tinyoperations_help()"},{"path":"https://tony-aw.github.io/tinyoperations/articles/tinyoperations.html","id":"safer-functionality","dir":"Articles","previous_headings":"","what":"Safer functionality","title":"","text":"base R, (0.1*3) == 0.3 gives FALSE, due way decimal numbers stored computers. tinyoperations adds safer truth testing operators, give correct results. atomic type casting functions (.e. .character(), .logical(), etc.) strip away attributes. tinyoperations adds safer type casting functions strip away attributes. One can re-assign values T F. One can even run T <- FALSE F <- TRUE!. tinyoperations adds lock_TF() function forces T stay TRUE F stay FALSE. One example %d==% operator:  ","code":"x <- c(0.3, 0.6, 0.7) y <- c(0.1*3, 0.1*6, 0.1*7) print(x); print(y) #> [1] 0.3 0.6 0.7 #> [1] 0.3 0.6 0.7  x == y # gives FALSE, but should be TRUE #> [1] FALSE FALSE FALSE  x %d==% y # here it's done correctly #> [1] TRUE TRUE TRUE"},{"path":"https://tony-aw.github.io/tinyoperations/articles/tinyoperations.html","id":"reduce-repetitive-code","dir":"Articles","previous_headings":"","what":"Reduce repetitive code","title":"","text":" ","code":"# in base R: ifelse( # repetitive, and gives unnecessary warning   is.na(object>0), -Inf,   ifelse(     object>0,  log(object), object^2   ) ) mtcars$mpg[mtcars$cyl>6] <- (mtcars$mpg[mtcars$cyl>6])^2 # long  # with tinyoperations: object |> transform_if(\\(x)x>0, log, \\(x)x^2, \\(x) -Inf) # compact & no warning mtcars$mpg[mtcars$cyl>6] %:=% \\(x)x^2 # short"},{"path":"https://tony-aw.github.io/tinyoperations/articles/tinyoperations.html","id":"extending-the-string-manipulation-capabilities-of-stringi","dir":"Articles","previous_headings":"","what":"Extending the string manipulation capabilities of stringi","title":"","text":"nice string operators:   Locate \\(^\\textrm{th}\\) occurrence pattern string:   Re-arrange every string character vector (case, sorting words):  ","code":"x <- c(\"hello\", \"goodbye\", \"good afternoon\") # in stringi: x[stringi::stri_detect(x, regex = \"r\")] #> [1] \"good afternoon\"  # in tinyoperatons: x[x %s{}% \"r\"] #> [1] \"good afternoon\" x <- c(paste0(letters, collapse = \"\"), \"first second third last\") print(x) #> [1] \"abcdefghijklmnopqrstuvwxyz\" \"first second third last\" loc <- stri_locate_ith(   # locate second-last occurrence of vowel (ignore case) of each string in x:   x, -2, regex=\"A|E|I|O|U\", case_insensitive=TRUE ) substr(x, loc[,1], loc[,2]) #> [1] \"o\" \"i\" x <- c(\"Hello everyone, I'm here\", \"Goodbye everyone\") print(x) #> [1] \"Hello everyone, I'm here\" \"Goodbye everyone\" # cut x into matrix of individual words: x <- strcut_brk(x, \"word\") # re-order matrix using the fast %row~% operator: mat <- stringi::stri_rank(as.vector(x)) |> matrix(ncol=ncol(x)) sorted <- x %row~% mat # join elements of every row into a single character vector: stri_c_mat(sorted, margin=1, sep=\" \") #> [1] \"      , everyone Hello here I'm\" \"       everyone Goodbye\""},{"path":"https://tony-aw.github.io/tinyoperations/articles/tinyoperations.html","id":"new-import-system","dir":"Articles","previous_headings":"","what":"New import system","title":"","text":"One can use package without attaching package (.e. using :: using package alias), one can attach package (.e. using library() require()). advantages disadvantages loading without attaching package versus attaching package - least relevant now - can compactly presented following table: tinyoperations attempts import system, somewhat find best worlds. introducing following functions: import_as(): Allow main package + re-exports + dependencies + enhances + extensions loaded single alias. essentially combines attaching advantage using multiple related packages (row 7 table ), whilst keeping advantages aliasing package. import_inops(): Expose infix operators package alias object current environment. gains attaching advantage less typing (row 6 table ), whilst simultaneously avoiding disadvantage attaching functions package globally (row 4). import_data(): Directly return data set package, allow straight-forward assignment. source_selection(): Source script, place specified objects current environment. example using tinyoperations's new import system; note following code run without attaching single R package (besides tinyoperations course):  ","code":"# loading \"tidytable\" + \"data.table\" under alias \"tdt.\": import_as(    tdt., \"tidytable\", dependencies = \"data.table\" ) #> Importing packages... #> Done #> You can now access the functions using `tdt.$` #> Methods will work like normally  #> For conflicts report, packages order, and other attributes, run `attr.import(tdt.)`  # exposing operators from `magrrittr` to current environment: import_inops(\"magrittr\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done  # directly assigning the \"starwars\" dataset to object \"d\": d <- import_data(\"starwars\", \"dplyr\")   # see it in action: d %>% tdt.$filter(species == \"Droid\") %>%   tdt.$select(name, tdt.$ends_with(\"color\")) #> # A tidytable: 6 × 4 #>   name   hair_color skin_color  eye_color #>   <chr>  <chr>      <chr>       <chr>     #> 1 C-3PO  NA         gold        yellow    #> 2 R2-D2  NA         white, blue red       #> 3 R5-D4  NA         white, red  red       #> 4 IG-88  none       metal       red       #> 5 R4-P17 none       silver, red red, blue #> 6 BB8    none       none        black  # source only specific functions from a script: source_selection(list(file=\"sourcetest.R\"), select = \"helloworld\") #> Importing module ...  #>  #> Done helloworld() #> [1] \"hello world\""},{"path":"https://tony-aw.github.io/tinyoperations/articles/tinyoperations.html","id":"the-articles","dir":"Articles","previous_headings":"","what":"The Articles","title":"","text":"’re still interested, invite read articles website (https://tony-aw.github.io/tinyoperations/), perhaps try package . following articles currently present: Safer functionality: Describes safer decimal ()equality testing operators, safer atomic conversion functions, functions safer coding. String related functions: Describes tinyoperations functions extend string manipulation capabilities stringi. String related infix operators: Describes tinyoperations infix operators extend string manipulation capabilities stringi. Don’t Repeat : Describes tinyoperations functions help reduce repetitions code. Import system: Detailed description safer package import system introduced tinyoperations. Miscellaneous functionality: Various functions operators tinyoperations introduces. Relations R packages: Describes tinyoperations relates R packages, mostly regarding compatibility. complete list functions introduced tinyoperations, please see References page.  ","code":""},{"path":"https://tony-aw.github.io/tinyoperations/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tony Wilkes. Author, maintainer.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wilkes T (2023). tinyoperations: Functions infix operators help programming etiquette. https://github.com/tony-aw/tinyoperations, https://tony-aw.github.io/tinyoperations.","code":"@Manual{,   title = {tinyoperations: Functions and infix operators to help in your programming etiquette},   author = {Tony Wilkes},   year = {2023},   note = {https://github.com/tony-aw/tinyoperations, https://tony-aw.github.io/tinyoperations}, }"},{"path":"https://tony-aw.github.io/tinyoperations/index.html","id":"tinyoperations","dir":"","previous_headings":"","what":"Functions and infix operators to help in your programming etiquette","title":"Functions and infix operators to help in your programming etiquette","text":" ","code":""},{"path":"https://tony-aw.github.io/tinyoperations/index.html","id":"description--overview","dir":"","previous_headings":"","what":"Description & Overview","title":"Functions and infix operators to help in your programming etiquette","text":"tinyoperations R-package adds functions infix operators help programming etiquette. primarily focuses 4 things: Safer decimal ()equality testing, safer atomic conversions, functions safer coding. Extending string manipulation capabilities stringi R package. Reducing repetitive code. new package module import system, combines benefits aliasing package benefits attaching package. tinyoperations R-package one dependency, namely stringi. functions R-package fully vectorized optimized, well documented.   WARNING: package still much experimental. Function names, argument names, may change dramatically. Use testing , ’s stable. Currently R package available GitHub.   Although relatively small R package, understand may want go articles help files tinyoperations without knowing R package even worthy time. therefore invite take look Get Started page website (https://tony-aw.github.io/tinyoperations/articles/tinyoperations.html).  ","code":""},{"path":"https://tony-aw.github.io/tinyoperations/index.html","id":"reporting-issues-and-giving-suggestions","dir":"","previous_headings":"","what":"Reporting issues and giving suggestions","title":"Functions and infix operators to help in your programming etiquette","text":"coming across issue tinyoperations R package, may want report “Issues” tab GitHub page (https://github.com/tony-aw/tinyoperations/issues). relevant, please provide reproducible R code, make easier diagnose issue. Please keep issue reports polite, professional, point.   suggestions, know suggestions always welcome. Please submit suggestions “Discussion” tab GitHub page (https://github.com/tony-aw/tinyoperations/discussions). Questions issues can also provided .  ","code":""},{"path":"https://tony-aw.github.io/tinyoperations/index.html","id":"history-of-this-r-package","dir":"","previous_headings":"","what":"History of this R package","title":"Functions and infix operators to help in your programming etiquette","text":"R package started just semi-random collection infix operators, related string manipulation. turned specifically extending capacities stringi R package. Along way realized infix operators user-friendly used via :: via package alias, resulted creation import_inops() function. turn resulted entire import system. thus get current state R package.  ","code":""},{"path":"https://tony-aw.github.io/tinyoperations/index.html","id":"changelog-and-status","dir":"","previous_headings":"","what":"Changelog and status","title":"Functions and infix operators to help in your programming etiquette","text":"CHANGELOG (EXPERIMENTAL VERSIONS): 8 March 2023: stringi now dependency. Completely re-written ReadMe file, Description, documentation. 9 March 2023: added “”-operators. 10 March 2023: s_strapply() now uses stringi, uses apply() instead sapply(). Renamed operators %[sp]% %[!sp]% %[grep]% %[!grep]% make meaning obvious. Added Change log ReadMe file. 11 March 2023: replaced “”-operators transform_if() function subset_if operators. 13 March 2023: changed name argument convention many string related functions consistent. Changed return non-matches substr_-functions. 14 March 2023: changed utility function %m import <-% operator. Fixed linguistic mistakes documentation. Added full documentation pdf. Fixed bugs substr_-functions. Added codefactor badge. Fixed errors Description file. Created added pdf manual. Fixed minor errors Read-markdown file. 17 March 2023: added infix operators custom row- column-wise sorting matrices. Slightly optimized substr_arrange() function, added opts_collator argument . Re-ordered sections Read-file. Adjusted documentation reflect new changes. 19 March 2023: removed s_strapply() function favor now newly added stri_join_mat() function aliases. Renamed matrix re-order operators %row~% %col~%. Added random order option substr_arrange() function. Adjusted description, documentation, Read-file reflect new changes, also fixed spelling errors. Hopefully one last major changes make R package. 25 March 2023: Now tests using testthat added R CMD checks. x %n&% y operator now returns NA either x y NA. %s+% %s*% operators now use stringi’s equivalent operators, consistency; -place modifiers affected well. Corrected small spelling- grammatical errors documentation Read-. 28 March 2023: Small textual changes Read-file. 4 April 2023: Added x % f{}% bnd x % f!{}% bnd operators. Adjusted %?=% operator: now NA %?=% Inf similar equality checks also return TRUE. Added tests testthat. Adjusted Read-file documentations accordance changes. 8 April 2023: Added import_data() function. Adjusted documentation Read-file accordingly. 11 April 2023: Added force_libPaths() function. Shortened Description text. Adjusted documentation Read-file accordingly. Fixed grammatical errors documentation. 17 & 20 April 2023: Small textual changes documentation Read-. file. 22 April 2023: Added tests stri_locate_ith(). 22 May 2023: Re-arranged sections Read-file. Removed CodeFactor badge bugging reason. 25 May 2023: stri_locate_ith() function slightly re-written even faster, improved documentation. Edited description. Changed documentation regarding matrix operators, suspect usage word “rank” might confusing. Also edited Read-file bit. 27 May 2023: Changed naming convention -place modifiers end =%. Added import_lsf() function. Fixed mistake documentation transform_if(). 29 May 2023: stri_locate_ith() now returns matrix like stri_locate_first/last. Moreover, replaced mapply call vectorized functions; stri_locate_ith() now almost fast stringi functions calls. 30 May 2023: Fixed lingering mistakes documentations, left since changes 29 May 2023. 4 June 2023: Major changes time. tranform_if() function now allows user specify 2 transformation functions, one condition TRUE, FALSE. Added import_inops() function. Changed alias %m import <-% pkgs operator import_as() function. Added pkgs %installed % lib.loc% operator. Re-arranged Read-file bit. 15 June 2023: Rewritten Read-bit. Added module import system (alias %source module <-% list(file=...) operator source_inops() function). 16 June 2023: RENAMED R-PACKAGE tinyoperators, prevent confusion holds tinyverse philosophy, rather “tidy philosophy”. Fixed minor errors documentation. Removed force_libPaths(), may encourage bad coding practices. 19 June 2023: Replaced -place mathematical modifiers generalized, function-based place (mathematical) modification operator, %:=%, solve precedence issues. Renamed alias %source module <-% list(file=...) alias %source % list(file=...). Edited documentation bit. 20 June 2023: Extended import section Read-. 21 June 2023: Migrated tests testthat tinytest. Added tests new %:=% operator. Adjusted documentation, Read-file. Renamed %source % operator %@source%. Removed %installed % operator. 26 June 2023: Another major change. Made import_as() much, much stricter. Brought back pkgs %installed % lib.loc% operator. Adjusted documentation accordingly. Asked people start testing R package, nearing ’s final form getting experimental life cycle. 27 June 2023: Fixed bug lib.loc argument import_ functions. Made output import_ functions little bit compact. Fixed small bug internal function. Added base recom arguments pkgs_get_deps() function. Clarified documentation bit. Fixed spelling errors. Extended example “import” section Read-. Read-now section numbers. 28 June 2023: renamed depends extends arguments import_as() dependencies extenions, avoid confusion, added foreign_exports argument well. 1 July 2023: Added overwrite argument import_as(), made alias checks rigorous. Adjusted documentation bit. Added tests. Fixed minor bugs source_module functions. 2 July 2023: Removed overwrite argument import_as() (short-lived argument…), ’ve found annoying ’s worth. Added internal checks import_ source_module functions. Error messages now display used exported function instead internal functions. Adjusted documentation Read-accordingly. 3 July 2023: tiny update; just fixed minor documentation issues. 9 July 2023: MAJOR UPDATE + RENAMED PACKAGE tinyoperations. Details:… Replaced %::?% operator help.import() function. import_as() function now also adds attributes alias. Renamed import_lsf() function pkg_lsf(). Renamed pkgs_get_deps function pkg_get_deps, functions accepts single package anyway, also partially re-wrote function give consistently ordered character vectors. Added overwrite inherits arguments import_inops(). argument dependencies import_as() now accepts explicit character vector input, using TRUE may result ambiguous load-order dependencies. import_ functions now separate help page, also added tinyoperations_import page, keep organized. Moreover, Added tests import_ source_module functions. Added misc - functions. Replaced mentions “float” “decimal”, replaced float truth testing (%f) decimal number truth testing (%d). Removed Natural number option logical operators. Adjusted documentation accordance aforementioned changes, improved lay-documentation, clarified documentation even . 11 July 2023: last update unintentionally created bug; bug now fixed. Added minor features (see Details). Details: Last update unintentionally created bug; bug now fixed. Also added verbose argument import_as, function now gives info conflicts attributes. Created fake packages JUST sake thorough testing. tests part R CMD CHECK (doesn’t like packages defined inside package folder), uploaded GitHub; perform test fake packages everytime update R package 22 July 2023: UPDATED R4.3.0. Simplified internal code %installed % operator. Removed substr_ - functions, subsequently also stringfish functionality: originally created historical reasons longer relevant (stri_locate_ith used output list; now outputs matrix), stringfish functions unwanted behaviour, working around unwanted behaviours turned trouble worth. Added strcut_ - functions. import_as() import_inops() functions now create LOCKED objects, additional safety (information can found running import_lock()). Added delete argument import_inops() function. import_inops() function now allows almost complete freedom choosing packages expose infix operators . Added safer atomic type casting functions (as_bool(), as_int(), as_dbl(), as_chr()). transform_if() function now also text arguments. minor optimization improvements functions.Adjusted documentation accordance changes. Fixed minor spelling grammar errors documentation. Created GitHub site using pkgdown, ’s published yet. 25 July 2023: Small update. Added report_inops() function, clarified documentation import_inops(), split import article 2. 28 July 2023: Another small update. Simplified import lock system. Moved part arguments import_inops() import_inops.control(). 29 July 2023: report_inops() function longer checks infix operators locked, considering yesterday’s change import lock system. @source operator now creates locked environment just like import_as(). Adjusted documentation . Added hyperlinks external package references website. 3 August 2023: Overhauled source module import system; now single function, namely source_selection(). Removed text argument transform_if(), now also accepts logical vector argument cond, also accepts atomic scalars arguments yes, , . Adjusted documentation accordingly. Fixed typos grammatical mistakes documentation. 4 August 2023: Really tiny update. Also added tests (now 300 tests). 9 August 2023: Now import_inops() function can directly accept alias object expose infix operators ; argument convention slightly changed. Added convenience pattern functions; s_pattern() now simply reference help page, function . Replaced %sgrep% operator %s{}% %s!{}% operators. Adjusted documentation accordingly. Also added tests; now 400 tests. 16 August 2023: special attributes alias objects can now neatly retrieved using attr.import() function. args special attribute alias objects now also reports lib.loc argument. Slightly re-organized special attributes contained alias objects. Removed verbose argument import_as(), deemed unnecessary. 18 August 2023: added safe guards import system, added tests. import_as() function now also adds ordered_object_names attribute aliases. needed testing purposes, now allow user see attribute also. Also experimenting pkgdown options. 19 August 2023: Textual changes . 24 August 2023: Changed organization categories: decimal truth testing, lock_TF(), safer atomic type casting, %<-c% now belong category “safer functionality”. atomic conversion functions now remove class attribute, just safe, still preserve attributes. FUTURE PLANS: believe tinyoperations slowly getting closer becoming stable. appear need add/remove many functions/operators, although functions, operators arguments may need tweaked /optimized. fully satisfied R package (may take , bit perfectionist), may attempt publish R package CRAN.  ","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/atomic_conversions.html","id":null,"dir":"Reference","previous_headings":"","what":"Safer atomic type casting — atomic_conversions","title":"Safer atomic type casting — atomic_conversions","text":"Atomic type casting R generally performed using functions .logical, .integer, .double, .character.  Converting object atomic types using functions strips object attributes, including attributes names dimensions.  functions provided tinyoperations package strip away attributes - except \"class\" attribute.  functions follows: as_bool(): converts object class logical (TRUE, FALSE). as_int(): converts object class integer. as_dbl(): converts object class double (AKA decimal numbers). as_chr(): converts object class character. Moreover, function is_wholenumber() added, safely test whole numbers.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/atomic_conversions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safer atomic type casting — atomic_conversions","text":"","code":"as_bool(x, ...)  as_int(x, ...)  as_dbl(x, ...)  as_chr(x, ...)  is_wholenumber(x, tol = .Machine$double.eps^0.5)"},{"path":"https://tony-aw.github.io/tinyoperations/reference/atomic_conversions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safer atomic type casting — atomic_conversions","text":"x vector, matrix, array (similar object elements share atomic class), converted atomic class. ... arguments passed methods. tol tolerance.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/atomic_conversions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safer atomic type casting — atomic_conversions","text":"converted object.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/atomic_conversions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safer atomic type casting — atomic_conversions","text":"","code":"x <- c(rep(0, 2), seq(0, 2.5, by=0.5)) |> matrix(ncol=2) colnames(x) <- c(\"one\", \"two\") attr(x, \"test\") <- \"test\" print(x) #>      one two #> [1,] 0.0 1.0 #> [2,] 0.0 1.5 #> [3,] 0.0 2.0 #> [4,] 0.5 2.5 #> attr(,\"test\") #> [1] \"test\"  # notice that in all following, attributes are conserved: as_bool(x) #>        one  two #> [1,] FALSE TRUE #> [2,] FALSE TRUE #> [3,] FALSE TRUE #> [4,]  TRUE TRUE #> attr(,\"test\") #> [1] \"test\" as_int(x) #>      one two #> [1,]   0   1 #> [2,]   0   1 #> [3,]   0   2 #> [4,]   0   2 #> attr(,\"test\") #> [1] \"test\" as_dbl(x) #>      one two #> [1,] 0.0 1.0 #> [2,] 0.0 1.5 #> [3,] 0.0 2.0 #> [4,] 0.5 2.5 #> attr(,\"test\") #> [1] \"test\" as_chr(x) #>      one   two   #> [1,] \"0\"   \"1\"   #> [2,] \"0\"   \"1.5\" #> [3,] \"0\"   \"2\"   #> [4,] \"0.5\" \"2.5\" #> attr(,\"test\") #> [1] \"test\""},{"path":"https://tony-aw.github.io/tinyoperations/reference/decimal_truth.html","id":null,"dir":"Reference","previous_headings":"","what":"Safer decimal number (in)equality testing operators — decimal_truth","title":"Safer decimal number (in)equality testing operators — decimal_truth","text":"%d==%, %d!=% %d<%, %d>%, %d<=%, %d>=% ()equality operator perform decimal (class \"double\") number truth testing.  virtually equivalent regular ()equality operators, ==, !=, <, >, <=, >=,  except one aspect:  decimal number ()equality operators assume absolute difference two numbers x y smaller Machine tolerance, sqrt(.Machine$double.eps), x y consider equal.  Thus operators provide safer decimal number ()equality tests.  example: 0.1*7 == 0.7 returns FALSE, even though equal, due way decimal numbers stored programming languages (like R). 0.1*7 %d==% 0.7 returns TRUE.  also x %d{}% bnd x %d!{}% bnd operators, bnd vector length 2, 2-column matrix (nrow(bnd)==length(x) nrow(bnd)==1).  x %d{}% bnd operator checks x within closed interval bounds defined bnd.  x %d!{}% bnd operator checks x outside closed interval bounds defined bnd.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/decimal_truth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safer decimal number (in)equality testing operators — decimal_truth","text":"","code":"x %d==% y  x %d!=% y  x %d<% y  x %d>% y  x %d<=% y  x %d>=% y  x %d{}% bnd  x %d!{}% bnd"},{"path":"https://tony-aw.github.io/tinyoperations/reference/decimal_truth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safer decimal number (in)equality testing operators — decimal_truth","text":"x, y numeric vectors, matrices, arrays, though operators specifically designed decimal numbers (class \"double\"). bnd either vector length 2, matrix 2 columns 1 row, else matrix 2 columns nrow(bnd)==length(x).  first element/column bnd gives lower bound closed interval;  second element/column bnd gives upper bound closed interval;","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/decimal_truth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safer decimal number (in)equality testing operators — decimal_truth","text":"==.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/decimal_truth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safer decimal number (in)equality testing operators — decimal_truth","text":"","code":"x <- c(0.3, 0.6, 0.7) y <- c(0.1*3, 0.1*6, 0.1*7) print(x); print(y) #> [1] 0.3 0.6 0.7 #> [1] 0.3 0.6 0.7 x == y # gives FALSE, but should be TRUE #> [1] FALSE FALSE FALSE x!= y # gives TRUE, should be FALSE #> [1] TRUE TRUE TRUE x > y # not wrong #> [1] FALSE FALSE FALSE x < y # gives TRUE, should be FALSE #> [1] TRUE TRUE TRUE x %d==% y # here it's done correctly #> [1] TRUE TRUE TRUE x %d!=% y # correct #> [1] FALSE FALSE FALSE x %d<% y # correct #> [1] FALSE FALSE FALSE x %d>% y # correct #> [1] FALSE FALSE FALSE x %d<=% y # correct #> [1] TRUE TRUE TRUE x %d>=% y # correct #> [1] TRUE TRUE TRUE  x <- c(0.3, 0.6, 0.7) bnd <- matrix(c(0.29, 0.59, 0.69, 0.31, 0.61, 0.71), ncol=2) x %d{}% bnd #> [1] TRUE TRUE TRUE x %d!{}% bnd #> [1] FALSE FALSE FALSE  # These operators still work for non-decimal number numerics also: x <- 1:5 y <- 1:5 x %d==% y #> [1] TRUE TRUE TRUE TRUE TRUE x %d!=% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d<% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d>% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d<=% y #> [1] TRUE TRUE TRUE TRUE TRUE x %d>=% y #> [1] TRUE TRUE TRUE TRUE TRUE  x <- 1:5 y <- x+1 x %d==% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d!=% y #> [1] TRUE TRUE TRUE TRUE TRUE x %d<% y #> [1] TRUE TRUE TRUE TRUE TRUE x %d>% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d<=% y #> [1] TRUE TRUE TRUE TRUE TRUE x %d>=% y #> [1] FALSE FALSE FALSE FALSE FALSE  x <- 1:5 y <- x-1 x %d==% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d!=% y #> [1] TRUE TRUE TRUE TRUE TRUE x %d<% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d>% y #> [1] TRUE TRUE TRUE TRUE TRUE x %d<=% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d>=% y #> [1] TRUE TRUE TRUE TRUE TRUE"},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_as.html","id":null,"dir":"Reference","previous_headings":"","what":"Load main package + its re-exports + its dependencies + its enhances + its extensions under one alias — import_as","title":"Load main package + its re-exports + its dependencies + its enhances + its extensions under one alias — import_as","text":"import_as() function imports namespace R package, optionally also re-exports, dependencies, enhances, extensions, alias. specified alias placed current environment (like global environment, environment within function).","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_as.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load main package + its re-exports + its dependencies + its enhances + its extensions under one alias — import_as","text":"","code":"import_as(   alias,   main_package,   re_exports = TRUE,   dependencies = NULL,   enhances = NULL,   extensions = NULL,   lib.loc = .libPaths(),   loadorder = c(\"dependencies\", \"main_package\", \"enhances\", \"extensions\") )"},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_as.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load main package + its re-exports + its dependencies + its enhances + its extensions under one alias — import_as","text":"alias syntactically valid non-hidden object name (unquoted), giving alias object package(s) loaded .  NOTE: keep aliases easily distinguishable objects can also subset $ operator, recommend ending (starting!) alias names dot (.) underscore (_). main_package single string, giving name main package load given alias. re_exports logical; R packages export functions defined package, direct dependencies; \"re-exports\", .  argument determines import_as function re-exports main_package: TRUE re-exports main_package added alias, even dependencies = NULL. default, analogous behaviour base R's :: operator. FALSE, re-exports added, user must specify appropriate packages argument dependencies. dependencies optional character vector, giving names dependencies main_package loaded also alias.  Defaults NULL, means dependencies loaded.  See pkg_get_deps quickly get dependencies package. enhances optional character vector, giving names packages enhanced main_package loaded also alias.  Defaults NULL, means enhances loaded. extensions optional character vector, giving names extensions main_package loaded also alias.  Defaults NULL, means extensions loaded. lib.loc character vector specifying library search path (location R library trees search ).  lib.loc argument usually .libPaths().  See also loadNamespace. loadorder character vector c(\"dependencies\", \"main_package\", \"enhances\", \"extensions\"),  re-ordering character vector, giving relative load order groups packages.  default setting (highly recommended) character vector c(\"dependencies\", \"main_package\", \"enhances\", \"extensions\"),  results following load order: dependencies, order specified depenencies argument. main_package (see argument main_package), including re-exports (re_exports=TRUE). enhances, order specified enhances argument. extensions, order specified extensions argument.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_as.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load main package + its re-exports + its dependencies + its enhances + its extensions under one alias — import_as","text":"locked environment object, similar output loadNamespace, name specified alias argument, created current environment (like global environment, environment within function).  use, example, function \"some_function()\" alias \"alias.\", use: alias.$some_function()   see special attributes alias object, use attr.import.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_as.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load main package + its re-exports + its dependencies + its enhances + its extensions under one alias — import_as","text":"dependencies, enhances extensions arguments dependencies: \"Dependencies\" defined package appearing \"Depends\", \"Imports\", \"LinkingTo\" fields Description file main_package. recursive dependencies. enhances: Enhances defined packages appearing \"Enhances\" field Description file main_package. extensions: \"Extensions\" defined reverse-depends reverse-imports. matter CRAN non-CRAN packages. However, intended meaning extension merely reverse dependency, package actually extends functionality main_package. implied description loadorder argument, order character vectors given dependencies, enhances, extensions arguments matter:  multiple packages share objects name, objects package named last overwrite earlier named packages. Additional details  import_as() function allow importing base/core R alias, try.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_as.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load main package + its re-exports + its dependencies + its enhances + its extensions under one alias — import_as","text":"","code":"if (FALSE) { import_as( # this creates the 'tdt.' object   tdt., \"tidytable\", dependencies = \"data.table\" ) tdt.$mutate }"},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Directly return a data-set from a package — import_data","title":"Directly return a data-set from a package — import_data","text":"import_data() function gets specified data set package.  Unlike utils::data(), import_data() function returns data set directly, allows assigning data set like : mydata <- import_data(...).","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Directly return a data-set from a package — import_data","text":"","code":"import_data(dataname, package, lib.loc = .libPaths())"},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Directly return a data-set from a package — import_data","text":"dataname single string, giving name data set. package quoted package name. lib.loc character vector specifying library search path (location R library trees search ).  usually .libPaths().  See also loadNamespace.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Directly return a data-set from a package — import_data","text":"Returns data directly. Thus, one can assign data like : mydata <- import_data(...).","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Directly return a data-set from a package — import_data","text":"","code":"d <- import_data(\"chicago\", \"gamair\") head(d) #>   death pm10median pm25median  o3median  so2median    time tmpd #> 1   130 -7.4335443         NA -19.59234  1.9280426 -2556.5 31.5 #> 2   150         NA         NA -19.03861 -0.9855631 -2555.5 33.0 #> 3   101 -0.8265306         NA -20.21734 -1.8914161 -2554.5 33.0 #> 4   135  5.5664557         NA -19.67567  6.1393413 -2553.5 29.0 #> 5   126         NA         NA -19.21734  2.2784649 -2552.5 32.0 #> 6   130  6.5664557         NA -17.63400  9.8585839 -2551.5 40.0"},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_inops.control.html","id":null,"dir":"Reference","previous_headings":"","what":"import_inops.control — import_inops.control","title":"import_inops.control — import_inops.control","text":"Additional arguments control exposing infix operators import_inops function.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_inops.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"import_inops.control — import_inops.control","text":"","code":"import_inops.control(   exclude = NULL,   include.only = NULL,   overwrite = TRUE,   inherits = FALSE )"},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_inops.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"import_inops.control — import_inops.control","text":"exclude character vector, giving infix operators expose current environment.  can handy prevent overwriting (user defined) infix operators already present current environment. include.character vector, giving infix operators expose current environment, rest operators exposed.  can handy prevent overwriting (user defined) infix operators already present current environment. overwrite logical, indicating allowed overwrite existing infix operators. TRUE (default), warning given operators existing current environment overwritten, function continuous nonetheless. FALSE, error produced exposed operators already exist current environment, function halted. inherits logical; overwrite=FALSE, enclosed environments, especially package namespaces, also taken account?  Defaults FALSE.  See also exists.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_inops.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"import_inops.control — import_inops.control","text":"function used internally import_inops function.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_inops.control.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"import_inops.control — import_inops.control","text":"specify exclude include.arguments. one , neither.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_inops.html","id":null,"dir":"Reference","previous_headings":"","what":"(un)expose infix operators in the current environment — import_inops","title":"(un)expose infix operators in the current environment — import_inops","text":"import_inops(expose=...) exposes infix operators specified package alias object current environment (like global environment environment within function). import_inops(unexpose=...) unexposes (.e. removes) infix operators specified packages alias object current environment (like global environment environment within function).  Note case infix operators exposed import_inops() removed current environment;  \"regular\" infix operators (.e. user-specified) touched.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_inops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(un)expose infix operators in the current environment — import_inops","text":"","code":"import_inops(expose = NULL, unexpose = NULL, lib.loc = .libPaths(), ...)"},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_inops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(un)expose infix operators in the current environment — import_inops","text":"expose either one following: package alias produced import_as function. string giving package name load infix operators, place current environment. unexpose either one following: package alias produced import_as function. string giving package name. lib.loc character vector specifying library search path (location R library trees search ).  used supplying character vector package names expose / unexpose, ignored supplying alias object expose / unexpose (library already defined inside alias object).  lib.loc argument usually .libPaths().  See also loadNamespace. ... additional arguments, relevant expose argument used.  See import_inops.control.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_inops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(un)expose infix operators in the current environment — import_inops","text":"using argument expose: infix operators specified given package alias placed current environment (like Global environment, environment within function).  using argument unexpose: infix operators specified given package alias, exposed import_inops(), deleted. infix operators found, function returns NULL.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_inops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(un)expose infix operators in the current environment — import_inops","text":"import_inops() function support overloading base/core R operators, try.  using import_inops() remove infix operators current environment, use attributes operators determine infix operator came import_inops(), user-defined.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/import_inops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(un)expose infix operators in the current environment — import_inops","text":"","code":"if (FALSE) { import_as(dt., \"data.table\") import_inops(expose = dt.) # expose infix operators from alias import_inops(unexpose = dt.) # unexposed infix operators from current environment import_inops(expose = \"data.table\") # expose infix operators from package import_inops(unexpose = \"data.table\") # remove the exposed infix operators from environment  # additional arguments (only used when exposing, not unexposing): import_as(dt., \"data.table\") import_inops(expose = dt., include.only = \":=\") import_inops(unexpose = dt.) import_inops(expose = \"data.table\", exclude = \":=\") import_inops(unexpose = \"data.table\")  import_inops(expose = dt., overwrite = FALSE) import_inops(unexpose = dt.) import_inops(expose = \"data.table\", overwrite = FALSE) import_inops(unexpose = \"data.table\") }"},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized in-place (mathematical) modifier — inplace","title":"Generalized in-place (mathematical) modifier — inplace","text":"Generalized -place (mathematical) modifier.  x %:=% f operator allows performing -place modification object x function f.  example : mtcars$mpg[mtcars$cyl>6] <- mtcars$mpg[mtcars$cyl>6]^2  Can now re-written : mtcars$mpg[mtcars$cyl>6] %:=% \\(x)x^2","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized in-place (mathematical) modifier — inplace","text":"","code":"x %:=% f"},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized in-place (mathematical) modifier — inplace","text":"x object, properties function f can used .  example, function f mathematical, x numeric ('number-like') vector, matrix, array. f (possibly anonymous) function applied -place x. function must take one argument .","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized in-place (mathematical) modifier — inplace","text":"operator return value: -place modifier, thus modifies object directly.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized in-place (mathematical) modifier — inplace","text":"","code":"set.seed(1) object <- matrix(rpois(10, 10), ncol=2) print(object) #>      [,1] [,2] #> [1,]    8   12 #> [2,]   10   11 #> [3,]    7    9 #> [4,]   11   14 #> [5,]   14   11 y <- 3 object %:=% \\(x) x+y # same as object <- object + y print(object) #>      [,1] [,2] #> [1,]   11   15 #> [2,]   13   14 #> [3,]   10   12 #> [4,]   14   17 #> [5,]   17   14"},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace_str_arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"In place modifying string arithmetic — inplace_str_arithmetic","title":"In place modifying string arithmetic — inplace_str_arithmetic","text":"-place modifier versions string arithmetic: x %s+ =% y   x <- x %s+% y x %s- =% p   x <- x %s-% p x %s* =% n   x <- x %s*% n x %s/ =% p   x <- x %s/% p See also documentation string arithmetic: string arithmetic. internal code operators inspired roperators R package.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace_str_arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"In place modifying string arithmetic — inplace_str_arithmetic","text":"","code":"x %s+ =% y  x %s- =% p  x %s* =% n  x %s/ =% p"},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace_str_arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"In place modifying string arithmetic — inplace_str_arithmetic","text":"x, y, p, n see string arithmetic stri_rgx.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace_str_arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"In place modifying string arithmetic — inplace_str_arithmetic","text":"operators return value: -place modifiers, thus modify x directly.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace_str_arithmetic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"In place modifying string arithmetic — inplace_str_arithmetic","text":"Wiseman B, Nydick S, Jones J (2022). roperators: Additional Operators Help Write Cleaner R Code. https://CRAN.R-project.org/package=roperators","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace_str_arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"In place modifying string arithmetic — inplace_str_arithmetic","text":"","code":"y <- \"a\" p <- \"a|e|i|o|u\" n <- c(2, 3)  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %s+ =% y # same as x <- x %s+% y print(x) #> [1] \"abcdefghijklma\" \"nopqrstuvwxyza\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %s- =% p # same as x <- x %s-% p print(x) #> [1] \"bcdfghjklm\"  \"npqrstvwxyz\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %s* =% n # same as x <- x %s\\*% n print(x) #> [1] \"abcdefghijklmabcdefghijklm\"              #> [2] \"nopqrstuvwxyznopqrstuvwxyznopqrstuvwxyz\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %s/ =% p # same as x <- x %s/% p print(x) #> [1] 3 2   #############################################################################   y <- \"a\" # pattern with ignore.case=TRUE: p <- list(regex = \"A|E|I|O|U\", ignore.case=TRUE) n <- c(3, 2)  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %s+ =% y # same as x <- x %s+% y print(x) #> [1] \"abcdefghijklma\" \"nopqrstuvwxyza\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %s- =% p # same as x <- x %s-% p #> Warning: Unknown option to `stri_opts_regex`. print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %s* =% n # same as x <- x %s\\*% n print(x) #> [1] \"abcdefghijklmabcdefghijklmabcdefghijklm\" #> [2] \"nopqrstuvwxyznopqrstuvwxyz\"               x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %s/ =% p # same as x <- x %s/% p #> Warning: Unknown option to `stri_opts_regex`. print(x) #> [1] 0 0"},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace_str_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"In place modifying string subsetting — inplace_str_subset","title":"In place modifying string subsetting — inplace_str_subset","text":"-place modifier versions string subsetting: x %sget =% ss   x <- x %sget% ss x %strim =% ss   x <- x %strim% ss See also documentation string subsetting (string subset).  Note -place modifier versions %ss%. internal code operators inspired roperators R package.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace_str_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"In place modifying string subsetting — inplace_str_subset","text":"","code":"x %sget =% ss  x %strim =% ss"},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace_str_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"In place modifying string subsetting — inplace_str_subset","text":"x, ss see string subset.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace_str_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"In place modifying string subsetting — inplace_str_subset","text":"operators return value: -place modifiers, thus modify x directly.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace_str_subset.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"In place modifying string subsetting — inplace_str_subset","text":"Wiseman B, Nydick S, Jones J (2022). roperators: Additional Operators Help Write Cleaner R Code. https://CRAN.R-project.org/package=roperators","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/inplace_str_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"In place modifying string subsetting — inplace_str_subset","text":"","code":"ss <- c(2,2)  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %sget =% ss # same as x <- x %sget% ss print(x) #> [1] \"ablm\" \"noyz\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %strim =% ss # same as x <- x %strim% ss print(x) #> [1] \"cdefghijk\" \"pqrstuvwx\"   #############################################################################   ss <- c(2,2)  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %sget =% ss # same as x <- x %sget% ss print(x) #> [1] \"ablm\" \"noyz\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %strim =% ss # same as x <- x %strim% ss print(x) #> [1] \"cdefghijk\" \"pqrstuvwx\""},{"path":"https://tony-aw.github.io/tinyoperations/reference/lock.html","id":null,"dir":"Reference","previous_headings":"","what":"Lock T, lock F, or create locked constants — lock","title":"Lock T, lock F, or create locked constants — lock","text":"One can re-assign values T F. One can even run things like T <- FALSE F <- TRUE !  lock_TF() function locks T F values sets TRUE FALSE, respectively, prevent user re-assigning .  Removing created T F objects allows re-assignment .  X %<-c% operator creates constant X assigns .  Constants changed, accessed removed. piece code requires unchangeable constant, use operator create said constant.  Removing constant X also removes binding lock. Thus change constant, simply remove re-create .","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/lock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lock T, lock F, or create locked constants — lock","text":"","code":"lock_TF()  X %<-c% A"},{"path":"https://tony-aw.github.io/tinyoperations/reference/lock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lock T, lock F, or create locked constants — lock","text":"X syntactically valid unquoted name object created. kind object assigned X.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/lock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lock T, lock F, or create locked constants — lock","text":"lock_TF(): Two constants, namely T F, set TRUE FALSE respectively, created current environment, locked. Removing created T F objects allows re-assignment .  X %<-c% : object X containing created current environment, object changed. can accessed removed.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/lock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lock T, lock F, or create locked constants — lock","text":"","code":"lock_TF() X %<-c% data.frame(x=3, y=2) # this data.frame cannot be changed. Only accessed or removed. X[1, ,drop=FALSE] #>   x y #> 1 3 2"},{"path":"https://tony-aw.github.io/tinyoperations/reference/logic_ops.html","id":null,"dir":"Reference","previous_headings":"","what":"Logic operators — logic_ops","title":"Logic operators — logic_ops","text":"Additional logic operators:  x %xor% y operator \"exclusive-\" operator, xor(x, y).  x %n&% operator \"-\" operator, (!x) & (!y).  x %% y operator !x %% y.  x %?=% y operator checks x y unreal unknown (.e. NA, NaN, Inf, -Inf).  n %=numtype% numtype operator vectorized operator checks every value numeric vector n can considered number belonging type numtype.  See arguments details.  s %=strtype% strtype operator vectorized operator checks every value character vector s can seen certain strtype.  See arguments details.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/logic_ops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logic operators — logic_ops","text":"","code":"x %xor% y  x %n&% y  x %out% y  x %?=% y  n %=numtype% numtype  s %=strtype% strtype"},{"path":"https://tony-aw.github.io/tinyoperations/reference/logic_ops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logic operators — logic_ops","text":"x, y see Logic. n numeric vector. numtype single string giving numeric type checked. following options supported: \"~0\": zero, else number whose absolute value smaller Machine tolerance (sqrt(.Machine$double.eps)). \"B\": binary numbers (exactly 0 exactly 1); \"prop\": proportions - numbers 0 1 (exactly 0 1 also allowed); \"\": Integers; \"odd\": odd integers; \"even\": even integers; \"R\": Real numbers; \"unreal\": infinity, NA, NaN; s character vector. strtype single string giving string type checked. following options supported: \"empty\": checks string consists empty spaces. \"unreal\": checks string NA, literal string \"NA\", \"NaN\" \"Inf\", regardless leading trailing spaces. \"numeric\": checks string can converted number, disregarding leading trailing spaces. .e. string \"5.0\" can converted actual number 5.0. \"special\": checks string consists special characters.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/logic_ops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logic operators — logic_ops","text":"logical vector.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/logic_ops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logic operators — logic_ops","text":"","code":"x <- c(TRUE, FALSE, TRUE, FALSE, NA, NaN, Inf, -Inf, TRUE, FALSE) y <- c(FALSE, TRUE, TRUE, FALSE, rep(NA, 6)) outcome <- data.frame(   x=x, y=y,   \"x %xor% y\"=x %xor% y, \"x %n&% y\" = x %n&% y, \"x %?=% y\" = x %?=% y,   check.names = FALSE ) print(outcome) #>       x     y x %xor% y x %n&% y x %?=% y #> 1     1 FALSE      TRUE    FALSE    FALSE #> 2     0  TRUE      TRUE    FALSE    FALSE #> 3     1  TRUE     FALSE    FALSE    FALSE #> 4     0 FALSE     FALSE     TRUE    FALSE #> 5    NA    NA        NA       NA     TRUE #> 6   NaN    NA        NA       NA     TRUE #> 7   Inf    NA        NA       NA     TRUE #> 8  -Inf    NA        NA       NA     TRUE #> 9     1    NA        NA       NA    FALSE #> 10    0    NA        NA       NA    FALSE  1:3 %out% 1:10 #> [1] FALSE FALSE FALSE 1:10 %out% 1:3 #>  [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE   n <- c(0:5, 0:-5, 0.1, -0.1, 0, 1, Inf, -Inf, NA, NaN) 1e-20 %=numtype% \"~0\" #> [1] TRUE n[n %=numtype% \"B\"] #> [1] 0 1 0 0 1 n[n %=numtype% \"prop\"] #> [1] 0.0 1.0 0.0 0.1 0.0 1.0 n[n %=numtype% \"I\"] #>  [1]  0  1  2  3  4  5  0 -1 -2 -3 -4 -5  0  1 n[n %=numtype% \"odd\"] #> [1]  1  3  5 -1 -3 -5  1 n[n %=numtype% \"even\"] #> [1]  0  2  4  0 -2 -4  0 n[n %=numtype% \"R\"] #>  [1]  0.0  1.0  2.0  3.0  4.0  5.0  0.0 -1.0 -2.0 -3.0 -4.0 -5.0  0.1 -0.1  0.0 #> [16]  1.0 n[n %=numtype% \"unreal\"] #> [1]  Inf -Inf   NA  NaN  s <- c(\" AbcZ123 \", \" abc \", \" 1.3 \", \" !#$%^&*() \", \"  \", \"  NA  \", \"  NaN  \", \" Inf \") s[s %=strtype% \"empty\"] #> [1] \"  \" s[s %=strtype% \"unreal\"] #> [1] \"  NA  \"  \"  NaN  \" \" Inf \"   s[s %=strtype% \"numeric\"] #> [1] \" 1.3 \" \" Inf \" s[s %=strtype% \"special\"] #> [1] \" !#$%^&*() \""},{"path":"https://tony-aw.github.io/tinyoperations/reference/matrix_ops.html","id":null,"dir":"Reference","previous_headings":"","what":"Infix operators for row- and column-wise re-ordering of matrices — matrix_ops","title":"Infix operators for row- and column-wise re-ordering of matrices — matrix_ops","text":"Infix operators custom row- column-wise re-ordering matrices  x %row~% mat operator re-orders elements every row, row ordered independently rows, matrix x, according ordering ranks given matrix mat.  x %col~% mat operator re-orders elements every column, column ordered independently columns, matrix x, according ordering ranks given matrix mat.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/matrix_ops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infix operators for row- and column-wise re-ordering of matrices — matrix_ops","text":"","code":"x %row~% mat  x %col~% mat"},{"path":"https://tony-aw.github.io/tinyoperations/reference/matrix_ops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infix operators for row- and column-wise re-ordering of matrices — matrix_ops","text":"x matrix mat matrix dimensions x, giving ordering ranks every element matrix x.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/matrix_ops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infix operators for row- and column-wise re-ordering of matrices — matrix_ops","text":"modified matrix.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/matrix_ops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infix operators for row- and column-wise re-ordering of matrices — matrix_ops","text":"matrix x numeric matrix, one wants sort elements every row column numerically, x %row~% x x %col~% x suffice, respectively.  matrix x numeric, sorting elements using x %row~% x x %col~% x still possible, probably best option. non-numeric case, providing matrix ordering ranks mat faster give accurate ordering. See examples section.  mat matrix non-repeating random integers, .e. mat <- sample(1:length(x)) |> matrix(ncol=ncol(x)))  code x %row~% mat  randomly shuffle elements every row, shuffling order row independent shuffling order rows.  Similarly, x %col~% mat  randomly shuffle elements every column, shuffling order column independent shuffling order columns.  Re-ordering/sorting every row/column matrix operators generally faster loops apply-like functions.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/matrix_ops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infix operators for row- and column-wise re-ordering of matrices — matrix_ops","text":"","code":"# numeric matrix ====  x <- matrix(sample(1:25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    9   10    3   16   11 #> [2,]   14   12    6   19    7 #> [3,]    5   15   20   21   22 #> [4,]   23    1   13   25   18 #> [5,]    2    4   24   17    8 x %row~% x # sort elements of every row independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    3    9   10   11   16 #> [2,]    6    7   12   14   19 #> [3,]    5   15   20   21   22 #> [4,]    1   13   18   23   25 #> [5,]    2    4    8   17   24 x %row~% -x # reverse-sort elements of every row independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   16   11   10    9    3 #> [2,]   19   14   12    7    6 #> [3,]   22   21   20   15    5 #> [4,]   25   23   18   13    1 #> [5,]   24   17    8    4    2 x %col~% x # sort elements of every column independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    2    1    3   16    7 #> [2,]    5    4    6   17    8 #> [3,]    9   10   13   19   11 #> [4,]   14   12   20   21   18 #> [5,]   23   15   24   25   22 x %col~% -x # reverse-sort elements of every column independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   23   15   24   25   22 #> [2,]   14   12   20   21   18 #> [3,]    9   10   13   19   11 #> [4,]    5    4    6   17    8 #> [5,]    2    1    3   16    7  x <- matrix(sample(1:25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    6   14    1   24   15 #> [2,]    7    2    3   11    4 #> [3,]   19   13   17   12    5 #> [4,]   10   20    8   22   23 #> [5,]   25   21   16   18    9 mat <- sample(1:length(x)) |> matrix(ncol=ncol(x)) # matrix of non-repeating random integers x %row~% mat # randomly shuffle every row independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1   24   14    6   15 #> [2,]   11    4    3    2    7 #> [3,]    5   19   17   12   13 #> [4,]   20   22    8   23   10 #> [5,]   25   18    9   16   21 x %col~% mat # randomize shuffle every column independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   25   20    1   22    4 #> [2,]   19    2    3   11    5 #> [3,]    6   14    8   18   23 #> [4,]   10   21   17   24    9 #> [5,]    7   13   16   12   15  # character matrix ====  x <- matrix(sample(letters, 25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"g\"  \"k\"  \"t\"  \"f\"  \"y\"  #> [2,] \"s\"  \"o\"  \"z\"  \"n\"  \"u\"  #> [3,] \"b\"  \"w\"  \"h\"  \"v\"  \"i\"  #> [4,] \"j\"  \"p\"  \"e\"  \"c\"  \"d\"  #> [5,] \"a\"  \"l\"  \"q\"  \"x\"  \"r\"  mat <- stringi::stri_rank(as.vector(x)) |> matrix(ncol=ncol(x)) x %row~% mat # sort elements of every row independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"f\"  \"g\"  \"k\"  \"t\"  \"y\"  #> [2,] \"n\"  \"o\"  \"s\"  \"u\"  \"z\"  #> [3,] \"b\"  \"h\"  \"i\"  \"v\"  \"w\"  #> [4,] \"c\"  \"d\"  \"e\"  \"j\"  \"p\"  #> [5,] \"a\"  \"l\"  \"q\"  \"r\"  \"x\"  x %row~% -mat # reverse-sort elements of every row independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"y\"  \"t\"  \"k\"  \"g\"  \"f\"  #> [2,] \"z\"  \"u\"  \"s\"  \"o\"  \"n\"  #> [3,] \"w\"  \"v\"  \"i\"  \"h\"  \"b\"  #> [4,] \"p\"  \"j\"  \"e\"  \"d\"  \"c\"  #> [5,] \"x\"  \"r\"  \"q\"  \"l\"  \"a\"  x %col~% mat # sort elements of every column independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"a\"  \"k\"  \"e\"  \"c\"  \"d\"  #> [2,] \"b\"  \"l\"  \"h\"  \"f\"  \"i\"  #> [3,] \"g\"  \"o\"  \"q\"  \"n\"  \"r\"  #> [4,] \"j\"  \"p\"  \"t\"  \"v\"  \"u\"  #> [5,] \"s\"  \"w\"  \"z\"  \"x\"  \"y\"  x %col~% -mat # reverse-sort elements of every column independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"s\"  \"w\"  \"z\"  \"x\"  \"y\"  #> [2,] \"j\"  \"p\"  \"t\"  \"v\"  \"u\"  #> [3,] \"g\"  \"o\"  \"q\"  \"n\"  \"r\"  #> [4,] \"b\"  \"l\"  \"h\"  \"f\"  \"i\"  #> [5,] \"a\"  \"k\"  \"e\"  \"c\"  \"d\"   x <- matrix(sample(letters, 25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"v\"  \"n\"  \"u\"  \"w\"  \"j\"  #> [2,] \"f\"  \"q\"  \"r\"  \"b\"  \"p\"  #> [3,] \"t\"  \"c\"  \"o\"  \"h\"  \"z\"  #> [4,] \"i\"  \"s\"  \"l\"  \"y\"  \"d\"  #> [5,] \"e\"  \"g\"  \"a\"  \"m\"  \"k\"  mat <- sample(1:length(x)) |> matrix(ncol=ncol(x)) # matrix of non-repeating random integers x %row~% mat # randomly shuffle every row independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"j\"  \"w\"  \"u\"  \"n\"  \"v\"  #> [2,] \"q\"  \"r\"  \"p\"  \"b\"  \"f\"  #> [3,] \"c\"  \"o\"  \"h\"  \"t\"  \"z\"  #> [4,] \"y\"  \"d\"  \"l\"  \"i\"  \"s\"  #> [5,] \"g\"  \"k\"  \"a\"  \"e\"  \"m\"  x %col~% mat # randomize shuffle every column independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"e\"  \"g\"  \"r\"  \"y\"  \"k\"  #> [2,] \"t\"  \"c\"  \"o\"  \"w\"  \"d\"  #> [3,] \"i\"  \"q\"  \"a\"  \"h\"  \"j\"  #> [4,] \"f\"  \"s\"  \"u\"  \"m\"  \"p\"  #> [5,] \"v\"  \"n\"  \"l\"  \"b\"  \"z\""},{"path":"https://tony-aw.github.io/tinyoperations/reference/pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscellaneous package functions — pkgs","title":"Miscellaneous package functions — pkgs","text":"pkgs %installed % lib.loc operator checks one package(s) pkgs exist(s) library location lib.loc, without loading package(s).  syntax operator forces user make syntactically explicit look installed R package(s).  pkg_get_deps() function gets dependencies package Description file. works non-CRAN packages also.  pkg_lsf(package, ...) function gets list exported functions/operators package.  One handy use function , example, globally attach infix operators function using library, like : library(packagename, include.= pkg_lsf(\"packagename\", type=\"inops\"))","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Miscellaneous package functions — pkgs","text":"","code":"pkgs %installed in% lib.loc  pkg_get_deps(   package,   lib.loc = .libPaths(),   deps_type = c(\"LinkingTo\", \"Depends\", \"Imports\"),   base = FALSE,   recom = FALSE,   rstudioapi = FALSE )  pkg_lsf(package, type, lib.loc = .libPaths())"},{"path":"https://tony-aw.github.io/tinyoperations/reference/pkgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Miscellaneous package functions — pkgs","text":"pkgs single string, character vector, package name(s). lib.loc character vector specifying library search path (location R library trees search ).  usually .libPaths().  See also loadNamespace. package single string giving package name. deps_type character vector, giving dependency types used.  Defaults c(\"LinkingTo\", \"Depends\", \"Imports\").  order character vector given deps_type affects order returned character vector; see Details sections. base logical, indicating whether base/core R included (TRUE), included (FALSE; default). recom logical, indicating whether pre-installed \"recommended\" R packages included (TRUE), included (FALSE; default). Note recommended R packages actually installed system taken consideration. rstudioapi logical, indicating whether rstudioapi R package included (TRUE), included (FALSE; default). type type functions list. Possibilities: \"inops\" \"operators\": infix operators. \"regfuns\": regular functions (thus excluding infix operators). \"\": functions, regular functions infix operators.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/pkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Miscellaneous package functions — pkgs","text":" pkgs %installed % lib.loc: Returns named logical vector, names giving package names, value TRUE indicates package installed, value FALSE indicates package installed.  pkg_get_deps(): character vector unique dependencies.  pkg_lsf(): Returns character vector function /operator names.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/pkgs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Miscellaneous package functions — pkgs","text":"pkg_get_deps():  using pkgs_get_deps() function fill dependencies argument import_as function, one may want know character vector returned pkgs_get_deps() ordered.  order determined follows.  string argument deps_type, package names corresponding field Description file extracted, order appear field.  order given argument deps_type also affects order returned character vector:  default, c(\"LinkingTo\", \"Depends\", \"Imports\"),  means package names extracted fields following order: \"LinkingTo\"; \"Depends\"; \"Imports\". unique (thus non-repeating) package names returned user.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/pkgs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Miscellaneous package functions — pkgs","text":"https://stackoverflow.com/questions/30223957/elegantly-extract-r-package-dependencies---package--listed--cran","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/pkgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Miscellaneous package functions — pkgs","text":"","code":"if (FALSE) { pkgs <- pkg_get_deps(\"devtools\") pkgs %installed in% .libPaths() pkg_lsf(\"devtools\", \"all\") }"},{"path":"https://tony-aw.github.io/tinyoperations/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. stringi %s$%, %s*%, %s+%","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/report_inops.html","id":null,"dir":"Reference","previous_headings":"","what":"Report infix operators — report_inops","title":"Report infix operators — report_inops","text":"report_inops() function returns data.frame listing infix operators defined current environment (like global environment, environment within function), user specified environment. also reports packages infix operators came .","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/report_inops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report infix operators — report_inops","text":"","code":"report_inops(env)"},{"path":"https://tony-aw.github.io/tinyoperations/reference/report_inops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report infix operators — report_inops","text":"env optional environment give, function look infix operators.  specified, current environment (like global environment, environment within function) used.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/report_inops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report infix operators — report_inops","text":"data.frame.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/report_inops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report infix operators — report_inops","text":"","code":"if (FALSE) { report_inops() }"},{"path":"https://tony-aw.github.io/tinyoperations/reference/source_module.html","id":null,"dir":"Reference","previous_headings":"","what":"Source selection — source_module","title":"Source selection — source_module","text":"source_selection() function base R's source function, except allows placing selected objects functions current environment, instead objects.  objects selected can specified using combination following: supplying character vector exact object names select argument. supplying character vector regex patterns regex argument. supplying character vector fixed patterns fixed argument. Note source_selection() function suppress output (.e. plots, prints, messages) sourced module file.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/source_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source selection — source_module","text":"","code":"source_selection(lst, select = NULL, regex = NULL, fixed = NULL)"},{"path":"https://tony-aw.github.io/tinyoperations/reference/source_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source selection — source_module","text":"lst named list, giving arguments passed source function.  local argument included list. select character vector, giving exact names functions objects appearing script, expose current environment.  user can also specify named character vector . case objects also renamed given names exposed current environment. regex character vector regex patterns (see about_search_regex).  give regular expressions match names functions objects appearing script, expose current environment.  example, expose following methods current environment, mymethod.numeric() mymethod.character() generic mymethod(),  one specify regex = \"^mymethod\". fixed character vector fixed patterns (see about_search_fixed).  give fixed expressions match names functions objects appearing script, expose current environment.  example, expose following methods current environment, mymethod.numeric() mymethod.character() generic mymethod(),  one specify fixed= \"mymethod\".","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/source_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Source selection — source_module","text":"specified objects placed current environment (like Global environment, environment within function).","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/source_module.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Source selection — source_module","text":"One can specify objects expose using arguments select, regex, fixed.  user can specify 3 , least one 3 must specified.  problem specifications overlap.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/source_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Source selection — source_module","text":"","code":"exprs <- expression({ helloworld = function()print(\"helloworld\") goodbyeworld <- function() print(\"goodbye world\") `%s+test%` <- function(x,y) stringi::`%s+%`(x,y) `%s*test%` <- function(x,y) stringi::`%s*%`(x,y)  mymethod <- function(x) UseMethod(\"mymethod\", x)  mymethod.numeric <- function(x)x * 2  mymethod.character <- function(x)chartr(x, old = \"a-zA-Z\", new = \"A-Za-z\") })  source_selection(list(exprs=exprs), regex = \"^mymethod\") #> Importing module ...  #> Done mymethod(1) #> [1] 2 mymethod(\"a\") #> [1] \"A\"   temp.fun <- function(){   source_selection(list(exprs=exprs), regex = \"^mymethod\", fixed = c(\"%\", \":=\"))   ls() # list all objects residing within the function definition } temp.fun() #> Importing module ...  #> Done #> [1] \"%s*test%\"           \"%s+test%\"           \"mymethod\"           #> [4] \"mymethod.character\" \"mymethod.numeric\"    temp.fun <- function(){   source_selection(list(exprs=exprs), select = c(\"helloworld\", \"goodbyeworld\"))   ls() # list all objects residing within the function definition } temp.fun() #> Importing module ...  #> Done #> [1] \"goodbyeworld\" \"helloworld\""},{"path":"https://tony-aw.github.io/tinyoperations/reference/strcut.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut strings — strcut_loc","title":"Cut strings — strcut_loc","text":"strcut_loc() function cuts every string character vector around location range loc, every string cut following parts: sub-string loc; sub-string loc ; sub-string loc. location range loc usually matrix 2 columns, giving start end points pattern match.  strcut_brk() function (wrapper around stri_split_boundaries) cuts every string individual text breaks (like character, word, line, sentence boundaries).  main difference strcut_ - functions stri_split /  strsplit, latter generally removes delimiter patterns string cutting, strcut_-functions attempt remove parts string default, attempt cut strings separate pieces. Moreover, strcut_ - functions always return matrix, list.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/strcut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut strings — strcut_loc","text":"","code":"strcut_loc(str, loc, fill_loc = TRUE)  strcut_brk(str, brk = \"chr\", ...)"},{"path":"https://tony-aw.github.io/tinyoperations/reference/strcut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut strings — strcut_loc","text":"str string character vector. loc Either one following: result stri_locate_ith function. matrix 2 integer columns, nrow(loc)==length(str), giving location range middle part. vector length 2, giving location range middle part. fill_loc logical, indicating done row , loc[, ] c(NA, NA). TRUE, c(NA, NA) loc[, ] translated c(1, nc[]), nc[] number characters str[] FALSE, strcut_loc() return c(NA, NA, NA) loc[,] c(NA, NA). brk single string, giving one following: \"chr\": attempts split string individual characters. \"line\": attempts split string individual lines (NOTE: somewhat locale dependent). \"word\": attempts split string individual words (NOTE: highly locale dependent!). \"sentence\": attempts split string individual sentences (NOTE: highly locale dependent!). information boundary rules definitions, please see:  ICU User Guide Boundary Analysis  (https://unicode-org.github.io/icu/userguide/boundaryanalysis/) ... additional settings stri_opts_brkiter","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/strcut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut strings — strcut_loc","text":"strcut_loc() function: character matrix length(str) rows 3 columns: first column contains sub-strings loc; second column contains sub_strings loc; third last column contains sub-strings loc. strcut_brk() function: character matrix length(str) rows number columns equal maximum number pieces str cut .","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/strcut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut strings — strcut_loc","text":"","code":"x <- rep(paste0(1:10, collapse=\"\"), 10) print(x) #>  [1] \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" #>  [6] \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" loc <- stri_locate_ith(x, 1:10, fixed = as.character(1:10)) strcut_loc(x, loc) #>       prepart     mainpart postpart     #>  [1,] \"\"          \"1\"      \"2345678910\" #>  [2,] \"1\"         \"2\"      \"345678910\"  #>  [3,] \"12\"        \"3\"      \"45678910\"   #>  [4,] \"123\"       \"4\"      \"5678910\"    #>  [5,] \"1234\"      \"5\"      \"678910\"     #>  [6,] \"12345\"     \"6\"      \"78910\"      #>  [7,] \"123456\"    \"7\"      \"8910\"       #>  [8,] \"1234567\"   \"8\"      \"910\"        #>  [9,] \"12345678\"  \"9\"      \"10\"         #> [10,] \"123456789\" \"10\"     \"\"           strcut_loc(x, c(5,5)) #>       prepart mainpart postpart #>  [1,] \"1234\"  \"5\"      \"678910\" #>  [2,] \"1234\"  \"5\"      \"678910\" #>  [3,] \"1234\"  \"5\"      \"678910\" #>  [4,] \"1234\"  \"5\"      \"678910\" #>  [5,] \"1234\"  \"5\"      \"678910\" #>  [6,] \"1234\"  \"5\"      \"678910\" #>  [7,] \"1234\"  \"5\"      \"678910\" #>  [8,] \"1234\"  \"5\"      \"678910\" #>  [9,] \"1234\"  \"5\"      \"678910\" #> [10,] \"1234\"  \"5\"      \"678910\"  test <- \"The\\u00a0above-mentioned    features are very useful. \" %s+% \"Spam, spam, eggs, bacon, and spam. 123 456 789\" strcut_brk(test, \"line\") #>      [,1]         [,2]            [,3]        [,4]   [,5]    [,6]       #> [1,] \"The above-\" \"mentioned    \" \"features \" \"are \" \"very \" \"useful. \" #>      [,7]     [,8]     [,9]     [,10]     [,11]  [,12]    [,13]  [,14]  [,15] #> [1,] \"Spam, \" \"spam, \" \"eggs, \" \"bacon, \" \"and \" \"spam. \" \"123 \" \"456 \" \"789\" strcut_brk(test, \"word\") #>      [,1]  [,2] [,3]    [,4] [,5]        [,6]   [,7]       [,8] [,9]  [,10] #> [1,] \"The\" \" \"  \"above\" \"-\"  \"mentioned\" \"    \" \"features\" \" \"  \"are\" \" \"   #>      [,11]  [,12] [,13]    [,14] [,15] [,16]  [,17] [,18] [,19]  [,20] [,21] #> [1,] \"very\" \" \"   \"useful\" \".\"   \" \"   \"Spam\" \",\"   \" \"   \"spam\" \",\"   \" \"   #>      [,22]  [,23] [,24] [,25]   [,26] [,27] [,28] [,29] [,30]  [,31] [,32] #> [1,] \"eggs\" \",\"   \" \"   \"bacon\" \",\"   \" \"   \"and\" \" \"   \"spam\" \".\"   \" \"   #>      [,33] [,34] [,35] [,36] [,37] #> [1,] \"123\" \" \"   \"456\" \" \"   \"789\" strcut_brk(test, \"sentence\") #>      [,1]                                                #> [1,] \"The above-mentioned    features are very useful. \" #>      [,2]                                  [,3]          #> [1,] \"Spam, spam, eggs, bacon, and spam. \" \"123 456 789\" strcut_brk(test, \"chr\") #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,] \"T\"  \"h\"  \"e\"  \" \"  \"a\"  \"b\"  \"o\"  \"v\"  \"e\"  \"-\"   \"m\"   \"e\"   \"n\"   \"t\"   #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,] \"i\"   \"o\"   \"n\"   \"e\"   \"d\"   \" \"   \" \"   \" \"   \" \"   \"f\"   \"e\"   \"a\"   #>      [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] #> [1,] \"t\"   \"u\"   \"r\"   \"e\"   \"s\"   \" \"   \"a\"   \"r\"   \"e\"   \" \"   \"v\"   \"e\"   #>      [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] #> [1,] \"r\"   \"y\"   \" \"   \"u\"   \"s\"   \"e\"   \"f\"   \"u\"   \"l\"   \".\"   \" \"   \"S\"   #>      [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] #> [1,] \"p\"   \"a\"   \"m\"   \",\"   \" \"   \"s\"   \"p\"   \"a\"   \"m\"   \",\"   \" \"   \"e\"   #>      [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] #> [1,] \"g\"   \"g\"   \"s\"   \",\"   \" \"   \"b\"   \"a\"   \"c\"   \"o\"   \"n\"   \",\"   \" \"   #>      [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] #> [1,] \"a\"   \"n\"   \"d\"   \" \"   \"s\"   \"p\"   \"a\"   \"m\"   \".\"   \" \"   \"1\"   \"2\"   #>      [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] #> [1,] \"3\"   \" \"   \"4\"   \"5\"   \"6\"   \" \"   \"7\"   \"8\"   \"9\""},{"path":"https://tony-aw.github.io/tinyoperations/reference/stri_join_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate Character Matrix Row-wise or Column-wise — stri_join_mat","title":"Concatenate Character Matrix Row-wise or Column-wise — stri_join_mat","text":"stri_join_mat() function (aliases stri_c_mat stri_paste_mat) perform row-wise (margin=1; default) column-wise (margin=2) joining matrix strings, thereby transforming matrix strings vector strings.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/stri_join_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate Character Matrix Row-wise or Column-wise — stri_join_mat","text":"","code":"stri_join_mat(mat, margin = 1, sep = \"\", collapse = NULL)  stri_c_mat(mat, margin = 1, sep = \"\", collapse = NULL)  stri_paste_mat(mat, margin = 1, sep = \"\", collapse = NULL)"},{"path":"https://tony-aw.github.io/tinyoperations/reference/stri_join_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate Character Matrix Row-wise or Column-wise — stri_join_mat","text":"mat matrix strings margin margin strings must joined. margin=1, elements row matrix mat joined single string. Thus matrix 10 rows, returns vector 10 strings. margin=2, elements column matrix mat joined single string. Thus matrix 10 columns, returns vector 10 strings. sep, collapse stri_join.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/stri_join_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate Character Matrix Row-wise or Column-wise — stri_join_mat","text":"stri_join_mat() function, aliases, return vector strings.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/stri_join_mat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Concatenate Character Matrix Row-wise or Column-wise — stri_join_mat","text":"examples section show uses stri_join_mat() function.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/stri_join_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate Character Matrix Row-wise or Column-wise — stri_join_mat","text":"","code":"# re-ordering characters in strings ====  x <- c(\"Hello world\", \"Goodbye world\") print(x) #> [1] \"Hello world\"   \"Goodbye world\" mat <- strcut_brk(x, \"chr\") rank <- stringi::stri_rank(as.vector(mat)) |>  matrix(ncol=ncol(mat)) sorted <- mat %row~% rank print(sorted) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #> [1,] \"\"   \"\"   \" \"  \"d\"  \"e\"  \"H\"  \"l\"  \"l\"  \"l\"  \"o\"   \"o\"   \"r\"   \"w\"   #> [2,] \" \"  \"b\"  \"d\"  \"d\"  \"e\"  \"G\"  \"l\"  \"o\"  \"o\"  \"o\"   \"r\"   \"w\"   \"y\"   stri_join_mat(sorted, margin=1) #> [1] \" deHllloorw\"   \" bddeGlooorwy\" stri_join_mat(sorted, margin=2) #>  [1] \" \"  \"b\"  \" d\" \"dd\" \"ee\" \"HG\" \"ll\" \"lo\" \"lo\" \"oo\" \"or\" \"rw\" \"wy\"  #############################################################################  # re-ordering words ====  x <- c(\"Hello everyone\", \"Goodbye everyone\") print(x) #> [1] \"Hello everyone\"   \"Goodbye everyone\" mat <- strcut_brk(x, \"word\") rank <- stringi::stri_rank(as.vector(mat)) |> matrix(ncol=ncol(mat)) sorted <- mat %row~% rank print(sorted) #>      [,1] [,2]       [,3]      #> [1,] \" \"  \"everyone\" \"Hello\"   #> [2,] \" \"  \"everyone\" \"Goodbye\" stri_c_mat(sorted, margin=1) # <- alias for stri_join_mat #> [1] \" everyoneHello\"   \" everyoneGoodbye\" stri_c_mat(sorted, margin=2) #> [1] \"  \"               \"everyoneeveryone\" \"HelloGoodbye\"      #############################################################################  # re-ordering sentences ====  x <- c(\"Hello, who are you? Oh, really?! Cool!\", \"I don't care. But I really don't.\") print(x) #> [1] \"Hello, who are you? Oh, really?! Cool!\" #> [2] \"I don't care. But I really don't.\"      mat <- strcut_brk(x, \"sentence\") rank <- stringi::stri_rank(as.vector(mat)) |> matrix(ncol=ncol(mat)) sorted <- mat %row~% rank print(sorted) #>      [,1]    [,2]                   [,3]             #> [1,] \"Cool!\" \"Hello, who are you? \" \"Oh, really?! \"  #> [2,] \"\"      \"But I really don't.\"  \"I don't care. \" stri_paste_mat(sorted, margin=1) # <- another alias for stri_join_mat #> [1] \"Cool!Hello, who are you? Oh, really?! \" #> [2] \"But I really don't.I don't care. \"      stri_paste_mat(sorted, margin=2) #> [1] \"Cool!\"                                   #> [2] \"Hello, who are you? But I really don't.\" #> [3] \"Oh, really?! I don't care. \""},{"path":"https://tony-aw.github.io/tinyoperations/reference/stri_locate_ith.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate \\(i^{th}\\) Pattern Occurrence — stri_locate_ith","title":"Locate \\(i^{th}\\) Pattern Occurrence — stri_locate_ith","text":"stri_locate_ith function locates \\(^{th}\\) occurrence pattern string character vector.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/stri_locate_ith.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate \\(i^{th}\\) Pattern Occurrence — stri_locate_ith","text":"","code":"stri_locate_ith(str, i, ..., regex, fixed, coll, charclass)"},{"path":"https://tony-aw.github.io/tinyoperations/reference/stri_locate_ith.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate \\(i^{th}\\) Pattern Occurrence — stri_locate_ith","text":"str string character vector. number, numeric vector length str. gives \\(^{th}\\) instance replaced.  Positive numbers counting left. Negative numbers counting right. .e.: stri_locate_ith(str, =1, ...)  gives position (range) first occurrence pattern. stri_locate_ith(str, =-1, ...)  gives position (range) last occurrence pattern. stri_locate_ith(str, =2, ...) gives position (range) second occurrence pattern. stri_locate_ith(str, =-2, ...)  gives position (range) second-last occurrence pattern. abs() larger number instances, first (< 0) last (> 0) instance given.  example: suppose string 3 instances pattern;  >= 3 third instance located,  <= -3 first instance located. ... arguments supplied stri_locate stri_count.  supply arguments omit_no_match, get_length, pattern, already specified internally. Supplying arguments anyway result error. regex, fixed, coll, charclass character vector search patterns, stri_locate.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/stri_locate_ith.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate \\(i^{th}\\) Pattern Occurrence — stri_locate_ith","text":"stri_locate_ith() function returns integer matrix two columns, giving start end positions \\(^{th}\\) matches, two NAs matches found, also two NAs str NA.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/stri_locate_ith.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate \\(i^{th}\\) Pattern Occurrence — stri_locate_ith","text":"","code":"# simple pattern ====  x <- rep(paste0(1:10, collapse=\"\"), 10) print(x) #>  [1] \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" #>  [6] \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" out <- stri_locate_ith(x, 1:10, regex = as.character(1:10)) cbind(1:10, out) #>          start end #>  [1,]  1     1   1 #>  [2,]  2     2   2 #>  [3,]  3     3   3 #>  [4,]  4     4   4 #>  [5,]  5     5   5 #>  [6,]  6     6   6 #>  [7,]  7     7   7 #>  [8,]  8     8   8 #>  [9,]  9     9   9 #> [10,] 10    10  11   x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- rep(\"a|e|i|o|u\",2) out <- stri_locate_ith(x, c(-1, 1), regex=p) print(out) #>      start end #> [1,]     9   9 #> [2,]     2   2 substr(x, out[,1], out[,2]) #> [1] \"i\" \"o\"   #############################################################################  # ignore case pattern ====   x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- rep(\"A|E|I|O|U\", 2) out <- stri_locate_ith(x, c(1, -1), regex=p, case_insensitive=TRUE) substr(x, out[,1], out[,2]) #> [1] \"a\" \"u\"   #############################################################################  # multi-character pattern ====  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" # multi-character pattern: p <- rep(\"AB\", 2) out <- stri_locate_ith(x, c(1, -1), regex=p, case_insensitive=TRUE) print(out) #>      start end #> [1,]     1   2 #> [2,]    NA  NA substr(x, out[,1], out[,2]) #> [1] \"ab\" NA      #############################################################################  # Replacement transformation using stringi ====  x <- c(\"hello world\", \"goodbye world\") loc <- stri_locate_ith(x, c(1, -1), regex=\"a|e|i|o|u\") extr <- stringi::stri_sub(x, from=loc) repl <- chartr(extr, old = \"a-zA-Z\", new = \"A-Za-z\") stringi::stri_sub_replace(x, loc, replacement=repl) #> [1] \"hEllo world\"   \"goodbye wOrld\""},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"String arithmetic — str_arithmetic","title":"String arithmetic — str_arithmetic","text":"String arithmetic operators.  x %s+% y  operator exported stringi, concatenates character vectors x y.  x %s-% p  operator removes character/pattern defined p x.  x %s*% n  operator exported stringi, duplicates string x n times, concatenates results.  x %s/% p  operator counts often regular expression character pattern p occurs element x.  e1 %s$% e2 operator exported stringi, provides access stri_sprintf form infix operator.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String arithmetic — str_arithmetic","text":"","code":"x %s-% p  x %s/% p"},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String arithmetic — str_arithmetic","text":"x string character vector. p either list stringi arguments (see stri_rgx), else character vector length x regular expressions.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String arithmetic — str_arithmetic","text":"%s+%, %s-%, %s*% operators return character vector length x. %s/% returns integer vector length x. %s$% operator returns character vector.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String arithmetic — str_arithmetic","text":"","code":"x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" y <- c(\"a\", \"b\") p <- rep(\"a|e|i|o|u\", 2) # same as p <- list(regex=rep(\"a|e|i|o|u\", 2)) n <- c(3, 2)  x %s+% y # =paste0(x,y) #> [1] \"abcdefghijklma\" \"nopqrstuvwxyzb\" x %s-% p # remove all vowels from x #> [1] \"bcdfghjklm\"  \"npqrstvwxyz\" x %s*% n #> [1] \"abcdefghijklmabcdefghijklmabcdefghijklm\" #> [2] \"nopqrstuvwxyznopqrstuvwxyz\"              x %s/% p # count how often vowels appear in each string of vector x. #> [1] 3 2   #############################################################################   x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" y <- \"a\" # pattern that ignores case: p <- list(regex=rep(\"A|E|I|O|U\", 2), case_insensitive = TRUE) n <- c(2, 3)  x %s+% y # =paste0(x,y) #> [1] \"abcdefghijklma\" \"nopqrstuvwxyza\" x %s-% p # remove all vowels from x #> [1] \"bcdfghjklm\"  \"npqrstvwxyz\" x %s*% n #> [1] \"abcdefghijklmabcdefghijklm\"              #> [2] \"nopqrstuvwxyznopqrstuvwxyznopqrstuvwxyz\" x %s/% p # count how often vowels appears in each string of vector x. #> [1] 3 2"},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_subset_ops.html","id":null,"dir":"Reference","previous_headings":"","what":"String subsetting operators — str_subset_ops","title":"String subsetting operators — str_subset_ops","text":"String subsetting operators.  string %ss% ind  operator allows indexing single string -iterable object.  x %sget% ss  operator gives certain number first last characters character vector x.  x %strim% ss  operator removes certain number first last characters character vector x.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_subset_ops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String subsetting operators — str_subset_ops","text":"","code":"string %ss% ind  x %sget% ss  x %strim% ss"},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_subset_ops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String subsetting operators — str_subset_ops","text":"string single string. ind numeric vector giving subset indices. x character vector. ss vector length 2, matrix 2 columns nrow(ss)==length(x). object ss consist entirely non-negative non-missing integers, coerce-able integers. (thus negative integers, missing values allowed; decimal numbers converted integers).  first element/column ss gives number characters counting left side extracted/removed x.  second element/column ss gives number characters counting right side extracted/removed x.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_subset_ops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String subsetting operators — str_subset_ops","text":"x %sget% ss  operator gives certain number first last characters character vector x.  x %strim% ss  operator removes certain number first last characters character vector x.  %ss% operator always returns character vector, element single character.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_subset_ops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"String subsetting operators — str_subset_ops","text":"operators serve way provide straight-forward string sub-setting.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_subset_ops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String subsetting operators — str_subset_ops","text":"","code":"x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(2,3) x %sget% ss #> [1] \"abklm\" \"noxyz\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(1,0) x %sget% ss #> [1] \"a\" \"n\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(2,3) x %strim% ss #> [1] \"cdefghij\" \"pqrstuvw\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(1,0) x %strim% ss #> [1] \"bcdefghijklm\" \"opqrstuvwxyz\"  \"hello\" %ss% 5:1 #> [1] \"o\" \"l\" \"l\" \"e\" \"h\""},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_truth.html","id":null,"dir":"Reference","previous_headings":"","what":"String detection operators — %s{}%","title":"String detection operators — %s{}%","text":"x %s{}% p operator checks every string character vector x pattern defined p present.  x %s!{}% p operator checks every string character vector x pattern defined p present.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_truth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String detection operators — %s{}%","text":"","code":"x %s{}% p  x %s!{}% p"},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_truth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String detection operators — %s{}%","text":"x string character vector. p either list stringi arguments (see stri_rgx), else character vector length x regular expressions.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_truth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String detection operators — %s{}%","text":"x %s{}% p x %s!{}% p operators return logical vectors.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/str_truth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String detection operators — %s{}%","text":"","code":"# simple pattern ====  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %s{}% \"a\" #> [1]  TRUE FALSE x %s!{}% \"a\" #> [1] FALSE  TRUE which(x %s{}% \"a\") #> [1] 1 which(x %s!{}% \"a\") #> [1] 2 x[x %s{}% \"a\"] #> [1] \"abcdefghijklm\" x[x %s!{}% \"a\"] #> [1] \"nopqrstuvwxyz\"  x %s{}% \"1\" #> [1] FALSE FALSE x %s!{}% \"1\" #> [1] TRUE TRUE which(x %s{}% \"1\") #> integer(0) which(x %s!{}% \"1\") #> [1] 1 2 x[x %s{}% \"1\"] #> character(0) x[x %s!{}% \"1\"] #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\"   #############################################################################  # ignore case pattern ====   x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- list(regex = c(\"A\", \"A\"), case_insensitive=TRUE) x %s{}% p #> [1]  TRUE FALSE x %s!{}% p #> [1] FALSE  TRUE which(x %s{}% p) #> [1] 1 which(x %s!{}% p) #> [1] 2 x[x %s{}% p] #> [1] \"abcdefghijklm\" x[x %s!{}% p] #> [1] \"nopqrstuvwxyz\"   #############################################################################  # multi-character pattern ====  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- list(regex = rep(\"AB\", 2), case_insensitive=TRUE) x %s{}% p #> [1]  TRUE FALSE x %s!{}% p #> [1] FALSE  TRUE which(x %s{}% p) #> [1] 1 which(x %s!{}% p) #> [1] 2 x[x %s{}% p] #> [1] \"abcdefghijklm\" x[x %s!{}% p] #> [1] \"nopqrstuvwxyz\""},{"path":"https://tony-aw.github.io/tinyoperations/reference/subset_if.html","id":null,"dir":"Reference","previous_headings":"","what":"The subset_if operators and the unreal in place modifier — subset_if","title":"The subset_if operators and the unreal in place modifier — subset_if","text":"x %[]% cond operator selects elements vector/matrix/array x, result cond(x) returns TRUE.  x %[!]% cond operator selects elements vector/matrix/array x, result cond(x) returns FALSE.  x %unreal =% repl operator modifies unreal (NA, NaN, Inf, -Inf) values x replacement value repl.  Thus, x %unreal =% repl,  , x[.na(x)|.nan(x)|.infinite(x)] <- repl","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/subset_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The subset_if operators and the unreal in place modifier — subset_if","text":"","code":"x %[if]% cond  x %[!if]% cond  x %unreal =% repl"},{"path":"https://tony-aw.github.io/tinyoperations/reference/subset_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The subset_if operators and the unreal in place modifier — subset_if","text":"x vector, matrix, array. cond (possibly anonymous) function returns logical vector length/dimensions x.  example: \\(x)x>0. repl replacement value.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/subset_if.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The subset_if operators and the unreal in place modifier — subset_if","text":"subset-operators: subset_if - operators return vector selected elements.  x %unreal =% repl operator: x %unreal =% repl operator return value: -place modifier, thus modifies x directly. object x modified NA, NaN, Inf, -Inf elements replaced repl.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/subset_if.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The subset_if operators and the unreal in place modifier — subset_if","text":"","code":"x <- c(-10:9, NA, NA) object_with_very_long_name <- matrix(x, ncol=2) print(object_with_very_long_name) #>       [,1] [,2] #>  [1,]  -10    1 #>  [2,]   -9    2 #>  [3,]   -8    3 #>  [4,]   -7    4 #>  [5,]   -6    5 #>  [6,]   -5    6 #>  [7,]   -4    7 #>  [8,]   -3    8 #>  [9,]   -2    9 #> [10,]   -1   NA #> [11,]    0   NA object_with_very_long_name %[if]% \\(x)x %in% 1:10 #> [1] 1 2 3 4 5 6 7 8 9 object_with_very_long_name %[!if]% \\(x)x %in% 1:10 #>  [1] -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0  NA  NA  x <- c(1:9, NA, NaN, Inf) print(x) #>  [1]   1   2   3   4   5   6   7   8   9  NA NaN Inf x %unreal =% 0 # same as x[is.na(x)|is.nan(x)|is.infinite(x)] <- 0 print(x) #>  [1] 1 2 3 4 5 6 7 8 9 0 0 0"},{"path":"https://tony-aw.github.io/tinyoperations/reference/s_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Pattern specifications for string related infix operators. — stri_rgx","title":"Pattern specifications for string related infix operators. — stri_rgx","text":"%s-% %s/% operators, -place equivalents, well string detection operators (%s{}%, %s!{}%), perform pattern matching purpose, pattern given right hand side.  character vector string given right hand side, interpreted case-sensitive regex patterns stringi.  Instead giving string character vector regex patterns, one can also supply list specify exactly pattern interpreted. list use exact argument convention stringi.  example: list(regex=p, case_insensitive=FALSE, ...) list(fixed=p, ...) list(coll=p, ...) list(charclass=p, ...) arguments list simply passed appropriate functions stringi.  example: x %s/% p   counts often regular expression specified character vector p occurs x, whereas following, x %s/% list(fixed=p, case_insensitive=TRUE)   , except uses fixed (.e. literal) expression, distinguish upper case lower case characters.  Related , tinyoperations adds convenience functions based stri_opts_ - functions stringi (convenient sense already argument names, thus allowing auto code completion): stri_rgx(p, ...) equivalent c(list(regex = p), ...) stri_fxd(p, ...) equivalent c(list(fixed = p), ...) stri_cll(p, ...) equivalent c(list(coll = p), ...) stri_chrcls(p, ...) equivalent c(list(charclass = p), ... ) ellipsis (...) passed appropriate stri_opts-functions matches arguments.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/s_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pattern specifications for string related infix operators. — stri_rgx","text":"","code":"stri_rgx(   p,   case_insensitive,   comments,   dotall,   multiline,   time_limit,   stack_limit,   ... )  stri_fxd(p, case_insensitive, overlap, ...)  stri_cll(   p,   locale,   strength,   alternate_shifted,   french,   uppercase_first,   case_level,   numeric,   normalization,   ... )  stri_chrcls(p, ...)"},{"path":"https://tony-aw.github.io/tinyoperations/reference/s_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pattern specifications for string related infix operators. — stri_rgx","text":"p character vector giving pattern search . case_insensitive see stri_opts_regex stri_opts_fixed. comments, dotall, multiline, time_limit, stack_limit see stri_opts_regex. ... additional arguments part stri_opts - functions passed .  example: max_count overlap see stri_opts_fixed. locale, strength, alternate_shifted, french, uppercase_first, case_level, normalization, numeric see stri_opts_collator.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/s_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pattern specifications for string related infix operators. — stri_rgx","text":"list.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/s_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pattern specifications for string related infix operators. — stri_rgx","text":"","code":"x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- rep(\"a|e|i|o|u\", 2) # same as p <- list(regex=rep(\"a|e|i|o|u\", 2)) x %s/% p # count how often vowels appear in each string of vector x. #> [1] 3 2  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %s/% list(regex = rep(\"A|E|I|O|U\", 2), case_insensitive = TRUE) #> [1] 3 2 x %s/% stri_rgx(rep(\"A|E|I|O|U\", 2), case_insensitive = TRUE) #> [1] 3 2   x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- list(regex = c(\"A\", \"A\"), case_insensitive=TRUE) x %s{}% p #> [1]  TRUE FALSE x %s!{}% p #> [1] FALSE  TRUE  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- list(fixed = c(\"A\", \"A\"), case_insensitive=TRUE) x %s{}% p #> [1]  TRUE FALSE x %s!{}% p #> [1] FALSE  TRUE"},{"path":"https://tony-aw.github.io/tinyoperations/reference/tinyoperations_dry.html","id":null,"dir":"Reference","previous_headings":"","what":"The tinyoperations ","title":"The tinyoperations ","text":"\"Repeat \", sometimes abbreviated \"DRY\", coding principle write unnecessarily repetitive code. help effort, tinyoperations R package introduces functions: transform_if function subset_if operators -place unreal modifier operator. generalized -place (mathematical) modification operator. Infix operators -place modifying string arithmetic. Infix operators -place modifying string sub-setting. Please refer Read-file GitHub main page page information.  See: https://github.com/tony-aw/tinyoperations.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/tinyoperations_dry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The tinyoperations ","text":"","code":"tinyoperations_dry()"},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/tinyoperations_help.html","id":null,"dir":"Reference","previous_headings":"","what":"The tinyoperations help page — tinyoperations_help","title":"The tinyoperations help page — tinyoperations_help","text":"Welcome tinyoperations introduction help page!  tinyoperations R-package adds adds functions infix operators help programming etiquette.  primarily focuses 4 things:  (1) Safer decimal ()equality testing, safer atomic conversions, functions safer coding; see tinyoperations_safer.  (2) Extending string manipulation capabilities stringi R package; see tinyoperations_strings.  (3) Reducing repetitive code; see tinyoperations_dry.  (4) new package module import system, combines benefits aliasing package benefits attaching package; see tinyoperations_import miscellaneous functionality; see tinyoperations_misc. tinyoperations R-package one dependency, namely stringi. functions R-package fully vectorized optimized, well documented. Please also look Read-file GitHub main page using package: https://github.com/tony-aw/tinyoperations","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/tinyoperations_help.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The tinyoperations help page — tinyoperations_help","text":"","code":"tinyoperations_help()"},{"path":"https://tony-aw.github.io/tinyoperations/reference/tinyoperations_import.html","id":null,"dir":"Reference","previous_headings":"","what":"The tinyoperations import system — tinyoperations_import","title":"The tinyoperations import system — tinyoperations_import","text":"tinyoperations R package introduces new package import system.  One can use package without attaching package (.e. using :: using package alias), one can attach package (.e. using library() require()). advantages disadvantages loading without attaching package versus attaching package - least relevant - can compactly presented following table: tinyoperations attempts import system, somewhat find best worlds. introducing following functions: import_as: Allow main package + re-exports + dependencies + enhances + extensions loaded single alias. essentially combines attaching advantage using multiple related packages, whilst keeping advantages aliasing package. import_inops: Expose infix operators package alias object current environment. gains attaching advantage less typing, whilst simultaneously avoiding disadvantage attaching functions package globally. import_data: Directly return data set package, allow straight-forward assignment. source_selection: Source script, place specified objects current environment. also additional helper functions package import system, see x.import pkgs.  Please refer Read-file GitHub main page page information.  See: https://github.com/tony-aw/tinyoperations.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/tinyoperations_import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The tinyoperations import system — tinyoperations_import","text":"","code":"tinyoperations_import()"},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/tinyoperations_import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The tinyoperations import system — tinyoperations_import","text":"","code":"if (FALSE) { # loading \"tidytable\" + \"data.table\" under alias \"tdt.\": import_as(   tdt., \"tidytable\", dependencies = \"data.table\" )  # exposing operators from \"magrrittr\" to current environment: import_inops(\"magrittr\")  # directly assigning the \"starwars\" dataset to object \"d\": d <- import_data(\"starwars\", \"dplyr\")  # see it in action: d %>% tdt.$filter(species == \"Droid\") %>%   tdt.$select(name, tdt.$ends_with(\"color\"))  # source only specific functions from a script: source_selection(list(file=\"sourcetest.R\"), select = \"helloworld\") helloworld() }"},{"path":"https://tony-aw.github.io/tinyoperations/reference/tinyoperations_misc.html","id":null,"dir":"Reference","previous_headings":"","what":"The tinyoperations miscellaneous functionality — tinyoperations_misc","title":"The tinyoperations miscellaneous functionality — tinyoperations_misc","text":"additional functions provided tinyoperations R package: Infix logical operators exclusive-, -, -, number-type, string-type. Infix operators row- column-wise re-ordering matrices. Report infix operators present current environment, specified environment. Please refer Read-file GitHub main page page information.  See: https://github.com/tony-aw/tinyoperations.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/tinyoperations_misc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The tinyoperations miscellaneous functionality — tinyoperations_misc","text":"","code":"tinyoperations_misc()"},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/tinyoperations_safer.html","id":null,"dir":"Reference","previous_headings":"","what":"The tinyoperations ","title":"The tinyoperations ","text":"help make code safer, tinyoperations R package introduces functions: Safer decimal ()equality testing. Atomic type casting without stripping attributes. lock_TF function set lock T F TRUE FALSE. %<-c% operator assign locked constants. Please refer Read-file GitHub main page page information.  See: https://github.com/tony-aw/tinyoperations.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/tinyoperations_safer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The tinyoperations ","text":"","code":"tinyoperations_safer()"},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/tinyoperations_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"The tinyoperations expansion of the 'stringi' R package — tinyoperations_strings","title":"The tinyoperations expansion of the 'stringi' R package — tinyoperations_strings","text":"tinyoperations R package adds functions operators extend functionality stringi R package: Infix operators string arithmetic. Infix operators string sub-setting. Infix operators -place modifying string arithmetic. Infix operators -place modifying string sub-setting. Infix operators row- column-wise re-ordering matrices. tinyoperations package adds additional stringi functions, namely stri_locate_ith, stri_join_mat (aliases). functions use naming argument convention rest stringi functions, thus keeping code consistent. strcut_-functions. stringi pattern expressions options available string-pattern-related functions, appropriate. R package one dependency: stringi. dependencies, avoid \"dependency hell\". Although functions written R, aggressively optimized order speed stringi functions. Please also look Read-file GitHub main page using package: https://github.com/tony-aw/tinyoperations","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/tinyoperations_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The tinyoperations expansion of the 'stringi' R package — tinyoperations_strings","text":"","code":"tinyoperations_strings()"},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/transform_if.html","id":null,"dir":"Reference","previous_headings":"","what":"The transform_if function — transform_if","title":"The transform_if function — transform_if","text":"transform_if() function transforms object x, based logical result (TRUE, FALSE, NA) condition function cond(x) logical vector cond, : every value cond(x)==TRUE / cond==TRUE, function yes(x) run scalar yes returned. every value cond(x)==FALSE / cond==FALSE, function (x) run scalar returned. every value cond(x)==NA / cond==NA, function (x) run scalar returned.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/transform_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The transform_if function — transform_if","text":"","code":"transform_if(x, cond, yes = function(x) x, no = function(x) x, other = NA)"},{"path":"https://tony-aw.github.io/tinyoperations/reference/transform_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The transform_if function — transform_if","text":"x vector, matrix, array. cond either object class logical length x,  (possibly anonymous) function returns object class logical length x.  example: \\(x)x>0. yes (possibly anonymous) transformation function use function cond(x)==TRUE / logical cond==TRUE.  Alternatively, one can also supply atomic scalar.  argument yesis specified, defaults \\(x)x. (possibly anonymous) transformation function use function cond(x)==FALSE / logical cond==FALSE.  Alternatively, one can also supply atomic scalar.  argument specified, defaults \\(x)x. (possibly anonymous) transformation function use function cond(x) / logical cond returns NA.  Alternatively, one can also supply atomic scalar.  argument specified, defaults NA.  Note function  (x) run scalar returned function cond(x) logical cond NA, necessarily x NA.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/transform_if.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The transform_if function — transform_if","text":"transformed vector, matrix, array (attributes conserved).","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/transform_if.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The transform_if function — transform_if","text":"careful coercion! example following code: x <- c(\"\", \"b\") transform_if(x, \\(x)x==\"\", .numeric, .logical)  returns: [1] NA NA  due character vector given 2 incompatible classes.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/transform_if.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The transform_if function — transform_if","text":"","code":"x <- c(-10:9, NA, NA) object <- matrix(x, ncol=2) attr(object, \"helloworld\") <- \"helloworld\" print(object) #>       [,1] [,2] #>  [1,]  -10    1 #>  [2,]   -9    2 #>  [3,]   -8    3 #>  [4,]   -7    4 #>  [5,]   -6    5 #>  [6,]   -5    6 #>  [7,]   -4    7 #>  [8,]   -3    8 #>  [9,]   -2    9 #> [10,]   -1   NA #> [11,]    0   NA #> attr(,\"helloworld\") #> [1] \"helloworld\" y <- 0 z <- 1000 object |> transform_if(\\(x)x>y, log, \\(x)x^2, \\(x)-z) #>       [,1]          [,2] #>  [1,]  100     0.0000000 #>  [2,]   81     0.6931472 #>  [3,]   64     1.0986123 #>  [4,]   49     1.3862944 #>  [5,]   36     1.6094379 #>  [6,]   25     1.7917595 #>  [7,]   16     1.9459101 #>  [8,]    9     2.0794415 #>  [9,]    4     2.1972246 #> [10,]    1 -1000.0000000 #> [11,]    0 -1000.0000000 #> attr(,\"helloworld\") #> [1] \"helloworld\" object |> transform_if(object > y, log, \\(x)x^2, -z) #>       [,1]          [,2] #>  [1,]  100     0.0000000 #>  [2,]   81     0.6931472 #>  [3,]   64     1.0986123 #>  [4,]   49     1.3862944 #>  [5,]   36     1.6094379 #>  [6,]   25     1.7917595 #>  [7,]   16     1.9459101 #>  [8,]    9     2.0794415 #>  [9,]    4     2.1972246 #> [10,]    1 -1000.0000000 #> [11,]    0 -1000.0000000 #> attr(,\"helloworld\") #> [1] \"helloworld\""},{"path":"https://tony-aw.github.io/tinyoperations/reference/x.import.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for the tinyoperations package import system — x.import","title":"Helper functions for the tinyoperations package import system — x.import","text":"help.import() function finds help file functions alias object exposed infix operators.  attr.import() function gets one specific special attributes special attributes alias object returned import_as.","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/x.import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for the tinyoperations package import system — x.import","text":"","code":"help.import(..., i, alias)  attr.import(alias, which = NULL)"},{"path":"https://tony-aw.github.io/tinyoperations/reference/x.import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for the tinyoperations package import system — x.import","text":"... arguments passed help. either one following: function (use back-ticks function infix operator). Examples:  myfun , `%operator%` , myalias.$some_function . function, alias argument ignored. string giving function name topic (.e. \"myfun\", \"thistopic\"). string, argument alias must specified also. alias alias object created import_as function. attributes list. NULL, attributes returned.  Possibilities: \"pkgs\", \"conflicts\", \"versions\", \"args\", \"ordered_object_names\".","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/x.import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for the tinyoperations package import system — x.import","text":"help.import(): Opens appropriate help page.  attr.import(alias, = NULL): special attributes given alias object returned list.  attr.import(alias, = \"pkgs\"): Returns list 3 elements: packages_order: character vector package names, giving packages order loaded alias object. main_package: string giving name main package. Re-exported functions, present, loaded together main package. re_exports.pkgs: character vector package names, giving packages re-exported functions main package taken. attr.import(alias, = \"conflicts\"): order packages loaded alias object (see attribute pkgs$packages_order) matters: Functions later named packages overwrite earlier named packages, case conflicts. \"conflicts\" attribute returns data.frame showing exactly functions overwrite functions earlier named packages, \"win\" conflicts.  attr.import(alias, = \"versions\"): data.frame, giving version every package loaded alias, ignoring re-exports.  attr.import(alias, = \"args\"): Returns list input arguments. arguments supplied import_as alias object question created.  attr.import(alias, = \"ordered_object_names\"): Gives names objects alias, order loaded. unique names given, thus conflicting objects appear . (Note argument re_exports TRUE, re-exported functions loaded main package loaded, thus changing order slightly.)","code":""},{"path":"https://tony-aw.github.io/tinyoperations/reference/x.import.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper functions for the tinyoperations package import system — x.import","text":"help.import(...):  use topic / package / alias arguments together. either one set .","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinyoperations/reference/x.import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper functions for the tinyoperations package import system — x.import","text":"","code":"if (FALSE) { import_as(mr., \"magrittr\") import_inops(\"magrittr\")  attr.import(mr.) attr.import(mr., which=\"conflicts\")  help.import(i=mr.$add) help.import(i=`%>%`) help.import(i=\"add\", alias=mr.) }"}]
