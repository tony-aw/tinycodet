[{"path":"https://tony-aw.github.io/tinycodet/articles/a_safer.html","id":"decimal-inequality-testing-operators","dir":"Articles","previous_headings":"","what":"Decimal (in)equality testing operators","title":"Safer functionality","text":"package adds %d==%, %d!=% %d<%, %d>%, %d<=%, %d>=% ()equality operators, perform safer decimal number truth testing. virtually equivalent regular ()equality operators, ==, !=, <, >, <=, >=, except two aspects: decimal number truth testing operators assume absolute difference x y smaller Machine tolerance, sqrt(.Machine$double.eps), x y consider equal. example: (0.1*7) == 0.7 returns FALSE, even though equal, due way decimal numbers stored programming languages like R, Python, etc. (0.1*7) %d==% 0.7 returns TRUE. numeric input allowed, characters coerced numbers. .e. 1 < \"\" gives TRUE, whereas 1 %d<% \"\" gives error. character equality testing, see ?stringi::`%s==%`. Thus provide safer decimal number ()equality operators. examples:   also x %d{}% bnd x %d!{}% bnd operators, bnd vector length 2, 2-column matrix (nrow(bnd)==length(x) nrow(bnd)==1). x %d{}% bnd operator checks x within closed interval bounds defined bnd. x %d!{}% bnd operator checks x outside closed interval bounds defined bnd. Examples:  ","code":"x <- c(0.3, 0.6, 0.7) y <- c(0.1*3, 0.1*6, 0.1*7) print(x); print(y) #> [1] 0.3 0.6 0.7 #> [1] 0.3 0.6 0.7 x == y # gives FALSE, but should be TRUE #> [1] FALSE FALSE FALSE x!= y # gives TRUE, should be FALSE #> [1] TRUE TRUE TRUE x > y # not wrong #> [1] FALSE FALSE FALSE x < y # gives TRUE, should be FALSE #> [1] TRUE TRUE TRUE x %d==% y # here it's done correctly #> [1] TRUE TRUE TRUE x %d!=% y #> [1] FALSE FALSE FALSE x %d<% y # correct #> [1] FALSE FALSE FALSE x %d>% y # correct #> [1] FALSE FALSE FALSE x %d<=% y # correct #> [1] TRUE TRUE TRUE x %d>=% y # correct #> [1] TRUE TRUE TRUE x <- c(0.3, 0.6, 0.7) bnd <- cbind(x-0.1, x+0.1) x %d{}% bnd #> [1] TRUE TRUE TRUE x %d!{}% bnd #> [1] FALSE FALSE FALSE"},{"path":"https://tony-aw.github.io/tinycodet/articles/a_safer.html","id":"safer-atomic-type-casting","dir":"Articles","previous_headings":"","what":"Safer atomic type casting","title":"Safer functionality","text":"Atomic type casting R generally performed using functions .logical(), .integer(), .double(), .character(). functions annoying property strip attributes. ’ve taken liberty creating convenient atomic conversion functions: as_bool(): .logical(), attributes preserved. as_int(): .integer(), attributes preserved. as_dbl(): .double() (.e. convert real numbers), attributes preserved. as_chr(): .character(), attributes preserved. attributes except “class” attribute preserved. Examples:  ","code":"x <- c(rep(0, 2), seq(0, 2.5, by=0.5)) |> matrix(ncol=2) colnames(x) <- c(\"one\", \"two\") attr(x, \"test\") <- \"test\" print(x) #>      one two #> [1,] 0.0 1.0 #> [2,] 0.0 1.5 #> [3,] 0.0 2.0 #> [4,] 0.5 2.5 #> attr(,\"test\") #> [1] \"test\"  as_bool(x) #>        one  two #> [1,] FALSE TRUE #> [2,] FALSE TRUE #> [3,] FALSE TRUE #> [4,]  TRUE TRUE #> attr(,\"test\") #> [1] \"test\" as_int(x) #>      one two #> [1,]   0   1 #> [2,]   0   1 #> [3,]   0   2 #> [4,]   0   2 #> attr(,\"test\") #> [1] \"test\" as_dbl(x) #>      one two #> [1,] 0.0 1.0 #> [2,] 0.0 1.5 #> [3,] 0.0 2.0 #> [4,] 0.5 2.5 #> attr(,\"test\") #> [1] \"test\" as_chr(x) #>      one   two   #> [1,] \"0\"   \"1\"   #> [2,] \"0\"   \"1.5\" #> [3,] \"0\"   \"2\"   #> [4,] \"0.5\" \"2.5\" #> attr(,\"test\") #> [1] \"test\""},{"path":"https://tony-aw.github.io/tinycodet/articles/a_safer.html","id":"locked-constants","dir":"Articles","previous_headings":"","what":"Locked constants","title":"Safer functionality","text":"One can re-assign values T F. One can even run something like T <- FALSE F <- TRUE! tinycodet adds lock_TF() function forces T stay TRUE F stay FALSE. Essentially, lock_TF() function creates locked constant T F, assigned TRUE FALSE respectively, prevent user re-assigning . Removing created T F constants allows re-assignment .   X %<-c% operator creates constant X assignment . Constants changed, accessed removed. piece code requires unchangeable constant, use operator create said constant.  ","code":""},{"path":"https://tony-aw.github.io/tinycodet/articles/b_import_main.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Import system - main functions","text":"One can use package without attaching (example using ::), one can attach package (example using library() require()). advantages disadvantages using without attaching package versus attaching package - least relevant article - can compactly presented following table: tinycodet attempts import system, somewhat find best worlds. introducing following functions: import_as(): Import main package, optionally re-exports + dependencies + extensions, single alias. essentially combines attaching advantage using multiple related packages (row 7 table ), whilst keeping advantages using without attaching package. import_inops(): Expose infix operators package alias object current environment. gains attaching advantage less typing (row 6 table ), whilst simultaneously avoiding disadvantage attaching functions package globally (row 4). import_data(): Directly return data set package, allow straight-forward assignment. import package system presented just another option provided, just like import box packages provide alternative import systems. Please feel free completely ignore article ’re really adamant attaching packages using library()/require() :-). article rather lengthy, start quick example code using tinycodet’ import system: code run without attaching packages dependencies. none problems attaching package present. Despite length article, mostly due overly detailed, import system made simple user. follows descriptions main functions together form new, infix-operator friendly & multi-package assignment friendly, import management system.  ","code":"# importing \"tidytable\" + its re-exports + \"data.table\" under alias \"tdt.\": import_as(    ~ tdt., \"tidytable\", dependencies = \"data.table\" ) #> Importing packages and registering methods... #> Done #> You can now access the functions using `tdt.$` #> For conflicts report, packages order, and other attributes, run `attr.import(tdt.)`  # exposing operators from `magrrittr` to current environment: import_inops(\"magrittr\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done  # directly assigning the \"starwars\" dataset to object \"d\": d <- import_data(\"dplyr\", \"starwars\")   # see it in action: d %>% tdt.$filter(species == \"Droid\") %>%   tdt.$select(name, tdt.$ends_with(\"color\")) #> # A tidytable: 6 × 4 #>   name   hair_color skin_color  eye_color #>   <chr>  <chr>      <chr>       <chr>     #> 1 C-3PO  NA         gold        yellow    #> 2 R2-D2  NA         white, blue red       #> 3 R5-D4  NA         white, red  red       #> 4 IG-88  none       metal       red       #> 5 R4-P17 none       silver, red red, blue #> 6 BB8    none       none        black  rm(list=ls()) # clearing everything"},{"path":"https://tony-aw.github.io/tinycodet/articles/b_import_main.html","id":"import_as","dir":"Articles","previous_headings":"","what":"import_as","title":"Import system - main functions","text":"import_as() function imports R package + re-exports alias, also imports specified direct dependencies /direct extensions package alias. also informs user objects package overwrite objects packages, never surprised. main arguments import_as() function : alias: name alias object import package(s). Can given single string formula single term. keep aliases easily distinguishable objects can also subset $ operator, recommend ending (starting!) alias names dot (.). main_package: name (string) main package import. re_exports: R packages export functions defined package, direct dependencies - “re-exports”. TRUE (default), re-exports main_package added alias, analogous behaviour base R’s :: operator. FALSE, re-exports added. dependencies: optional character vector giving dependencies main_package import alias also. extensions: optional character vector giving extensions main_package import alias also. lib.loc: library paths look packages; defaults .libPaths(). argument present import_ - functions. one example. Lets import data.table extensions tidytable, alias, call “tdt.” (“tidy data.table”): Now one can use imported functions using: tdt.$some_function().  ","code":"import_as(~ tdt., \"data.table\", extensions = \"tidytable\") # this creates the tdt. object #> Importing packages and registering methods... #> Done #> You can now access the functions using `tdt.$` #> For conflicts report, packages order, and other attributes, run `attr.import(tdt.)`"},{"path":"https://tony-aw.github.io/tinycodet/articles/b_import_main.html","id":"import_inops","dir":"Articles","previous_headings":"","what":"import_inops","title":"Import system - main functions","text":"aliasing R package, infix operators also imported alias. However, may cumbersome use alias. example : : cumbersome. Therefore, tinycodet also adds import_inops() function, exposes infix operators. infix operators exposed current environment (like global environment, environment within function), attach functions namespace. example, expose infix operators alias object current environment, one can following: One can give unexpose argument instead expose argument, delete infix operators packages/package alias exposed current environment import_inops(). Infix operators defined user touched. example: One can also expose unexpose infix operators directly package, instead via alias object. case package name must given string. example, following code exposes infix operators data.table R package: similarly one can remove exposed infix operators current environment follows:   import_inops() function exclude include.arguments specify exactly infix operators expose current environment, well overwrite inherits arguments specify infix operators expose already exist current environment (loaded namespaces). can handy prevent overwriting (user defined) infix operators already present current environment loaded namespaces. Examples:   user rather attach infix operators (global) namespace, tinycodet provides pkg_lsf() function, returns character vector listing functions infix operators package. vector can used include.argument library() function. Like :  ","code":"import_as(~ to., \"tinycodet\") to.$`%row~%`(x, mat) tinycodet::`%row~%`(x, mat) import_inops(expose = tdt.) #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = tdt.) #> unexposing infix operators... #> Done import_inops(expose =\"data.table\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = \"data.table\") #> checking for infix operators exposed to the current environment by `import_inops()` ... #> Removing the following infix operators: #> %between%, %chin%, %flike%, %ilike%, %inrange%, %like%, := #> Done import_inops(expose = tdt., include.only = \":=\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = tdt.) #> unexposing infix operators... #> Done import_inops(expose = \"data.table\", , include.only = \":=\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = \"data.table\") #> checking for infix operators exposed to the current environment by `import_inops()` ... #> Removing the following infix operators: #> := #> Done library(magrittr, include.only = pkg_lsf(\"magrittr\", type = \"inops\"))"},{"path":"https://tony-aw.github.io/tinycodet/articles/b_import_main.html","id":"import_data","dir":"Articles","previous_headings":"","what":"import_data","title":"Import system - main functions","text":"import_as() import_inops() functions get functions package namespace. packages often also data sets, often part namespace. data() function core R can already load data packages, function loads data global environment, instead returning data directly, making assigning data specific variable bit annoying. Therefore, tinycodet package introduces import_data() function, directly returns data set package. example, import chicago data set gamair R package, assign directly variable (without re-assignment ), one simply runs following:  ","code":"d <- import_data(\"gamair\", \"chicago\") head(d) #>   death pm10median pm25median  o3median  so2median    time tmpd #> 1   130 -7.4335443         NA -19.59234  1.9280426 -2556.5 31.5 #> 2   150         NA         NA -19.03861 -0.9855631 -2555.5 33.0 #> 3   101 -0.8265306         NA -20.21734 -1.8914161 -2554.5 33.0 #> 4   135  5.5664557         NA -19.67567  6.1393413 -2553.5 29.0 #> 5   126         NA         NA -19.21734  2.2784649 -2552.5 32.0 #> 6   130  6.5664557         NA -17.63400  9.8585839 -2551.5 40.0"},{"path":"https://tony-aw.github.io/tinycodet/articles/b_import_main.html","id":"when-to-use-or-not-to-use-the-new-import-system","dir":"Articles","previous_headings":"","what":"When to use or not to use the new import system","title":"Import system - main functions","text":"‘tinycodet’ import system helpful particularly packages least one following properties: namespace package(s) conflicts packages. namespace package(s) conflicts core R, recommended R packages. package(s) function names generic enough, obvious function came package. necessity using ‘tinycodet’ import system every single package. One can safely attach ‘stringi’ package, example, ‘stringi’ uses unique immediately recognisable naming scheme (virtually ‘stringi’ functions start “stri_”), naming scheme conflict core R, packages. course, one wishes use ‘stringi’ within specific environment, like inside function, becomes advantageous import ‘stringi’ using ‘tinycodet’ import system. case import_LL() function applicable.  ","code":""},{"path":"https://tony-aw.github.io/tinycodet/articles/b_import_main.html","id":"function-attributes","dir":"Articles","previous_headings":"","what":"Function attributes","title":"Import system - main functions","text":"functions imported import_as(), import_inops(), import_LL() functions “package” attribute, always know function came package. example:  ","code":"import_inops(\"magrittr\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done attributes(`%>%`) #> $package #> [1] \"magrittr\" #>  #> $function_name #> [1] \"%>%\" #>  #> $tinyimport #> [1] \"tinyimport\" #>  #> $class #> [1] \"function\"   \"tinyimport\""},{"path":"https://tony-aw.github.io/tinycodet/articles/b_import_main.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Import system - main functions","text":"One R package benefit import system introduced tinycodet, dplyr R package. dplyr R package overwrites core R functions (including base R) overwrites functions pre-installed recommended R packages (MASS). .e.: Moreover, dplyr’s function names sometimes generic enough obvious way tell function came dplyr package (comparison: one can generally recognize stringi functions start stri_). look CRAN page dplyr, ’ll notice interesting extensions might want use, powerjoin. prevent masking base R functions, prevent obscurity regarding functions come dplyr powerjoin, functions come core R, one constantly use dplyr:: powerjoin::. constantly switching package prefixes aliases perhaps undesirable. tinycodet’ import_as() function might help. example dplyr imported (including re-exports), along powerjoin (extension), one alias ’ll call “dpr.”. Moreover, infix operators magrittr exposed current environment. functions dplyr can now used dpr.$ prefix. way, base R functions longer overwritten, clear someone reads code whether functions like filter() function base R filter function, dplyr filter function, latter called dpr.$filter(). Let’s first run simple example code imported functions: Just add dpr.$ front functions ’d normally use, everything works just expected. Now lets run example powerjoin GitHub page (https://github.com/moodymudskipper/powerjoin), using alias: Notice change made, functions start dpr.$, rest . need constantly switching dplyr::..., powerjoin::... - yet still clear code functions came dplyr + powerjoin family, fear overwriting functions R packages - let alone core R functions.  ","code":"rm(list=ls()) # clearing environment again library(MASS) library(dplyr) # <- notice dplyr overwrites base R and recommended R packages #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:MASS': #>  #>     select #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  # detaching dplyr again: detach(\"package:dplyr\") import_as(   ~ dpr., \"dplyr\", extensions = \"powerjoin\", lib.loc = .libPaths() ) #> Importing packages and registering methods... #> Done #> You can now access the functions using `dpr.$` #> For conflicts report, packages order, and other attributes, run `attr.import(dpr.)`  import_inops(\"magrittr\") # getting the infix operators from `magrittr` #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done d <- import_data(\"dplyr\", \"starwars\") d %>%   dpr.$filter(.data$species == \"Droid\") %>% # notice the \".data\" pronoun can be used without problems   dpr.$select(name, dpr.$ends_with(\"color\")) #> # A tibble: 6 × 4 #>   name   hair_color skin_color  eye_color #>   <chr>  <chr>      <chr>       <chr>     #> 1 C-3PO  NA         gold        yellow    #> 2 R2-D2  NA         white, blue red       #> 3 R5-D4  NA         white, red  red       #> 4 IG-88  none       metal       red       #> 5 R4-P17 none       silver, red red, blue #> 6 BB8    none       none        black male_penguins <- dpr.$tribble(      ~name,    ~species,     ~island, ~flipper_length_mm, ~body_mass_g,  \"Giordan\",    \"Gentoo\",    \"Biscoe\",               222L,        5250L,   \"Lynden\",    \"Adelie\", \"Torgersen\",               190L,        3900L,   \"Reiner\",    \"Adelie\",     \"Dream\",               185L,        3650L )  female_penguins <- dpr.$tribble(      ~name,    ~species,  ~island, ~flipper_length_mm, ~body_mass_g,   \"Alonda\",    \"Gentoo\", \"Biscoe\",               211,        4500L,      \"Ola\",    \"Adelie\",  \"Dream\",               190,        3600L, \"Mishayla\",    \"Gentoo\", \"Biscoe\",               215,        4750L, ) dpr.$check_specs() #> # powerjoin check specifications #> ℹ implicit_keys #> → column_conflict #> → duplicate_keys_left #> → duplicate_keys_right #> → unmatched_keys_left #> → unmatched_keys_right #> → missing_key_combination_left #> → missing_key_combination_right #> → inconsistent_factor_levels #> → inconsistent_type #> → grouped_input #> → na_keys  dpr.$power_inner_join(   male_penguins[c(\"species\", \"island\")],   female_penguins[c(\"species\", \"island\")] ) #> Joining, by = c(\"species\", \"island\") #> # A tibble: 3 × 2 #>   species island #>   <chr>   <chr>  #> 1 Gentoo  Biscoe #> 2 Gentoo  Biscoe #> 3 Adelie  Dream"},{"path":"https://tony-aw.github.io/tinycodet/articles/c_import_additional.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Import system - additional details","text":"previous article, “Import system - main functions”, discussed main functions import system. Please read article first reading article.  ","code":""},{"path":"https://tony-aw.github.io/tinycodet/articles/c_import_additional.html","id":"miscellaneous-import_---functions","dir":"Articles","previous_headings":"","what":"Miscellaneous import_ - functions","title":"Import system - additional details","text":"Beside main import_ functions (import_as(), import_inops(), import_data()), 2 miscellaneous import_ functions: import_LL() import_int().   import_LL() function places specific functions package current environment, also locks specified functions prevent modification. primary use-case function exposing functions inside local environment, like environment within function. (“LL” stands “Local & Locked”.) Example:   import_int() function directly returns internal function package. similar ::: operator, 2 key differences: import_int() includes lib.loc argument. import_int() searches internal functions, exported ones. makes clearer code ’re using internal function, instead making ambiguous. main argument form argument, 2-sided formula one term side, left term giving package name right term giving name internal function. Example:  ","code":"rm(list = ls()) import_LL(\"tidytable\", \"across\") #> exposing and locking functions to current environment ... #> Done ls() # notice `accross` is now exposed in this environment #> [1] \"across\" # Using through re-assignment: fun <- import_int(tinycodet ~ .internal_paste, .libPaths()) fun(\"hello\", \"world\") #> [1] \"helloworld\"  # Or using directly: import_int(   tinycodet ~ .internal_paste, .libPaths() )(\"hello\", \"world\") #> [1] \"helloworld\""},{"path":"https://tony-aw.github.io/tinycodet/articles/c_import_additional.html","id":"s3-methods-they-just-work","dir":"Articles","previous_headings":"","what":"S3 methods: they just work","title":"Import system - additional details","text":"importing packages tinycodet’ import system, S3 methods work just fine. example, S3 method ” plot() ” works objects mgcv R package, even imported alias:  Also, S3 methods defined package automatically registered, thus automatically work. example, following code just works: importing packages, everything works expected, including S3 methods.  ","code":"import_as(~ mgcv., \"mgcv\") |> suppressMessages() d <- import_data(\"gamair\", \"chicago\")  # just a random model for the sake of demonstration: model <- mgcv.$gam(death ~ s(o3median), data=d) isS3method(f=\"plot\", class=\"gam\") # this is an S3 method #> [1] TRUE plot(model) import_as(~ dpr., \"dplyr\") |> suppressMessages() import_inops(\"magrittr\") |> suppressMessages() d <- import_data(\"dplyr\", \"starwars\") d <- d %>% dpr.$group_by(species)  isS3method(f=\"arrange\", class=\"data.frame\", envir = dpr.) # this is an S3 method #> [1] TRUE isS3method(f=\"relocate\", class=\"data.frame\", envir = dpr.) # this is an S3 method #> [1] TRUE # this works: d %>%   dpr.$arrange(dpr.$desc(mass)) %>%   dpr.$relocate(species, mass) #> # A tibble: 87 × 14 #> # Groups:   species [38] #>    species    mass name  height hair_color skin_color eye_color birth_year sex   #>    <chr>     <dbl> <chr>  <int> <chr>      <chr>      <chr>          <dbl> <chr> #>  1 Hutt       1358 Jabb…    175 NA         green-tan… orange         600   herm… #>  2 Kaleesh     159 Grie…    216 none       brown, wh… green, y…       NA   male  #>  3 Droid       140 IG-88    200 none       metal      red             15   none  #>  4 Human       136 Dart…    202 none       white      yellow          41.9 male  #>  5 Wookiee     136 Tarf…    234 brown      brown      blue            NA   male  #>  6 Human       120 Owen…    178 brown, gr… light      blue            52   male  #>  7 Trandosh…   113 Bossk    190 none       green      red             53   male  #>  8 Wookiee     112 Chew…    228 brown      unknown    blue           200   male  #>  9 Human       110 Jek …    180 brown      fair       blue            NA   male  #> 10 Besalisk    102 Dext…    198 none       brown      yellow          NA   male  #> # ℹ 77 more rows #> # ℹ 5 more variables: gender <chr>, homeworld <chr>, films <list>, #> #   vehicles <list>, starships <list>"},{"path":"https://tony-aw.github.io/tinycodet/articles/c_import_additional.html","id":"alias-attributes","dir":"Articles","previous_headings":"","what":"Alias attributes","title":"Import system - additional details","text":"One may noticed “Import system - main functions” article, aliasing package like : … produces several messages, including message “conflicts report, packages order, attributes, run attr.import()”. attr.import() function allows user access special attributes stored locked inside alias object. attributes show imported package overwrites imported functions, order packages imported . examples. Show packages imported alias, order packages imported, packages re-exported functions came : Show functions packages “win” conflicts: Show arguments used import_as() call produced alias object question: help file attr.import() provides details options.  ","code":"import_as(~ tdt., \"tidytable\", re_exports = TRUE, dependencies = \"data.table\") #> Importing packages and registering methods... #> Done #> You can now access the functions using `tdt.$` #> For conflicts report, packages order, and other attributes, run `attr.import(tdt.)` attr.import(tdt., \"pkgs\") #> $packages_order #> [1] \"data.table\" \"tidytable\"  #>  #> $main_package #> [1] \"tidytable\" #>  #> $re_exports.pkgs #> [1] \"data.table\" \"rlang\"      \"tidyselect\" \"magrittr\"   \"pillar\" attr.import(tdt., \"conflicts\")|> knitr::kable() attr.import(tdt., \"args\") #> $main_package #> [1] \"tidytable\" #>  #> $re_exports #> [1] TRUE #>  #> $dependencies #> [1] \"data.table\" #>  #> $extensions #> NULL #>  #> $lib.loc #> [1] \"C:/Users/Tony/AppData/Local/Temp/RtmpQb3B3T/temp_libpathc7c2381f3f\" #> [2] \"D:/Programs/R-4.3.2/library\"                                        #>  #> $import_order #> [1] \"dependencies\" \"main_package\" \"extensions\""},{"path":"https://tony-aw.github.io/tinycodet/articles/c_import_additional.html","id":"help-import","dir":"Articles","previous_headings":"","what":"help.import","title":"Import system - additional details","text":"help.import() function gets help file function (topic string ), even function inside alias object, function unattached function (like exposed infix operators). Example:  ","code":"import_as(~ mr., \"magrittr\") import_inops(mr.)  help.import(i=mr.$add) help.import(i=`%>%`) help.import(i=\"add\", alias=mr.)"},{"path":"https://tony-aw.github.io/tinycodet/articles/c_import_additional.html","id":"miscellaneous-comments-on-package-imports","dir":"Articles","previous_headings":"","what":"Miscellaneous comments on package imports","title":"Import system - additional details","text":"magrittr rlang packages add “pronouns” R: ., . data, .env. Fret , pronouns work regardless attached package . don’t need use something like rlang::.data rlang.$.data pronoun work. just work.   additional miscellaneous functions related package import system perhaps mentioned also: pkg_get_deps() function gets dependencies (enhances) package, regardless package CRAN non-CRAN. See help file details. pkgs %installed % lib.loc operator checks packages specified character vector pkgs installed library paths lib.loc, without attaching even loading packages.  ","code":""},{"path":"https://tony-aw.github.io/tinycodet/articles/d_strings_functions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"String related functions","text":"Virtually every programming language, even primarily focused mathematics, point deal strings. R’s atomic classes basically boil form either numbers characters. R’s numerical functions generally fast. R’s native string functions somewhat slow, unified naming scheme, comprehensive R’s impressive numerical functions. primary R-package fixes ‘stringi’. ‘stringi’ fastest comprehensive string manipulation package available time writing. Many string related packages fully depend ‘stringi’. ‘stringr’ package, example, merely thin wrapper around ‘stringi’. ‘tinycodet’ package adds bit functionality ‘stringi’ string manipulation capabilities.  ","code":""},{"path":"https://tony-aw.github.io/tinycodet/articles/d_strings_functions.html","id":"stri_locate_ith","dir":"Articles","previous_headings":"","what":"stri_locate_ith","title":"String related functions","text":"Suppose one wants transform first vowels strings character vector str, upper case vowels become lower case, vice-versa. One can completely stringi + base R follows: now suppose one wants transform second-last vowel. going ? ’s impossible, also super straight-forward. clear code, stringi really needs kind “stri_locate_ith” function. , course, tinycodet package provides just . stri_locate_ith(str, , ...) function locates every element/string character vector str, \\(^\\textrm{th}\\) occurrence (regex/fixed/etc) pattern. positive, occurrence counted left right. Negative values also allowed, case occurrence counted right left. =0 allowed though. Thus, get second occurrence pattern, use =2, get second-last occurrence, use =-2. stri_locate_ith(str, , ...) function uses exact argument naming convention stringi, keep code consistent. just like stringi::stri_locate_first/last, stri_locate_ith(str, , ...) function vectorized function: str well pattern (regex, fixed, coll, charclass) can different-valued vectors.   transform second-last occurrence, one can now use stri_locate_ith() similar way done stri_locate_first/last: Notice code virtually equivalent. need change locate function.   also stri_locate_ith_boundaries() function, course locates \\(^\\textrm{th}\\) text boundary.  ","code":"x <- c(\"HELLO WORLD\", \"goodbye world\") loc <- stringi::stri_locate_first(x, regex=\"a|e|i|o|u\", case_insensitive=TRUE) extr <- stringi::stri_sub(x, from=loc) repl <- chartr(extr, old = \"a-zA-Z\", new = \"A-Za-z\") stringi::stri_sub_replace(x, loc, replacement=repl) #> [1] \"HeLLO WORLD\"   \"gOodbye world\" x <- c(\"HELLO WORLD\", \"goodbye world\")  loc <- stri_locate_ith( # this part is the key-difference   x, -2, regex=\"a|e|i|o|u\", case_insensitive=TRUE )  extr <- stringi::stri_sub(x, from=loc) repl <- chartr(extr, old = \"a-zA-Z\", new = \"A-Za-z\") stringi::stri_sub_replace(x, loc, replacement=repl) #> [1] \"HELLo WORLD\"   \"goodbyE world\""},{"path":"https://tony-aw.github.io/tinycodet/articles/d_strings_functions.html","id":"strcut_---functions","dir":"Articles","previous_headings":"","what":"strcut_ - functions","title":"String related functions","text":"tinycodet R package adds 2 strcut functions: strcut_loc() strcut_brk(). strcut_loc()function cuts every string character vector around location range loc, every string cut following parts: sub-string loc; sub-string loc ; sub-string loc. location range loc usually matrix 2 columns, giving start end points pattern match. strcut_brk() function basically wrapper around stringi::stri_split_boundaries(..., simplify=NA), conveniently named arguments. Examples:  ","code":"x <- rep(paste0(1:10, collapse=\"\"), 10) print(x) #>  [1] \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" #>  [6] \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" loc <- stri_locate_ith(x, 1:10, fixed = as.character(1:10)) strcut_loc(x, loc) #>       prepart     mainpart postpart     #>  [1,] \"\"          \"1\"      \"2345678910\" #>  [2,] \"1\"         \"2\"      \"345678910\"  #>  [3,] \"12\"        \"3\"      \"45678910\"   #>  [4,] \"123\"       \"4\"      \"5678910\"    #>  [5,] \"1234\"      \"5\"      \"678910\"     #>  [6,] \"12345\"     \"6\"      \"78910\"      #>  [7,] \"123456\"    \"7\"      \"8910\"       #>  [8,] \"1234567\"   \"8\"      \"910\"        #>  [9,] \"12345678\"  \"9\"      \"10\"         #> [10,] \"123456789\" \"10\"     \"\" strcut_loc(x, c(5,5)) #>       prepart mainpart postpart #>  [1,] \"1234\"  \"5\"      \"678910\" #>  [2,] \"1234\"  \"5\"      \"678910\" #>  [3,] \"1234\"  \"5\"      \"678910\" #>  [4,] \"1234\"  \"5\"      \"678910\" #>  [5,] \"1234\"  \"5\"      \"678910\" #>  [6,] \"1234\"  \"5\"      \"678910\" #>  [7,] \"1234\"  \"5\"      \"678910\" #>  [8,] \"1234\"  \"5\"      \"678910\" #>  [9,] \"1234\"  \"5\"      \"678910\" #> [10,] \"1234\"  \"5\"      \"678910\"   test <- c(\"The above-mentioned    features are very useful. \", \"Spam, spam, eggs, bacon, and spam. 123 456 789\") strcut_brk(test, \"line\") #>      [,1]     [,2]     [,3]            [,4]        [,5]   [,6]     [,7]       #> [1,] \"The \"   \"above-\" \"mentioned    \" \"features \" \"are \" \"very \"  \"useful. \" #> [2,] \"Spam, \" \"spam, \" \"eggs, \"        \"bacon, \"   \"and \" \"spam. \" \"123 \"     #>      [,8]   [,9]  #> [1,] NA     NA    #> [2,] \"456 \" \"789\" strcut_brk(test, \"word\") #>      [,1]   [,2] [,3]    [,4]   [,5]        [,6]   [,7]       [,8] [,9]  #> [1,] \"The\"  \" \"  \"above\" \"-\"    \"mentioned\" \"    \" \"features\" \" \"  \"are\" #> [2,] \"Spam\" \",\"  \" \"     \"spam\" \",\"         \" \"    \"eggs\"     \",\"  \" \"   #>      [,10]   [,11]  [,12] [,13]    [,14] [,15]  [,16] [,17] [,18] [,19] [,20] #> [1,] \" \"     \"very\" \" \"   \"useful\" \".\"   \" \"    NA    NA    NA    NA    NA    #> [2,] \"bacon\" \",\"    \" \"   \"and\"    \" \"   \"spam\" \".\"   \" \"   \"123\" \" \"   \"456\" #>      [,21] [,22] #> [1,] NA    NA    #> [2,] \" \"   \"789\" strcut_brk(test, \"sentence\") #>      [,1]                                                [,2]          #> [1,] \"The above-mentioned    features are very useful. \" NA            #> [2,] \"Spam, spam, eggs, bacon, and spam. \"               \"123 456 789\" strcut_brk(test, \"character\") #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,] \"T\"  \"h\"  \"e\"  \" \"  \"a\"  \"b\"  \"o\"  \"v\"  \"e\"  \"-\"   \"m\"   \"e\"   \"n\"   \"t\"   #> [2,] \"S\"  \"p\"  \"a\"  \"m\"  \",\"  \" \"  \"s\"  \"p\"  \"a\"  \"m\"   \",\"   \" \"   \"e\"   \"g\"   #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,] \"i\"   \"o\"   \"n\"   \"e\"   \"d\"   \" \"   \" \"   \" \"   \" \"   \"f\"   \"e\"   \"a\"   #> [2,] \"g\"   \"s\"   \",\"   \" \"   \"b\"   \"a\"   \"c\"   \"o\"   \"n\"   \",\"   \" \"   \"a\"   #>      [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] #> [1,] \"t\"   \"u\"   \"r\"   \"e\"   \"s\"   \" \"   \"a\"   \"r\"   \"e\"   \" \"   \"v\"   \"e\"   #> [2,] \"n\"   \"d\"   \" \"   \"s\"   \"p\"   \"a\"   \"m\"   \".\"   \" \"   \"1\"   \"2\"   \"3\"   #>      [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] #> [1,] \"r\"   \"y\"   \" \"   \"u\"   \"s\"   \"e\"   \"f\"   \"u\"   \"l\"   \".\"   \" \"   #> [2,] \" \"   \"4\"   \"5\"   \"6\"   \" \"   \"7\"   \"8\"   \"9\"   NA    NA    NA"},{"path":"https://tony-aw.github.io/tinycodet/articles/d_strings_functions.html","id":"matrix-re-ordering-operators","dir":"Articles","previous_headings":"","what":"Matrix re-ordering operators","title":"String related functions","text":"matrix re-ordering operators quite handy re-ordering strings, since strcut_ - functions return matrices, stri_join_mat() aliases concatenate matrices. See documentation matrix operators: ?`%row~%` ?`%col~%` See also “Miscellaneous functionality” article.  ","code":""},{"path":"https://tony-aw.github.io/tinycodet/articles/d_strings_functions.html","id":"matrix-joining","dir":"Articles","previous_headings":"","what":"Matrix joining","title":"String related functions","text":"tinycodet package adds tiny additional function stringi: stri_join_mat (aliases stri_c_mat stri_paste_mat). name suggests, functions perform row-wise (margin=1; default) column-wise (margin=2) joining matrix strings, thereby transforming vector strings. can already base R, requires converting matrix data.frame list, calling stri_join inside .call(), just seems much trouble something soooo abysmally simple. example usage re-ordering strings, words, sentences :  ","code":"# sorting characters in strings: x <- c(paste(sample(letters), collapse = \"\"), paste(sample(letters), collapse = \"\")) print(x) #> [1] \"agnitokfwcxerdpujvlzybhmqs\" \"eqxuyjrntkbcagwzmvioflpdhs\" mat <- strcut_brk(x) rank <- stringi::stri_rank(as.vector(mat)) |>  matrix(ncol=ncol(mat)) sorted <- mat %row~% rank print(sorted) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,] \"a\"  \"b\"  \"c\"  \"d\"  \"e\"  \"f\"  \"g\"  \"h\"  \"i\"  \"j\"   \"k\"   \"l\"   \"m\"   \"n\"   #> [2,] \"a\"  \"b\"  \"c\"  \"d\"  \"e\"  \"f\"  \"g\"  \"h\"  \"i\"  \"j\"   \"k\"   \"l\"   \"m\"   \"n\"   #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,] \"o\"   \"p\"   \"q\"   \"r\"   \"s\"   \"t\"   \"u\"   \"v\"   \"w\"   \"x\"   \"y\"   \"z\"   #> [2,] \"o\"   \"p\"   \"q\"   \"r\"   \"s\"   \"t\"   \"u\"   \"v\"   \"w\"   \"x\"   \"y\"   \"z\" stri_join_mat(sorted, margin=1) #> [1] \"abcdefghijklmnopqrstuvwxyz\" \"abcdefghijklmnopqrstuvwxyz\" stri_join_mat(sorted, margin=2) #>  [1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\" \"ff\" \"gg\" \"hh\" \"ii\" \"jj\" \"kk\" \"ll\" \"mm\" \"nn\" \"oo\" #> [16] \"pp\" \"qq\" \"rr\" \"ss\" \"tt\" \"uu\" \"vv\" \"ww\" \"xx\" \"yy\" \"zz\"  # sorting words: x <- c(\"2nd 3rd 1st\", \"Goodbye everyone\") print(x) #> [1] \"2nd 3rd 1st\"      \"Goodbye everyone\" mat <- strcut_brk(x, \"word\") rank <- stringi::stri_rank(as.vector(mat)) |> matrix(ncol=ncol(mat)) sorted <- mat %row~% rank sorted[is.na(sorted)] <- \"\" stri_c_mat(sorted, margin=1, sep = \" \") # <- alias for stri_join_mat #> [1] \"    1st 2nd 3rd\"      \"  everyone Goodbye  \" stri_c_mat(sorted, margin=2, sep = \" \") #> [1] \"   \"         \"  everyone\"  \"1st Goodbye\" \"2nd \"        \"3rd \"  # randomly shuffle sentences: x <- c(\"Hello, who are you? Oh, really?! Cool!\", \"I don't care. But I really don't.\") print(x) #> [1] \"Hello, who are you? Oh, really?! Cool!\" #> [2] \"I don't care. But I really don't.\" mat <- strcut_brk(x, \"sentence\") rank <- sample(1:length(mat)) |> matrix(ncol = ncol(mat)) sorted <- mat %row~% rank sorted[is.na(sorted)] <- \"\" stri_paste_mat(sorted, margin=1) # <- another alias for stri_join_mat #> [1] \"Hello, who are you? Cool!Oh, really?! \" #> [2] \"But I really don't.I don't care. \" stri_paste_mat(sorted, margin=2) #> [1] \"Hello, who are you? \"        \"Cool!But I really don't.\"    #> [3] \"Oh, really?! I don't care. \""},{"path":"https://tony-aw.github.io/tinycodet/articles/e_strings_inops.html","id":"string-subsetting-operators","dir":"Articles","previous_headings":"","what":"String subsetting operators","title":"String related infix operators","text":"x %sget% ss operator returns subset string character vector x. ss vector length 2, matrix nrow(ss)=length(x) 2 columns. object ss consist entirely non-negative integers (thus 0, 1, 2, etc. valid, -1, -2, -3 etc valid). first element/column ss gives number characters counting left side extracted x. second element/column ss gives number characters counting right side extracted x. 2 examples: Thus x %sget% ss “gets” extracts given number characters left right, removes rest. also x %strim% ss, opposite: trims away number characters left right defined matrix ss, leaving whatever left. 2 examples:  ","code":"x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(2,3) x %sget% ss #> [1] \"abklm\" \"noxyz\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(1,0) x %sget% ss #> [1] \"a\" \"n\" x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(2,3) x %strim% ss #> [1] \"cdefghij\" \"pqrstuvw\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(1,0) x %strim% ss #> [1] \"bcdefghijklm\" \"opqrstuvwxyz\""},{"path":"https://tony-aw.github.io/tinycodet/articles/e_strings_inops.html","id":"string-arithmetic","dir":"Articles","previous_headings":"","what":"String arithmetic","title":"String related infix operators","text":"tinycodet package includes 7 string arithmetic operators (3 re-exported ‘stringi’): x %s+% y concatenates x y (exported ‘stringi’); x %s-% p removes pattern p string character vector x; x %s*% n repeats string character vector x n times (exported ‘stringi’); x %s/% p counts often pattern p occurs string character vector x. x %s//% brk counts often text boundary specified list brk occurs string character vector x. e1 %s$% e2 provides access stri_sprintf. x %ss% p splits strings x delimiter character/pattern defined p, removes p process. .e.: right-side arguments p, y, n can single value, vector length x.  ","code":"\"Hello \"%s+% \" world\" #> [1] \"Hello  world\" c(\"Hello world\", \"Goodbye world\") %s-% \" world\" #> [1] \"Hello\"   \"Goodbye\" c(\"Ha\", \"Ho\", \"Hi\", \"Hu\", \"He\", \"Ha\") %s*% 2:7 #> [1] \"HaHa\"           \"HoHoHo\"         \"HiHiHiHi\"       \"HuHuHuHuHu\"     #> [5] \"HeHeHeHeHeHe\"   \"HaHaHaHaHaHaHa\" c(\"hello world & goodbye world\", \"world domination!\") %s/% \"world\" #> [1] 2 1 c(\"hello world & goodbye world\", \"world domination!\") %s//% list(type = \"word\") #> [1] 9 4"},{"path":"https://tony-aw.github.io/tinycodet/articles/e_strings_inops.html","id":"string-detection-operators","dir":"Articles","previous_headings":"","what":"String detection operators","title":"String related infix operators","text":"x %s{}% p operator checks every string character vector x pattern defined p present. x %s!{}% p operator checks every string character vector x pattern defined p present. Examples:  ","code":"x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %s{}% \"a\" #> [1]  TRUE FALSE x %s!{}% \"a\" #> [1] FALSE  TRUE which(x %s{}% \"a\") #> [1] 1 which(x %s!{}% \"a\") #> [1] 2 x[x %s{}% \"a\"] #> [1] \"abcdefghijklm\" x[x %s!{}% \"a\"] #> [1] \"nopqrstuvwxyz\""},{"path":"https://tony-aw.github.io/tinycodet/articles/e_strings_inops.html","id":"specifying-pattern-search-attributes-in-string-infix-operators","dir":"Articles","previous_headings":"","what":"Specifying Pattern search attributes in string infix operators","title":"String related infix operators","text":"x %s-% p x %s/% p operators, string detection operators (%s{}%, %s!{}%) perform pattern matching various purposes. character vector string given right hand side, interpreted case-sensitive regex patterns stringi. , course, sometimes one wants change . example, one may want case insensitive. perhaps one wants use fixed expressions, something else. Instead giving string character vector regex patterns, one can also supply list specify exactly pattern interpreted. list use exact naming convention stringi. example: list(regex=p, case_insensitive=FALSE, ...) list(fixed=p, ...) list(coll=p, ...) list(charclass=p, ...) convenience, ‘tinycodet’ adds following functions: s_regex(p, ...) equivalent list(regex = p, ...) s_fixed(p, ...) equivalent list(fixed = p, ...) s_coll(p, ...) equivalent list(coll = p, ...) s_chrcls(p, ...) equivalent list(charclass = p, ... ) Examples Regular expressions: Examples Fixed expressions: . ’m sure get idea.  ","code":"x <- c(\"Hello world\", \"Goodbye world\") p <- list(regex=\" world\") x %s-% p #> [1] \"Hello\"   \"Goodbye\"  x <- c(\"Ha\", \"Ho\", \"Hi\", \"Hu\", \"He\", \"Ha\") %s*% 10 p <- s_regex(\"Ha\") x %s/% p #> [1] 10  0  0  0  0 10  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- s_regex(c(\"A\", \"A\"), case_insensitive=TRUE) x %s{}% p #> [1]  TRUE FALSE x %s!{}% p #> [1] FALSE  TRUE x <- c(\"Hello world\", \"Goodbye world\") p <- list(fixed=\" world\") x %s-% p #> [1] \"Hello\"   \"Goodbye\"  x <- c(\"Ha\", \"Ho\", \"Hi\", \"Hu\", \"He\", \"Ha\") %s*% 10 p <- list(fixed=\"Ha\") x %s/% p #> [1] 10  0  0  0  0 10  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- list(fixed = c(\"A\", \"A\"), case_insensitive=TRUE) x %s{}% p #> [1]  TRUE FALSE x %s!{}% p #> [1] FALSE  TRUE"},{"path":"https://tony-aw.github.io/tinycodet/articles/f_DRY.html","id":"the-transform_if-function","dir":"Articles","previous_headings":"","what":"The transform_if function","title":"Don't Repeat Yourself","text":"“Don’t Repeat ”, sometimes abbreviated “DRY”, coding principle try reduce repeating patterns code (within reason). Consider following code: conditional subset object object transformed condition using function referring object . Consequently, reference object written 4 times! can become cumbersome quickly. Notice also code gives unnecessary warning, due ifelse() requiring entirety log(object). tinycodet package therefore adds transform_if(x, cond, yes, , ) function, “dry” . , argument cond function must given returns logical vector. every value cond(x)==TRUE, function yes(x) run, every value cond(x)==FALSE, function (x) run, every value cond(x)==NA, function run. function-based approach used instead directly supplying vectors, unnecessary warnings annoying errors avoided (unlike code). code can now re-written less warning/error prone compact manner : Instead supplying function cond, one can also directly supply logical vector argument cond. Moreover, transformed value atomic scalar, don’t really need function; can just fill scalar (vectors allowed though, lead unnecessary warnings even annoying errors occur ifelse()). one can thus also re-write original code (without warnings/errors compact) :  ","code":"object <- matrix(c(-9:8, NA, NA) , ncol=2) y <- 0 z <- 1000 ifelse(   is.na(object>y), -z,   ifelse(     object>y,  log(object), object^2   ) ) #> Warning in log(object): NaNs produced #>       [,1]          [,2] #>  [1,]   81     0.0000000 #>  [2,]   64     0.6931472 #>  [3,]   49     1.0986123 #>  [4,]   36     1.3862944 #>  [5,]   25     1.6094379 #>  [6,]   16     1.7917595 #>  [7,]    9     1.9459101 #>  [8,]    4     2.0794415 #>  [9,]    1 -1000.0000000 #> [10,]    0 -1000.0000000 object |> transform_if(\\(x)x>y, log, \\(x)x^2, \\(x) -z) #>       [,1]          [,2] #>  [1,]   81     0.0000000 #>  [2,]   64     0.6931472 #>  [3,]   49     1.0986123 #>  [4,]   36     1.3862944 #>  [5,]   25     1.6094379 #>  [6,]   16     1.7917595 #>  [7,]    9     1.9459101 #>  [8,]    4     2.0794415 #>  [9,]    1 -1000.0000000 #> [10,]    0 -1000.0000000 object |> transform_if(object > y, log, \\(x)x^2, -z) #>       [,1]          [,2] #>  [1,]   81     0.0000000 #>  [2,]   64     0.6931472 #>  [3,]   49     1.0986123 #>  [4,]   36     1.3862944 #>  [5,]   25     1.6094379 #>  [6,]   16     1.7917595 #>  [7,]    9     1.9459101 #>  [8,]    4     2.0794415 #>  [9,]    1 -1000.0000000 #> [10,]    0 -1000.0000000"},{"path":"https://tony-aw.github.io/tinycodet/articles/f_DRY.html","id":"subset-if-and-unreal-replacement","dir":"Articles","previous_headings":"","what":"Subset if and unreal replacement","title":"Don't Repeat Yourself","text":"tinycodet package adds 2 “subset_if” operators: x %[]% cond operator selects elements vector/matrix/array x, result cond(x) returns TRUE. x %[!]% cond operator selects elements vector/matrix/array x, result cond(x) returns FALSE. example:   Another operator added tinycodet x %unreal =% y, replaces NA, NaN, Inf -Inf x value given y. x %unreal =% y x[.na(x)|.nan(x)|.infinite(x)] <- y.  ","code":"object_with_very_long_name <- matrix(-10:9, ncol=2) print(object_with_very_long_name) #>       [,1] [,2] #>  [1,]  -10    0 #>  [2,]   -9    1 #>  [3,]   -8    2 #>  [4,]   -7    3 #>  [5,]   -6    4 #>  [6,]   -5    5 #>  [7,]   -4    6 #>  [8,]   -3    7 #>  [9,]   -2    8 #> [10,]   -1    9 object_with_very_long_name %[if]% \\(x)x %in% 1:10 #> [1] 1 2 3 4 5 6 7 8 9 object_with_very_long_name %[!if]% \\(x)x %in% 1:10 #>  [1] -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0"},{"path":"https://tony-aw.github.io/tinycodet/articles/f_DRY.html","id":"general-in-place-modifier","dir":"Articles","previous_headings":"","what":"General in-place modifier","title":"Don't Repeat Yourself","text":"R package includes general -place modifying infix operator. Consider following line code: expression, mtcars$mpg[mtcars$cyl>6], written twice, making code rather long cumbersome, even though ’re just squaring expression. R package solves laid-problem implementing general -place (mathematical) modifier, x %:=% f operator. tinycodet one can now make compact (“tiny”, ) follows:  ","code":"mtcars$mpg[mtcars$cyl>6] <- mtcars$mpg[mtcars$cyl>6]^2 mtcars$mpg[mtcars$cyl>6] %:=% \\(x)x^2"},{"path":"https://tony-aw.github.io/tinycodet/articles/g_misc.html","id":"source_selection","dir":"Articles","previous_headings":"","what":"source_selection","title":"Miscellaneous functionality","text":"source_selection() function base R’s source() function, except allows placing selected objects functions current environment, instead objects. objects selected can specified using combination following: supplying character vector exact object names select argument. supplying character vector regex patterns regex argument. supplying character vector fixed patterns fixed argument. regex fixed arguments especially handy sourcing S3 methods. example, expose following methods current environment, mymethod.numeric() mymethod.character() generic mymethod(), one specify regex = \"^mymethod\". Example:  ","code":"exprs <- expression({   helloworld = function()print(\"helloworld\")   goodbyeworld <- function() print(\"goodbye world\")   `%s+test%` <- function(x,y) stringi::`%s+%`(x,y)   `%s*test%` <- function(x,y) stringi::`%s*%`(x,y)   mymethod <- function(x) UseMethod(\"mymethod\", x)   mymethod.numeric <- function(x)x * 2   mymethod.character <- function(x)chartr(x, old = \"a-zA-Z\", new = \"A-Za-z\") })  temp.fun <- function(){   source_selection(list(exprs=exprs), regex= \"^mymethod\", fixed = c(\"%\", \":=\"))   ls() # list all objects residing within the function definition } temp.fun() #> Sourcing script ... #> Done #> [1] \"%s*test%\"           \"%s+test%\"           \"mymethod\"           #> [4] \"mymethod.character\" \"mymethod.numeric\"  temp.fun <- function(){   source_selection(list(exprs=exprs), select = c(\"helloworld\", \"goodbyeworld\"))   ls() # list all objects residing within the function definition } temp.fun() #> Sourcing script ...  #>  #> Done #> [1] \"goodbyeworld\" \"helloworld\""},{"path":"https://tony-aw.github.io/tinycodet/articles/g_misc.html","id":"matrix-re-ordering-operators","dir":"Articles","previous_headings":"","what":"Matrix re-ordering operators","title":"Miscellaneous functionality","text":"tinycodet R package adds 2 additional matrix operators: x %row~% mat operator re-orders elements every row, row ordered independently rows, matrix x, ordering ranks given matrix mat. x %col~% mat operator re-orders elements every column, column ordered independently columns, matrix x, ordering ranks given matrix mat. matrix x numeric matrix, one wants numerically sort elements every row column, x %row~% x x %col~% x suffice, respectively. matrix x numeric, sorting using x %row~% x x %col~% x still possible, probably best option. non-numeric case, providing matrix ordering ranks probably faster give accurate ordering. mat matrix non-repeating random integers (.e. sample(1:length(x), replace=FALSE)), x %row~% mat randomly shuffle elements every row, shuffling order row independent shuffling order rows. Similarly, x %col~% mat randomly shuffle elements every column, shuffling order column independent shuffling order columns. Re-ordering/sorting every row/column matrix operators generally faster loops apply-like functions.   Examples numeric matrix: Examples character matrix: row/column re-ordered independently columns, deceptive keep row- column-names, longer hold. Thus, consistency, operators strip attributes input matrix x.  ","code":"x <- matrix(sample(1:25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   20    1   12   21    5 #> [2,]   15    4    3   19    2 #> [3,]   14   13   22   10   24 #> [4,]   25    9   16   18   23 #> [5,]    7   17    6   11    8 x %row~% x # sort elements of every row #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    5   12   20   21 #> [2,]    2    3    4   15   19 #> [3,]   10   13   14   22   24 #> [4,]    9   16   18   23   25 #> [5,]    6    7    8   11   17 x %row~% -x # reverse-sort elements of every row #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   21   20   12    5    1 #> [2,]   19   15    4    3    2 #> [3,]   24   22   14   13   10 #> [4,]   25   23   18   16    9 #> [5,]   17   11    8    7    6 x %col~% x # sort elements of every column #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    7    1    3   10    2 #> [2,]   14    4    6   11    5 #> [3,]   15    9   12   18    8 #> [4,]   20   13   16   19   23 #> [5,]   25   17   22   21   24 x %col~% -x # reverse-sort elements of every column #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   25   17   22   21   24 #> [2,]   20   13   16   19   23 #> [3,]   15    9   12   18    8 #> [4,]   14    4    6   11    5 #> [5,]    7    1    3   10    2  x <- matrix(sample(1:25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   15   18   14   10    4 #> [2,]    9   23   19   22    2 #> [3,]    7   16   25   13    5 #> [4,]    3    6   24   17   20 #> [5,]    8   11   12   21    1 rand <- sample(1:length(x)) |> matrix(ncol=ncol(x)) # matrix of random integers x %row~% rand # random shuffle every row independent of other rows #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   10   14   15   18    4 #> [2,]    9    2   19   22   23 #> [3,]   16   25    5   13    7 #> [4,]   20    6   24   17    3 #> [5,]    8   11    1   12   21 x %col~% rand # random shuffle every column independent of other columns #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    9    6   14   10   20 #> [2,]    8   11   19   22    2 #> [3,]   15   18   24   17    5 #> [4,]    3   16   25   13    1 #> [5,]    7   23   12   21    4 x <- matrix(sample(letters, 25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"i\"  \"p\"  \"h\"  \"a\"  \"q\"  #> [2,] \"g\"  \"y\"  \"v\"  \"s\"  \"e\"  #> [3,] \"c\"  \"m\"  \"u\"  \"n\"  \"f\"  #> [4,] \"t\"  \"x\"  \"d\"  \"z\"  \"o\"  #> [5,] \"l\"  \"j\"  \"r\"  \"b\"  \"w\" mat <- stringi::stri_rank(as.vector(x)) |>   matrix(ncol=ncol(x)) # matrix of ordering ranks x %row~% mat # sort elements of every row #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"a\"  \"h\"  \"i\"  \"p\"  \"q\"  #> [2,] \"e\"  \"g\"  \"s\"  \"v\"  \"y\"  #> [3,] \"c\"  \"f\"  \"m\"  \"n\"  \"u\"  #> [4,] \"d\"  \"o\"  \"t\"  \"x\"  \"z\"  #> [5,] \"b\"  \"j\"  \"l\"  \"r\"  \"w\" x %row~% -mat # reverse-sort elements of every row #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"q\"  \"p\"  \"i\"  \"h\"  \"a\"  #> [2,] \"y\"  \"v\"  \"s\"  \"g\"  \"e\"  #> [3,] \"u\"  \"n\"  \"m\"  \"f\"  \"c\"  #> [4,] \"z\"  \"x\"  \"t\"  \"o\"  \"d\"  #> [5,] \"w\"  \"r\"  \"l\"  \"j\"  \"b\" x %col~% mat # sort elements of every column #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"c\"  \"j\"  \"d\"  \"a\"  \"e\"  #> [2,] \"g\"  \"m\"  \"h\"  \"b\"  \"f\"  #> [3,] \"i\"  \"p\"  \"r\"  \"n\"  \"o\"  #> [4,] \"l\"  \"x\"  \"u\"  \"s\"  \"q\"  #> [5,] \"t\"  \"y\"  \"v\"  \"z\"  \"w\" x %col~% -mat # reverse-sort elements of every column #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"t\"  \"y\"  \"v\"  \"z\"  \"w\"  #> [2,] \"l\"  \"x\"  \"u\"  \"s\"  \"q\"  #> [3,] \"i\"  \"p\"  \"r\"  \"n\"  \"o\"  #> [4,] \"g\"  \"m\"  \"h\"  \"b\"  \"f\"  #> [5,] \"c\"  \"j\"  \"d\"  \"a\"  \"e\"  x <- matrix(sample(letters, 25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"d\"  \"x\"  \"q\"  \"s\"  \"p\"  #> [2,] \"y\"  \"e\"  \"f\"  \"h\"  \"o\"  #> [3,] \"t\"  \"j\"  \"i\"  \"z\"  \"l\"  #> [4,] \"v\"  \"a\"  \"b\"  \"g\"  \"w\"  #> [5,] \"u\"  \"n\"  \"m\"  \"k\"  \"r\" rand <- sample(1:length(x)) |> matrix(ncol=ncol(x)) # matrix of random integers x %row~% rand # random shuffle every row independent of other rows #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"p\"  \"d\"  \"x\"  \"q\"  \"s\"  #> [2,] \"e\"  \"y\"  \"h\"  \"o\"  \"f\"  #> [3,] \"l\"  \"i\"  \"j\"  \"z\"  \"t\"  #> [4,] \"b\"  \"v\"  \"g\"  \"w\"  \"a\"  #> [5,] \"u\"  \"n\"  \"r\"  \"m\"  \"k\" x %col~% rand # random shuffle every column independent of other columns #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"v\"  \"e\"  \"b\"  \"g\"  \"p\"  #> [2,] \"u\"  \"n\"  \"i\"  \"h\"  \"w\"  #> [3,] \"d\"  \"a\"  \"m\"  \"s\"  \"r\"  #> [4,] \"y\"  \"j\"  \"q\"  \"z\"  \"l\"  #> [5,] \"t\"  \"x\"  \"f\"  \"k\"  \"o\""},{"path":"https://tony-aw.github.io/tinycodet/articles/g_misc.html","id":"additional-logic-operators","dir":"Articles","previous_headings":"","what":"Additional logic operators","title":"Miscellaneous functionality","text":"tinycodet package adds basic logic operators: %xor%: Exclusive %n&%: (.e. (!x) & (!y)). Note either x y NA, %n&% also give NA (unlike (!x) & (!y), give FALSE.) %?=%: checks x y unknown unreal (NA, NaN, Inf, -Inf) %%: opposite %% (.e. !x %% y) examples: Numbers can many different sub-types whilst still numeric. n %=numtype% numtype operator check every value numeric vector n can considered number belonging type numtype. following values numtype allowed: “~0”: zero, else number whose absolute value smaller Machine tolerance (sqrt(.Machine$double.eps)); “B”: binary numbers (0 1); “prop”: proportions; “”: Integers; “odd”: odd integers; “even”: even integers “R”: Real numbers; “unreal”: infinity, NA, NaN; string counterpart %=numtype% s %=strtype% strtype, checks every value character vector s can seen certain strtype. following values strtype allowed: “empty”: checks string consists empty spaces. “unreal”: checks string NA, literal string “NA”, “NaN” “Inf”, regardless leading trailing spaces. “numeric”: checks string can converted number, disregarding leading trailing spaces. .e. string “5.0” can converted actual number 5.0. “special”: checks string consists special characters. examples:  ","code":"x <- c(TRUE, FALSE, TRUE, FALSE, NA, NaN, Inf, -Inf, TRUE, FALSE) y <- c(FALSE, TRUE, TRUE, FALSE, rep(NA, 6)) outcome <- data.frame(   x=x, y=y,   \"x %xor% y\"=x %xor% y, \"x %n&% y\" = x %n&% y, \"x %?=% y\" = x %?=% y,   check.names = FALSE ) knitr::kable(outcome) 1:3 %out% 1:10 #> [1] FALSE FALSE FALSE 1:10 %out% 1:3 #>  [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE 1e-20 %=numtype% \"~0\" #> [1] TRUE n <- c(0:5, 0:-5, 0.1, -0.1, 0, 1, Inf, -Inf, NA, NaN) n[n %=numtype% \"B\"] #> [1] 0 1 0 0 1 n[n %=numtype% \"prop\"] #> [1] 0.0 1.0 0.0 0.1 0.0 1.0 n[n %=numtype% \"B\"] #> [1] 0 1 0 0 1 n[n %=numtype% \"I\"] #>  [1]  0  1  2  3  4  5  0 -1 -2 -3 -4 -5  0  1 n[n %=numtype% \"odd\"] #> [1]  1  3  5 -1 -3 -5  1 n[n %=numtype% \"even\"] #> [1]  0  2  4  0 -2 -4  0 n[n %=numtype% \"R\"] #>  [1]  0.0  1.0  2.0  3.0  4.0  5.0  0.0 -1.0 -2.0 -3.0 -4.0 -5.0  0.1 -0.1  0.0 #> [16]  1.0 n[n %=numtype% \"unreal\"] #> [1]  Inf -Inf   NA  NaN  s <- c(\" AbcZ123 \", \" abc \", \" 1.3 \", \" !#$%^&*() \", \"  \", \"  NA  \", \"  NaN  \", \" Inf \") s[s %=strtype% \"empty\"] #> [1] \"  \" s[s %=strtype% \"unreal\"] #> [1] \"  NA  \"  \"  NaN  \" \" Inf \" s[s %=strtype% \"numeric\"] #> [1] \" 1.3 \" \" Inf \" s[s %=strtype% \"special\"] #> [1] \" !#$%^&*() \""},{"path":"https://tony-aw.github.io/tinycodet/articles/h_otherpkgs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Relations to other packages","text":"article lays tinycodet R package relates R packages, compatibility R packages, etc.  ","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/articles/h_otherpkgs.html","id":"name-conflicts","dir":"Articles","previous_headings":"Compatibility with other R packages","what":"Name conflicts","title":"Relations to other packages","text":"made sure name operators tinycodet operators popular operator-related packages: magrittr zeallot. One may noticed functionality R packages inspired programming languages, particular Python (please, refrain taking torches pitchforks!). first R package take inspiration programming languages like Python. Therefore, one might find overlapping function operator names packages something similar; mindful .  ","code":""},{"path":"https://tony-aw.github.io/tinycodet/articles/h_otherpkgs.html","id":"other-import-systems","dir":"Articles","previous_headings":"Compatibility with other R packages","what":"Other import systems","title":"Relations to other packages","text":"import R package provides somewhat similar capabilities tinycodet import management system, still quite different. tinycodet’ import system focuses loading main package + re-exports + (reverse) dependencies alias, exposing infix operators package current environment. import package really provide functionality directly (far know). Strictly speaking incompatibility tinycodet import. can safely use implementations import system, wish.   also box package. import primarily package import, box primarily sourcing user-defined scripts modules, though can also import packages. Like import, support loading multiple packages (modules) alias. compatible tinycodet’ package import system; one can use box handling user-defined scripts, tinycodet handling packages.  ","code":""},{"path":"https://tony-aw.github.io/tinycodet/articles/h_otherpkgs.html","id":"renv","dir":"Articles","previous_headings":"Compatibility with other R packages","what":"Renv","title":"Relations to other packages","text":"using renv R package, note registers packages loads using plain library() require() calls. Anything different , even things like (... ...)library(...) (...)library(...), default understood renv. Therefore, using renv, please make sure set following: make sure packages installed project library, regardless loaded, registered renv. makes renv compatible calls like import_as tinycodet, things like (... ...)library(...) (...)library(...).  ","code":"renv::settings$snapshot.type(\"all\")"},{"path":"https://tony-aw.github.io/tinycodet/articles/h_otherpkgs.html","id":"recommended-r-packages","dir":"Articles","previous_headings":"","what":"Recommended R packages","title":"Relations to other packages","text":"stringi course required packages. Besides , highly recommend fastverse set R packages (https://github.com/fastverse/fastverse), set R packages (mostly) data wrangling, focused high speed, better memory management, minimal dependencies. quick ’n easy back-tracing errors, recommend rlang R package.  ","code":""},{"path":"https://tony-aw.github.io/tinycodet/articles/i_benchmarks.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Benchmarks","text":"Although functions R package written R, functions - especially string related ones - somewhat aggressively optimized. string related functions, example, order magnitude terms speed stringi functions call. speed comparisons given, using ‘bench’ package.  ","code":""},{"path":"https://tony-aw.github.io/tinycodet/articles/i_benchmarks.html","id":"stri_locate_ith","dir":"Articles","previous_headings":"","what":"stri_locate_ith","title":"Benchmarks","text":" ","code":"n <- 1e5 x <- rep(paste0(1:50, collapse = \"\"), n) p <- \"\\\\d\" i <- sample(c(-50:-1, 1:50), replace=TRUE, size = n) locate_stringi <- function(...) {   stringi::stri_locate_all(...)   stringi::stri_count(...) } bm.stri_locate_ith <- bench::mark(   \"stri_locate_ith\" = { stri_locate_ith_regex(x, p, i) },   \"stringi::(stri_locate_all + stri_count)\" = { locate_stringi(str=x, regex = p) },   min_iterations = 500,   check = FALSE,   filter_gc = FALSE ) ggplot2::autoplot(bm.stri_locate_ith) #> Loading required namespace: tidyr"},{"path":"https://tony-aw.github.io/tinycodet/articles/i_benchmarks.html","id":"strcut","dir":"Articles","previous_headings":"","what":"strcut","title":"Benchmarks","text":" ","code":"n <- 1e5 x <- rep(\"hello\", n) i <- sample(1:3, n, replace = TRUE) loc <- stri_locate_ith(x, i=i, regex=\"a|e|i|o|u\") bm.strcut <- bench::mark(   \"strcut_loc\" = { strcut_loc(x, loc) },   \"strcut_brk\" = { strcut_brk(x, type = \"\", tolist = TRUE) },   \"stringi::stri_split_boundaries\" = {     stringi::stri_split_boundaries(x, type=\"character\")   },   min_iterations = 500,   check = FALSE,   filter_gc = FALSE ) ggplot2::autoplot(bm.strcut)"},{"path":"https://tony-aw.github.io/tinycodet/articles/i_benchmarks.html","id":"rowcolumn-wise-re-ordering","dir":"Articles","previous_headings":"","what":"Row/column-wise re-ordering","title":"Benchmarks","text":"","code":"mat <- matrix(1:(1e3)^2, ncol = 1e3) bm.matorder <- bench::mark(   tinycodet = {mat %row~% mat; mat %col~% mat},   Rfast = {Rfast::rowSort(mat); Rfast::colSort(mat)},   min_iterations = 1000 ) ggplot2::autoplot(bm.matorder)"},{"path":"https://tony-aw.github.io/tinycodet/articles/tinycodet.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"","text":"tinycodet R-package adds functions help coding etiquette. primarily focuses 4 aspects: Safer decimal ()equality testing, safer atomic conversions, functions safer coding. new package import system, attempts combine benefits using package without attaching, benefits attaching package. Extending string manipulation capabilities stringi R package. Reducing repetitive code. tinycodet R-package one dependency, namely stringi. functions R-package fully vectorized optimized, well documented. ’ll give quick glimpse possible R package.  ","code":""},{"path":"https://tony-aw.github.io/tinycodet/articles/tinycodet.html","id":"safer-functionality","dir":"Articles","previous_headings":"","what":"Safer functionality","title":"","text":"base R, (0.1*3) == 0.3 gives FALSE, due way decimal numbers stored programming languages like R Python. tinycodet adds safer truth testing operators, give correct results. atomic type casting functions (.e. .character(), .logical(), etc.) strip away attributes. tinycodet adds safer type casting functions strip away attributes. One can re-assign values T F. One can even run T <- FALSE F <- TRUE!. tinycodet adds lock_TF() function forces T stay TRUE F stay FALSE. One example %d==% operator:  ","code":"x <- c(0.3, 0.6, 0.7) y <- c(0.1*3, 0.1*6, 0.1*7) print(x); print(y) #> [1] 0.3 0.6 0.7 #> [1] 0.3 0.6 0.7  x == y # gives FALSE, but should be TRUE #> [1] FALSE FALSE FALSE  x %d==% y # here it's done correctly #> [1] TRUE TRUE TRUE"},{"path":"https://tony-aw.github.io/tinycodet/articles/tinycodet.html","id":"new-import-system","dir":"Articles","previous_headings":"","what":"New import system","title":"","text":"One can use package without attaching package (example using ::), one can attach package (example using library() require()). advantages disadvantages using without attaching package versus attaching package - least relevant now - can compactly presented following table: tinycodet attempts import system, somewhat find best worlds. introducing following functions: import_as(): Import main package, optionally re-exports + dependencies + extensions, single alias. essentially combines attaching advantage using multiple related packages (row 7 table ), whilst keeping advantages using without attaching package. import_inops(): Expose infix operators package alias object current environment. gains attaching advantage less typing (row 6 table ), whilst simultaneously avoiding disadvantage attaching functions package globally (row 4). import_data(): Directly return data set package, allow straight-forward assignment. example using tinycodet's new import system; note following code run without attaching single R package (besides tinycodet course):  ","code":"# importing \"tidytable\" + \"data.table\" under alias \"tdt.\": import_as(    ~ tdt., \"tidytable\", dependencies = \"data.table\" ) #> Importing packages and registering methods... #> Done #> You can now access the functions using `tdt.$` #> For conflicts report, packages order, and other attributes, run `attr.import(tdt.)`  # exposing operators from `magrrittr` to current environment: import_inops(\"magrittr\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done  # directly assigning the \"starwars\" dataset to object \"d\": d <- import_data(\"dplyr\", \"starwars\")   # see it in action: d %>% tdt.$filter(species == \"Droid\") %>%   tdt.$select(name, tdt.$ends_with(\"color\")) #> # A tidytable: 6 × 4 #>   name   hair_color skin_color  eye_color #>   <chr>  <chr>      <chr>       <chr>     #> 1 C-3PO  NA         gold        yellow    #> 2 R2-D2  NA         white, blue red       #> 3 R5-D4  NA         white, red  red       #> 4 IG-88  none       metal       red       #> 5 R4-P17 none       silver, red red, blue #> 6 BB8    none       none        black"},{"path":"https://tony-aw.github.io/tinycodet/articles/tinycodet.html","id":"extending-the-string-manipulation-capabilities-of-stringi","dir":"Articles","previous_headings":"","what":"Extending the string manipulation capabilities of stringi","title":"","text":" ","code":"# character vector: x <- c(\"3rd 1st 2nd\", \"5th 4th 6th\") print(x) #> [1] \"3rd 1st 2nd\" \"5th 4th 6th\"  # detect if there are digits: x %s{}% \"\\\\d\" #> [1] TRUE TRUE  # find second last digit: loc <- stri_locate_ith(x, i = -2, regex = \"\\\\d\") stringi::stri_sub(x, from = loc) #> [1] \"1\" \"4\"  # cut x into matrix of individual words: mat <- strcut_brk(x, \"word\")  # sort rows of matrix using the fast %row~% operator: rank <- stringi::stri_rank(as.vector(mat)) |> matrix(ncol = ncol(mat)) sorted <- mat %row~% rank sorted[is.na(sorted)] <- \"\"  # join elements of every row into a single character vector: stri_c_mat(sorted, margin = 1, sep = \" \") #> [1] \"    1st 2nd 3rd\" \"    4th 5th 6th\""},{"path":"https://tony-aw.github.io/tinycodet/articles/tinycodet.html","id":"reduce-repetitive-code","dir":"Articles","previous_headings":"","what":"Reduce repetitive code","title":"","text":" ","code":"# in base R: ifelse( # repetitive, and gives unnecessary warning   is.na(object>0), -Inf,   ifelse(     object>0,  log(object), object^2   ) ) mtcars$mpg[mtcars$cyl>6] <- (mtcars$mpg[mtcars$cyl>6])^2 # long  # with tinycodet: object |> transform_if(\\(x)x>0, log, \\(x)x^2, \\(x) -Inf) # compact & no warning mtcars$mpg[mtcars$cyl>6] %:=% \\(x)x^2 # short"},{"path":"https://tony-aw.github.io/tinycodet/articles/tinycodet.html","id":"the-articles","dir":"Articles","previous_headings":"","what":"The Articles","title":"","text":"’re still interested, invite read articles website (https://tony-aw.github.io/tinycodet/), perhaps try package . following articles currently present: Safer functionality: Describes safer decimal ()equality testing operators, safer atomic conversion functions, functions safer coding. Import system - main functions: Description main functions package import system introduced tinycodet. Import system - additional details: Additional important details tinycodet import system. String related functions: Describes tinycodet functions extend string manipulation capabilities stringi. String related infix operators: Describes tinycodet infix operators extend string manipulation capabilities stringi. Don’t Repeat : Describes tinycodet functions help reduce repetitions code. Miscellaneous functionality: Various functions operators tinycodet introduces. Relations R packages: Describes tinycodet relates R packages, mostly regarding compatibility. complete list functions introduced tinycodet, please see References page.  ","code":""},{"path":"https://tony-aw.github.io/tinycodet/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tony Wilkes. Author, maintainer, copyright holder.","code":""},{"path":"https://tony-aw.github.io/tinycodet/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wilkes T (2024). tinycodet: Functions Help Coding Etiquette. R package version 0.3.9, https://tony-aw.github.io/tinycodet/, https://github.com/tony-aw/tinycodet/.","code":"@Manual{,   title = {tinycodet: Functions to Help in your Coding Etiquette},   author = {Tony Wilkes},   year = {2024},   note = {R package version 0.3.9, https://tony-aw.github.io/tinycodet/},   url = {https://github.com/tony-aw/tinycodet/}, }"},{"path":"https://tony-aw.github.io/tinycodet/index.html","id":"tinycodet-","dir":"","previous_headings":"","what":"Functions to Help in your Coding Etiquette","title":"Functions to Help in your Coding Etiquette","text":" ","code":""},{"path":"https://tony-aw.github.io/tinycodet/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Functions to Help in your Coding Etiquette","text":"‘tinycodet’ adds functions help coding etiquette. primarily focuses 4 aspects: Safer decimal ()equality testing, safer atomic conversions, functions safer coding. new package import system, attempts combine benefits using package without attaching, benefits attaching package. Extending string manipulation capabilities ‘stringi’ R package. Reducing repetitive code. ‘tinycodet’ adheres tinyverse philosophy (confused tidyverse). two dependencies: ‘stringi’ ‘collapse’. dependencies, thus avoiding “dependency hell”. functions R-package vectorized optimised. Although relatively small R package, understand may want go articles help files ‘tinycodet’ without knowing R package even worth time. Therefore, get quick glimpse ‘tinycodet’ provides, humbly invite take look Get Started page website (https://tony-aw.github.io/tinycodet/).  ","code":""},{"path":"https://tony-aw.github.io/tinycodet/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions to Help in your Coding Etiquette","text":"One can install ‘tinycodet’ CRAN like : get development version GitHub like : attach package - thus exposing functions namespace - using: one can open introduction help page ‘tinycodet’ package using following:  ","code":"install.packages(\"tinycodet\") remotes::install_github(\"https://github.com/tony-aw/tinycodet\") library(tinycodet) ?tinycodet::tinycodet ?tinycodet::`tinycodet-package` ?tinycodet::tinycodet_help"},{"path":"https://tony-aw.github.io/tinycodet/index.html","id":"reporting-issues-and-giving-suggestions","dir":"","previous_headings":"","what":"Reporting issues and giving suggestions","title":"Functions to Help in your Coding Etiquette","text":"coming across issue ‘tinycodet’ R package, please report “Issues” tab GitHub page (https://github.com/tony-aw/tinycodet/issues). relevant, please provide reproducible R code, make easier diagnose issue. Please keep issue reports polite, professional, point.   questions ideas, please submit “Discussion” tab GitHub page (https://github.com/tony-aw/tinycodet/discussions).  ","code":""},{"path":"https://tony-aw.github.io/tinycodet/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Tony Wilkes Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/aaa0_tinycodet_help.html","id":null,"dir":"Reference","previous_headings":"","what":"tinycodet: Functions to Help in your Coding Etiquette — aaa0_tinycodet_help","title":"tinycodet: Functions to Help in your Coding Etiquette — aaa0_tinycodet_help","text":"Welcome 'tinycodet' introduction help page!  'tinycodet' adds functions help coding etiquette.  primarily focuses 4 aspects:  (1) Safer decimal ()equality testing, safer atomic conversions, functions safer coding;  see tinycodet_safer.  (2) new package import system, attempts combine benefits using package without attaching , benefits attaching package;  see tinycodet_import  (3) Extending string manipulation capabilities 'stringi' R-package;  see tinycodet_strings.  (4) Reducing repetitive code;  see tinycodet_dry.  miscellaneous functionality; see tinycodet_misc.  Please check Change-log (see links ) regularly updates (bug fixes).  'tinycodet' adheres tinyverse philosophy. 'tinycodet' two dependencies: 'stingi' 'collapse'. dependencies, thus avoiding \"dependency hell\". functions R-package vectorized optimised.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/aaa0_tinycodet_help.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"tinycodet: Functions to Help in your Coding Etiquette — aaa0_tinycodet_help","text":"badges shown documentation R-package made using services : https://shields.io/","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/aaa0_tinycodet_help.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tinycodet: Functions to Help in your Coding Etiquette — aaa0_tinycodet_help","text":"Maintainer: Tony Wilkes tony_a_wilkes@outlook.com (ORCID)","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/aaa1_tinycodet_safer.html","id":null,"dir":"Reference","previous_headings":"","what":"Overview of the 'tinycodet' ","title":"Overview of the 'tinycodet' ","text":"help make code safer, 'tinycodet' R-package introduces functions: Safer decimal ()equality testing. Atomic type casting without stripping attributes. lock_TF function set lock T F TRUE FALSE. %<-c% operator assign locked constants.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/aaa1_tinycodet_safer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overview of the 'tinycodet' ","text":"","code":"x <- c(0.3, 0.6, 0.7) y <- c(0.1*3, 0.1*6, 0.1*7) x == y # gives FALSE, but should be TRUE #> [1] FALSE FALSE FALSE x %d==% y # here it's done correctly #> [1] TRUE TRUE TRUE"},{"path":"https://tony-aw.github.io/tinycodet/reference/aaa2_tinycodet_import.html","id":null,"dir":"Reference","previous_headings":"","what":"Overview of the 'tinycodet' Import System — aaa2_tinycodet_import","title":"Overview of the 'tinycodet' Import System — aaa2_tinycodet_import","text":"'tinycodet' R-package introduces new package import system.  One can use package without attaching package - example using :: operator.  , one can explicitly attach package - example using library function.  advantages disadvantages using without attaching package versus attaching package, least relevant , compactly presented following list:  (1) Prevent masking functions packages:    (2) Prevent masking core R functions:    (3) Clarify function came package:    (4) Enable functions current/local environment instead globally:    (5) Prevent namespace pollution:    (6) Minimise typing - especially infix operators  (.e. typing package::`%op%`(x, y) instead x %op% y cumbersome):    (7) Use multiple related packages, without constantly switching package prefixes  (.e. packagename1::some_function1(); packagename2::some_function2(); packagename3::some_function3() chaotic cumbersome): 'tinycodet' attempts import system, somewhat find best worlds. introducing following functions: import_as: Import main package, optionally re-exports + direct dependencies + direct extensions, single alias. essentially combines attaching advantage using multiple related packages (item 7 list), whilst keeping advantages using without attaching package. import_inops: Expose infix operators package alias object current environment. gains attaching advantage less typing (item 6 list), whilst simultaneously avoiding disadvantage attaching functions package globally (item 4 list). import_data: Directly return data set package, allow straight-forward assignment. Furthermore, two miscellaneous import_ - functions: import_LL import_int.  import system also includes general helper functions: x.import functions: helper functions specifically 'tinycodet' import system. pversion_ functions: check mismatch loaded package version package version library path. pkgs - functions: general helper functions regarding packages. See examples section get idea 'tinycodet' import system works practice. examples can found website (https://tony-aw.github.io/tinycodet/)","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/aaa2_tinycodet_import.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Overview of the 'tinycodet' Import System — aaa2_tinycodet_import","text":"Use Use 'tinycodet' Import System  'tinycodet' import system helpful particularly packages least one following properties: namespace package(s) conflicts packages. namespace package(s) conflicts core R, recommended R packages. package(s) function names generic enough, obvious function came package. See examples .  necessity using 'tinycodet' import system every single package. One can safely attach 'stringi' package, example, 'stringi' uses unique immediately recognisable naming scheme (virtually 'stringi' functions start \"stri_\"), naming scheme conflict core R, packages.  course, one wishes use package (like 'stringi') within specific environment, like inside function, becomes advantageous still import package using 'tinycodet' import system. case import_LL function applicable. Additional Comments 'tinycodet' Import System (S3) Methods automatically registered. Pronouns, .data .env pronouns 'rlang' package, work without prefixes required. functions imported import_as, import_inops, import_LL functions \"package\" attribute, always know function came package.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/aaa2_tinycodet_import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overview of the 'tinycodet' Import System — aaa2_tinycodet_import","text":"","code":"all(c(\"dplyr\", \"powerjoin\", \"magrittr\") %installed in% .libPaths()) #> [1] TRUE   # \\donttest{  # NO packages are being attached in any of the following code  # import 'dplyr' + its re-exports + extension 'powerjoin', under alias \"dpr.\": import_as(   ~ dpr., \"dplyr\", re_exports = TRUE, extensions = \"powerjoin\" ) #> Importing packages and registering methods... #> Done #> You can now access the functions using `dpr.$` #> For conflicts report, packages order, and other attributes, run `attr.import(dpr.)`   # exposing infix operators from 'magrrittr' to current environment: import_inops(\"magrittr\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done  # directly assigning dplyr's \"starwars\" dataset to object \"d\": d <- import_data(\"dplyr\", \"starwars\")  # See it in Action: d %>% dpr.$filter(species == \"Droid\") %>%   dpr.$select(name, dpr.$ends_with(\"color\")) #> # A tibble: 6 × 4 #>   name   hair_color skin_color  eye_color #>   <chr>  <chr>      <chr>       <chr>     #> 1 C-3PO  NA         gold        yellow    #> 2 R2-D2  NA         white, blue red       #> 3 R5-D4  NA         white, red  red       #> 4 IG-88  none       metal       red       #> 5 R4-P17 none       silver, red red, blue #> 6 BB8    none       none        black      male_penguins <- dpr.$tribble(   ~name,    ~species,     ~island, ~flipper_length_mm, ~body_mass_g,   \"Giordan\",    \"Gentoo\",    \"Biscoe\",               222L,        5250L,   \"Lynden\",    \"Adelie\", \"Torgersen\",               190L,        3900L,   \"Reiner\",    \"Adelie\",     \"Dream\",               185L,        3650L )  female_penguins <- dpr.$tribble(   ~name,    ~species,  ~island, ~flipper_length_mm, ~body_mass_g,   \"Alonda\",    \"Gentoo\", \"Biscoe\",               211,        4500L,   \"Ola\",    \"Adelie\",  \"Dream\",               190,        3600L,   \"Mishayla\",    \"Gentoo\", \"Biscoe\",               215,        4750L, ) dpr.$check_specs() #> # powerjoin check specifications #> ℹ implicit_keys #> → column_conflict #> → duplicate_keys_left #> → duplicate_keys_right #> → unmatched_keys_left #> → unmatched_keys_right #> → missing_key_combination_left #> → missing_key_combination_right #> → inconsistent_factor_levels #> → inconsistent_type #> → grouped_input #> → na_keys  dpr.$power_inner_join(   male_penguins[c(\"species\", \"island\")],   female_penguins[c(\"species\", \"island\")] ) #> Joining, by = c(\"species\", \"island\") #> # A tibble: 3 × 2 #>   species island #>   <chr>   <chr>  #> 1 Gentoo  Biscoe #> 2 Gentoo  Biscoe #> 3 Adelie  Dream   mypaste <- function(x, y) {   import_LL(\"stringi\", selection = \"stri_c\")   stringi::stri_c(x, y) } mypaste(\"hello \", \"world\") #> exposing and locking functions to current environment ... #> Done #> [1] \"hello world\"  # }"},{"path":"https://tony-aw.github.io/tinycodet/reference/aaa3_tinycodet_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Overview of the 'tinycodet' Extension of 'stringi' — aaa3_tinycodet_strings","title":"Overview of the 'tinycodet' Extension of 'stringi' — aaa3_tinycodet_strings","text":"Virtually every programming language, even primarily focused mathematics, point deal strings. R's atomic classes boil form either numbers characters. R's numerical functions generally fast. R's native string functions somewhat slow, unified naming scheme, comprehensive R's impressive numerical functions. primary R-package fixes 'stringi'.  'stringi' fastest comprehensive string manipulation package available time writing. Many string related packages fully depend 'stringi' ('stringr', example, just wrapper around 'stringi').  string manipulation important programming languages, 'tinycodet' adds little bit new functionality 'stringi': Find  \\(^{th}\\) pattern occurrence (stri_locate_ith), \\(^{th}\\) text boundary (stri_locate_ith_boundaries). Concatenate character matrix row- column-wise . Cut strings strcut_-functions. Infix operators string arithmetic. Infix operators string sub-setting, get remove first /last n characters strings. Infix operators detecting patterns.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/aaa3_tinycodet_strings.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Overview of the 'tinycodet' Extension of 'stringi' — aaa3_tinycodet_strings","text":"Gagolewski M., stringi: Fast portable character string processing R, Journal Statistical Software 103(2), 2022, 1–59, doi:10.18637/jss.v103.i02","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/aaa3_tinycodet_strings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overview of the 'tinycodet' Extension of 'stringi' — aaa3_tinycodet_strings","text":"","code":"# character vector: x <- c(\"3rd 1st 2nd\", \"5th 4th 6th\") print(x) #> [1] \"3rd 1st 2nd\" \"5th 4th 6th\"  # detect if there are digits: x %s{}% \"\\\\d\" #> [1] TRUE TRUE  # find second last digit: loc <- stri_locate_ith(x, i = -2, regex = \"\\\\d\") stringi::stri_sub(x, from = loc) #> [1] \"1\" \"4\"  # cut x into matrix of individual words: mat <- strcut_brk(x, \"word\")  # sort rows of matrix using the fast %row~% operator: rank <- stringi::stri_rank(as.vector(mat)) |> matrix(ncol = ncol(mat)) sorted <- mat %row~% rank sorted[is.na(sorted)] <- \"\"  # join elements of every row into a single character vector: stri_c_mat(sorted, margin = 1, sep = \" \") #> [1] \"    1st 2nd 3rd\" \"    4th 5th 6th\""},{"path":"https://tony-aw.github.io/tinycodet/reference/aaa4_tinycodet_dry.html","id":null,"dir":"Reference","previous_headings":"","what":"Overview of the 'tinycodet' ","title":"Overview of the 'tinycodet' ","text":"\"Repeat \", sometimes abbreviated \"DRY\", coding principle write unnecessarily repetitive code. help effort, 'tinycodet' R-package introduces functions: transform_if function subset_if operators -place unreal modifier operator. general -place (mathematical) modification operator.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/aaa4_tinycodet_dry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overview of the 'tinycodet' ","text":"","code":"object <- matrix(c(-9:8, NA, NA) , ncol=2)  # in base R: ifelse( # repetitive, and gives unnecessary warning   is.na(object>0), -Inf,   ifelse(     object>0,  log(object), object^2   ) ) #> Warning: NaNs produced #>       [,1]      [,2] #>  [1,]   81 0.0000000 #>  [2,]   64 0.6931472 #>  [3,]   49 1.0986123 #>  [4,]   36 1.3862944 #>  [5,]   25 1.6094379 #>  [6,]   16 1.7917595 #>  [7,]    9 1.9459101 #>  [8,]    4 2.0794415 #>  [9,]    1      -Inf #> [10,]    0      -Inf mtcars$mpg[mtcars$cyl>6] <- (mtcars$mpg[mtcars$cyl>6])^2 # long  # with tinycodet: object |> transform_if(\\(x)x>0, log, \\(x)x^2, \\(x) -Inf) # compact & no warning #>       [,1]      [,2] #>  [1,]   81 0.0000000 #>  [2,]   64 0.6931472 #>  [3,]   49 1.0986123 #>  [4,]   36 1.3862944 #>  [5,]   25 1.6094379 #>  [6,]   16 1.7917595 #>  [7,]    9 1.9459101 #>  [8,]    4 2.0794415 #>  [9,]    1      -Inf #> [10,]    0      -Inf mtcars$mpg[mtcars$cyl>6] %:=% \\(x)x^2 # short"},{"path":"https://tony-aw.github.io/tinycodet/reference/aaa5_tinycodet_misc.html","id":null,"dir":"Reference","previous_headings":"","what":"Overview of the 'tinycodet' Miscellaneous Functionality — aaa5_tinycodet_misc","title":"Overview of the 'tinycodet' Miscellaneous Functionality — aaa5_tinycodet_misc","text":"additional functions provided 'tinycodet' R-package: Infix logical operators exclusive-, -, -, number-type, string-type. Infix operators row- column-wise re-ordering matrices. Report infix operators present current environment, specified environment. source_selection source selected objects.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/atomic_conversions.html","id":null,"dir":"Reference","previous_headings":"","what":"Atomic Type Casting Without Stripping Attributes — atomic_conversions","title":"Atomic Type Casting Without Stripping Attributes — atomic_conversions","text":"Atomic type casting R generally performed using functions .logical, .integer, .double, .character.  Converting object atomic types using functions strips object attributes, including attributes names dimensions.  functions provided 'tinycodet' package preserve attributes - except \"class\" attribute.  functions follows: as_bool(): converts object atomic type logical (TRUE, FALSE, NA). as_int(): converts object atomic type integer. as_dbl(): converts object atomic type double (AKA decimal numbers). as_chr(): converts object atomic type character. Moreover, function is_wholenumber() added, safely test whole numbers.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/atomic_conversions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atomic Type Casting Without Stripping Attributes — atomic_conversions","text":"","code":"as_bool(x, ...)  as_int(x, ...)  as_dbl(x, ...)  as_chr(x, ...)  is_wholenumber(x, tol = sqrt(.Machine$double.eps))"},{"path":"https://tony-aw.github.io/tinycodet/reference/atomic_conversions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atomic Type Casting Without Stripping Attributes — atomic_conversions","text":"x vector, matrix, array (similar object elements share type). ... arguments passed methods. tol numeric, giving tolerance.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/atomic_conversions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atomic Type Casting Without Stripping Attributes — atomic_conversions","text":"converted object.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/atomic_conversions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atomic Type Casting Without Stripping Attributes — atomic_conversions","text":"","code":"x <- c(rep(0, 2), seq(0, 2.5, by=0.5)) |> matrix(ncol=2) colnames(x) <- c(\"one\", \"two\") attr(x, \"test\") <- \"test\" print(x) #>      one two #> [1,] 0.0 1.0 #> [2,] 0.0 1.5 #> [3,] 0.0 2.0 #> [4,] 0.5 2.5 #> attr(,\"test\") #> [1] \"test\"  # notice that in all following, attributes (except class) are conserved: as_bool(x) #>        one  two #> [1,] FALSE TRUE #> [2,] FALSE TRUE #> [3,] FALSE TRUE #> [4,]  TRUE TRUE #> attr(,\"test\") #> [1] \"test\" as_int(x) #>      one two #> [1,]   0   1 #> [2,]   0   1 #> [3,]   0   2 #> [4,]   0   2 #> attr(,\"test\") #> [1] \"test\" as_dbl(x) #>      one two #> [1,] 0.0 1.0 #> [2,] 0.0 1.5 #> [3,] 0.0 2.0 #> [4,] 0.5 2.5 #> attr(,\"test\") #> [1] \"test\" as_chr(x) #>      one   two   #> [1,] \"0\"   \"1\"   #> [2,] \"0\"   \"1.5\" #> [3,] \"0\"   \"2\"   #> [4,] \"0.5\" \"2.5\" #> attr(,\"test\") #> [1] \"test\"  # is_wholenumber: is_wholenumber(1:10 + c(0, 0.1)) #>  [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE"},{"path":"https://tony-aw.github.io/tinycodet/reference/decimal_truth.html","id":null,"dir":"Reference","previous_headings":"","what":"Safer Decimal Number (In)Equality Testing Operators — decimal_truth","title":"Safer Decimal Number (In)Equality Testing Operators — decimal_truth","text":"%d==%, %d!=% %d<%, %d>%, %d<=%, %d>=% ()equality operators perform decimal (class \"double\") number truth testing.  virtually equivalent regular ()equality operators, ==, !=, <, >, <=, >=,  except two aspects: decimal number ()equality operators assume absolute difference two numbers x y smaller Machine tolerance, sqrt(.Machine$double.eps), x y consider equal.  example: 0.1*7 == 0.7 returns FALSE, even though equal, due way decimal numbers stored programming languages like 'R'  'Python'.  0.1*7 %d==% 0.7 returns TRUE. numeric input allowed, characters coerced numbers.  .e. 1 < \"\" gives TRUE, whereas 1 %d<% \"\" gives error.  character equality testing, see %s==% 'stringi' package. Thus operators provide safer decimal number ()equality tests.  also x %d{}% bnd x %d!{}% bnd operators, bnd vector length 2, 2-column matrix (nrow(bnd)==length(x) nrow(bnd)==1).  x %d{}% bnd operator checks x within closed interval bounds defined bnd.  x %d!{}% bnd operator checks x outside closed interval bounds defined bnd.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/decimal_truth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safer Decimal Number (In)Equality Testing Operators — decimal_truth","text":"","code":"x %d==% y  x %d!=% y  x %d<% y  x %d>% y  x %d<=% y  x %d>=% y  x %d{}% bnd  x %d!{}% bnd"},{"path":"https://tony-aw.github.io/tinycodet/reference/decimal_truth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safer Decimal Number (In)Equality Testing Operators — decimal_truth","text":"x, y numeric vectors, matrices, arrays. bnd either vector length 2, matrix 2 columns 1 row, else matrix 2 columns nrow(bnd)==length(x).  first element/column bnd gives lower bound closed interval;  second element/column bnd gives upper bound closed interval.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/decimal_truth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safer Decimal Number (In)Equality Testing Operators — decimal_truth","text":"logical vector dimensions x, indicating result element element comparison.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/decimal_truth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safer Decimal Number (In)Equality Testing Operators — decimal_truth","text":"","code":"x <- c(0.3, 0.6, 0.7) y <- c(0.1*3, 0.1*6, 0.1*7) print(x); print(y) #> [1] 0.3 0.6 0.7 #> [1] 0.3 0.6 0.7 x == y # gives FALSE, but should be TRUE #> [1] FALSE FALSE FALSE x!= y # gives TRUE, should be FALSE #> [1] TRUE TRUE TRUE x > y # not wrong #> [1] FALSE FALSE FALSE x < y # gives TRUE, should be FALSE #> [1] TRUE TRUE TRUE x %d==% y # here it's done correctly #> [1] TRUE TRUE TRUE x %d!=% y # correct #> [1] FALSE FALSE FALSE x %d<% y # correct #> [1] FALSE FALSE FALSE x %d>% y # correct #> [1] FALSE FALSE FALSE x %d<=% y # correct #> [1] TRUE TRUE TRUE x %d>=% y # correct #> [1] TRUE TRUE TRUE  x <- c(0.3, 0.6, 0.7) bnd <- cbind(x-0.1, x+0.1) x %d{}% bnd #> [1] TRUE TRUE TRUE x %d!{}% bnd #> [1] FALSE FALSE FALSE  # These operators work for integers also: x <- 1L:5L y <- 1L:5L x %d==% y #> [1] TRUE TRUE TRUE TRUE TRUE x %d!=% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d<% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d>% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d<=% y #> [1] TRUE TRUE TRUE TRUE TRUE x %d>=% y #> [1] TRUE TRUE TRUE TRUE TRUE  x <- 1L:5L y <- x+1 x %d==% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d!=% y #> [1] TRUE TRUE TRUE TRUE TRUE x %d<% y #> [1] TRUE TRUE TRUE TRUE TRUE x %d>% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d<=% y #> [1] TRUE TRUE TRUE TRUE TRUE x %d>=% y #> [1] FALSE FALSE FALSE FALSE FALSE  x <- 1L:5L y <- x-1 x %d==% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d!=% y #> [1] TRUE TRUE TRUE TRUE TRUE x %d<% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d>% y #> [1] TRUE TRUE TRUE TRUE TRUE x %d<=% y #> [1] FALSE FALSE FALSE FALSE FALSE x %d>=% y #> [1] TRUE TRUE TRUE TRUE TRUE"},{"path":"https://tony-aw.github.io/tinycodet/reference/import_as.html","id":null,"dir":"Reference","previous_headings":"","what":"Import R-package, its Re-exports, Dependencies, and/or Extensions, Under a Single Alias — import_as","title":"Import R-package, its Re-exports, Dependencies, and/or Extensions, Under a Single Alias — import_as","text":"import_as() function imports namespace R-package, optionally also re-exports, dependencies, extensions, alias. specified alias, containing exported functions specified packages, placed current environment (like global environment, environment within function).","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/import_as.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import R-package, its Re-exports, Dependencies, and/or Extensions, Under a Single Alias — import_as","text":"","code":"import_as(   alias,   main_package,   re_exports = TRUE,   dependencies = NULL,   extensions = NULL,   lib.loc = .libPaths(),   import_order = c(\"dependencies\", \"main_package\", \"extensions\") )"},{"path":"https://tony-aw.github.io/tinycodet/reference/import_as.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import R-package, its Re-exports, Dependencies, and/or Extensions, Under a Single Alias — import_as","text":"alias syntactically valid non-hidden name giving alias object package(s) imported .  name can given either single string (.e. \"alias.\"), one-sided formula single term (.e. ~ alias.). main_package single string, giving name main package import given alias. re_exports TRUE FALSE. re_exports = TRUE re-exports main_package added alias together main package. default, analogous behaviour base R's :: operator. re_exports = FALSE, re-exports added together main package. user can still import packages alias re-exported functions came , specifying dependencies argument. dependencies optional character vector, giving names dependencies main_package imported also alias.  Defaults NULL, means dependencies imported alias.  See pkg_get_deps quickly get dependencies package. extensions optional character vector, giving names extensions main_package imported also alias.  Defaults NULL, means extensions imported alias. lib.loc character vector specifying library search path (location R library trees search ).  lib.loc argument usually .libPaths().  See also loadNamespace. import_order character vector c(\"dependencies\", \"main_package\", \"extensions\"),  re-ordering character vector, giving relative import order groups packages.  See Details section information.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/import_as.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import R-package, its Re-exports, Dependencies, and/or Extensions, Under a Single Alias — import_as","text":"locked environment object, similar output loadNamespace, name specified alias argument, created. object, referred \"(package) alias object\", contain exported functions specified package(s). alias object placed current environment (like global environment, environment within function).  use, example, function \"some_function()\" alias \"alias.\", use: alias.$some_function()   see special attributes alias object, use attr.import. \"unimport\" package alias object, simply remove (.e. rm(list=\"alias.\")).","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/import_as.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import R-package, its Re-exports, Dependencies, and/or Extensions, Under a Single Alias — import_as","text":"Expanded Definitions Arguments \"Re-exports\" functions defined dependencies main_package, re-exported namespace main_package. \"Dependencies\" defined R-package appearing \"Depends\", \"Imports\", \"LinkingTo\" fields Description file main_package. recursive dependencies. \"Extensions\" reverse-dependencies actually extend functionality main_package.  Programmatically, package \"E\" considered extension \"main_package\", following TRUE: \"main_package\" %%  pkg_get_deps_minimal(\"E\") Aliasing Multiple Packages Useful  use R-package extension packages dependencies, whilst avoiding disadvantages attaching package (see tinycodet_import), one traditionally use :: operator like :   becomes cumbersome packages needed /package name(s) become longer.  import_as() function avoids issue allowing multiple related packages imported single alias, allowing one code like :   Thus importing package, multiple directly related packages, single alias, import_as() provides, avoids issues. Importing package alias referred \"aliasing\" package. Alias Naming Recommendation  keep package alias object names easily distinguishable objects can also subset $ operator, recommend ending (starting!) alias names dot (.) underscore (_). Regarding import_order  order character vector given dependencies extensions arguments matters. multiple packages share objects name, objects package named last overwrite earlier named packages.  import_order argument defaults character vector c(\"dependencies\", \"main_package\", \"extensions\"),  recommended setting.  setting results following importing order: dependencies, order specified depenencies argument. main_package (see argument main_package), including re-exports (re_exports = TRUE). extensions, order specified extensions argument. Details  import_as() function support importing base/core R alias.  Packages appear \"Suggests\" \"Enhances\" fields packages considered dependencies extensions.  10 packages allowed imported single alias.","code":"main_package::some_function1() dependency1::some_function2() extension1::some_function3() import_as(    ~ alias., \"main_package\",    dependencies = \"dependency1\", extensions = \"extension1\",    lib.loc = .libPaths() ) alias.$some_function1() alias.$some_function2() alias.$some_function3()"},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/import_as.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import R-package, its Re-exports, Dependencies, and/or Extensions, Under a Single Alias — import_as","text":"","code":"all(c(\"data.table\", \"tidytable\") %installed in% .libPaths()) #> [1] TRUE  import_as( # this creates the 'tdt.' object   \"tdt.\", \"tidytable\", dependencies = \"data.table\" ) #> Importing packages and registering methods... #> Done #> You can now access the functions using `tdt.$` #> For conflicts report, packages order, and other attributes, run `attr.import(tdt.)`  # same as: import_as(   ~ tdt., \"tidytable\", dependencies = \"data.table\" ) #> Importing packages and registering methods... #> Done #> You can now access the functions using `tdt.$` #> For conflicts report, packages order, and other attributes, run `attr.import(tdt.)`"},{"path":"https://tony-aw.github.io/tinycodet/reference/import_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Directly Return a Data-set From a Package — import_data","title":"Directly Return a Data-set From a Package — import_data","text":"import_data() function gets specified data set package.  Unlike utils::data(), import_data() function returns data set directly, allows assigning data set like : mydata <- import_data(...).","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/import_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Directly Return a Data-set From a Package — import_data","text":"","code":"import_data(package, dataname, lib.loc = .libPaths())"},{"path":"https://tony-aw.github.io/tinycodet/reference/import_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Directly Return a Data-set From a Package — import_data","text":"package single string, giving name R-package. dataname single string, giving name data set. lib.loc character vector specifying library search path (location R library trees search ).  lib.loc argument usually .libPaths().  See also loadNamespace.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/import_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Directly Return a Data-set From a Package — import_data","text":"Returns data directly. Thus, one can assign data like : mydata <- import_data(...).","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/import_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Directly Return a Data-set From a Package — import_data","text":"","code":"d <- import_data(\"datasets\", \"cars\") head(d) #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4 #> 4     7   22 #> 5     8   16 #> 6     9   10"},{"path":"https://tony-aw.github.io/tinycodet/reference/import_inops.control.html","id":null,"dir":"Reference","previous_headings":"","what":"import_inops.control — import_inops.control","title":"import_inops.control — import_inops.control","text":"Additional arguments control exposing infix operators import_inops function.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/import_inops.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"import_inops.control — import_inops.control","text":"","code":"import_inops.control(   exclude = NULL,   include.only = NULL,   overwrite = TRUE,   inherits = FALSE )"},{"path":"https://tony-aw.github.io/tinycodet/reference/import_inops.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"import_inops.control — import_inops.control","text":"exclude character vector, giving infix operators expose current environment.  can handy prevent overwriting (user defined) infix operators already present current environment. include.character vector, giving infix operators expose current environment, rest operators exposed.  can handy prevent overwriting (user defined) infix operators already present current environment. overwrite logical, indicating allowed overwrite existing infix operators. TRUE (default), warning given operators existing current environment overwritten, function continuous nonetheless. FALSE, error produced exposed operators already exist current environment, function halted. inherits logical; indicating whether enclosed environments, especially package namespaces, also taken account (TRUE), (FALSE).  Defaults FALSE.  See also exists.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/import_inops.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"import_inops.control — import_inops.control","text":"function used internally import_inops function.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/import_inops.control.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"import_inops.control — import_inops.control","text":"specify exclude include.arguments. one , neither.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/import_inops.control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"import_inops.control — import_inops.control","text":"","code":"# additional arguments (only used when exposing, not unexposing): import_as(~ stri., \"stringi\") #> Importing packages and registering methods... #> Done #> You can now access the functions using `stri.$` #> For conflicts report, packages order, and other attributes, run `attr.import(stri.)`  import_inops(expose = stri., include.only = \"%s==%\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = stri.) #> unexposing infix operators... #> Done import_inops(expose = \"stringi\", exclude = \"%s==%\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = \"stringi\") #> checking for infix operators exposed to the current environment by `import_inops()` ... #> Removing the following infix operators: #> %s!=%, %s!==%, %s$%, %s*%, %s+%, %s<%, %s<=%, %s===%, %s>%, %s>=%, %stri!=%, %stri!==%, %stri$%, %stri*%, %stri+%, %stri<%, %stri<=%, %stri==%, %stri===%, %stri>%, %stri>=% #> Done import_inops(expose = stri., overwrite = FALSE) #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = stri.) #> unexposing infix operators... #> Done import_inops(expose = \"stringi\", overwrite = FALSE) #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = \"stringi\") #> checking for infix operators exposed to the current environment by `import_inops()` ... #> Removing the following infix operators: #> %s!=%, %s!==%, %s$%, %s*%, %s+%, %s<%, %s<=%, %s==%, %s===%, %s>%, %s>=%, %stri!=%, %stri!==%, %stri$%, %stri*%, %stri+%, %stri<%, %stri<=%, %stri==%, %stri===%, %stri>%, %stri>=% #> Done"},{"path":"https://tony-aw.github.io/tinycodet/reference/import_inops.html","id":null,"dir":"Reference","previous_headings":"","what":"(Un)Expose Infix Operators From Package Namespace in the Current Environment — import_inops","title":"(Un)Expose Infix Operators From Package Namespace in the Current Environment — import_inops","text":"import_inops(expose=...) exposes infix operators specified package alias object current environment (like global environment environment within function). import_inops(unexpose=...) \"unexposes\" (.e. removes) infix operators specified package alias object current environment (like global environment environment within function).  Note case infix operators exposed 'tinycodet' import system removed current environment; \"regular\" (.e. user-specified) infix operators touched.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/import_inops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Un)Expose Infix Operators From Package Namespace in the Current Environment — import_inops","text":"","code":"import_inops(expose = NULL, unexpose = NULL, lib.loc = .libPaths(), ...)"},{"path":"https://tony-aw.github.io/tinycodet/reference/import_inops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Un)Expose Infix Operators From Package Namespace in the Current Environment — import_inops","text":"expose, unexpose either one following: alias object produced import_as function. string giving package name. lib.loc character vector specifying library search path (location R library trees search ).  used supplying string expose / unexpose, ignored supplying alias object expose / unexpose (library path already stored inside alias object).  lib.loc argument usually .libPaths().  See also loadNamespace. ... additional arguments, relevant expose argument used.  See import_inops.control.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/import_inops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Un)Expose Infix Operators From Package Namespace in the Current Environment — import_inops","text":"using argument expose: infix operators specified given package alias placed current environment (like Global environment, environment within function).  using argument unexpose: infix operators specified given package alias, exposed import_inops(), removed current environment (like Global environment, environment within function). infix operators found, function simply returns NULL.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/import_inops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Un)Expose Infix Operators From Package Namespace in the Current Environment — import_inops","text":"Exposing Infix Operators Useful  use function R-package, avoiding disadvantages attaching package (see tinycodet_import), one traditionally use :: operator like :   , however, cumbersome infix operators, forces one code like :   Exposing infix operators current environment, using import_inops() function, allows one use infix operators without using cumbersome code, without attach infix operators globally. Details  import_inops() function support overloading base/core R operators.  using import_inops() remove infix operators current environment, use attributes operators determine infix operator came 'tinycodet' import system . infix operators exposed 'tinycodet' import system removed.","code":"packagename::function_name() packagename::`%op%`(x,y)"},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/import_inops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Un)Expose Infix Operators From Package Namespace in the Current Environment — import_inops","text":"","code":"import_inops(expose = \"stringi\") # expose infix operators from package #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = \"stringi\") # remove the exposed infix operators from environment #> checking for infix operators exposed to the current environment by `import_inops()` ... #> Removing the following infix operators: #> %s!=%, %s!==%, %s$%, %s*%, %s+%, %s<%, %s<=%, %s==%, %s===%, %s>%, %s>=%, %stri!=%, %stri!==%, %stri$%, %stri*%, %stri+%, %stri<%, %stri<=%, %stri==%, %stri===%, %stri>%, %stri>=% #> Done  import_as(~ stri., \"stringi\") #> Importing packages and registering methods... #> Done #> You can now access the functions using `stri.$` #> For conflicts report, packages order, and other attributes, run `attr.import(stri.)`  import_inops(expose = stri.) # expose infix operators from alias #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = stri.) # unexposed infix operators from current environment #> unexposing infix operators... #> Done   # additional arguments (only used when exposing, not unexposing): import_inops(expose = \"stringi\", exclude = \"%s==%\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = \"stringi\") #> checking for infix operators exposed to the current environment by `import_inops()` ... #> Removing the following infix operators: #> %s!=%, %s!==%, %s$%, %s*%, %s+%, %s<%, %s<=%, %s===%, %s>%, %s>=%, %stri!=%, %stri!==%, %stri$%, %stri*%, %stri+%, %stri<%, %stri<=%, %stri==%, %stri===%, %stri>%, %stri>=% #> Done import_inops(expose = \"stringi\", overwrite = FALSE) #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = \"stringi\") #> checking for infix operators exposed to the current environment by `import_inops()` ... #> Removing the following infix operators: #> %s!=%, %s!==%, %s$%, %s*%, %s+%, %s<%, %s<=%, %s==%, %s===%, %s>%, %s>=%, %stri!=%, %stri!==%, %stri$%, %stri*%, %stri+%, %stri<%, %stri<=%, %stri==%, %stri===%, %stri>%, %stri>=% #> Done  import_as(~ stri., \"stringi\") #> Importing packages and registering methods... #> Done #> You can now access the functions using `stri.$` #> For conflicts report, packages order, and other attributes, run `attr.import(stri.)`  import_inops(expose = stri., include.only = \"%s==%\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = stri.) #> unexposing infix operators... #> Done import_inops(expose = stri., overwrite = FALSE) #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done import_inops(unexpose = stri.) #> unexposing infix operators... #> Done"},{"path":"https://tony-aw.github.io/tinycodet/reference/import_misc.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscellaneous import_ - Functions — import_LL","title":"Miscellaneous import_ - Functions — import_LL","text":"import_LL() function places specific functions package current environment, also locks (see lockBinding) specified functions prevent modification.  primary use-case function exposing functions inside local environment, like environment within function.  import_int() function directly returns internal function package.  similar ::: operator, 2 key differences: import_int() includes lib.loc argument. import_int() searches internal functions, exported ones. makes clearer code using internal function, instead making ambiguous.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/import_misc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Miscellaneous import_ - Functions — import_LL","text":"","code":"import_LL(package, selection, lib.loc = .libPaths())  import_int(form, lib.loc = .libPaths())"},{"path":"https://tony-aw.github.io/tinycodet/reference/import_misc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Miscellaneous import_ - Functions — import_LL","text":"package single string, giving name package take functions . selection character vector function names (regular functions infix operators).  Internal functions re-exported functions supported. lib.loc character vector specifying library search path (location R library trees search ).  lib.loc argument usually .libPaths().  See also loadNamespace. form two-sided formula, one term side.  term left hand side give single package name.  term right hand side give single internal function.  Example: package_name ~ function_name","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/import_misc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Miscellaneous import_ - Functions — import_LL","text":"import_LL(): specified functions placed current environment (like global environment, environment within function), locked. unexpose overwrite functions, simply remove ; .e.: rm(list=c(\"some_function1\", \"some_function2\")).  import_int(): function returned directly. one can assign function directly variable, like : myfun <- import_int(...)   use directly without re-assignment like : import_int(...)(...)","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/import_misc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Miscellaneous import_ - Functions — import_LL","text":"Regarding Locks import_LL()  import_as function returns locked environment, just like loadNamespace, thus protecting functions accidental modification re-assignment.  import_inops function returns infix operators, though locked, one needs surround infix operators back ticks re-assign modify , unlikely happen accident.  import_LL() function, however, returns \"loose\" functions. functions (unless infix operators) protection due locked environment due syntax.  Therefore, ensure safety (accidental) modification re-assignment, import_LL() function locks functions (see lockBinding). consistency, infix operators exposed import_LL() also locked. Details  import_LL() import_int() functions support importing functions base/core R.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/import_misc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Miscellaneous import_ - Functions — import_LL","text":"","code":"# Using import_LL ==== import_LL(   \"stringi\", \"stri_sub\" ) #> exposing and locking functions to current environment ... #> Done # the stri_sub() function now cannot be modified, only used or removed, because it's locked: bindingIsLocked(\"stri_sub\", environment()) # TRUE #> [1] TRUE  mypaste <- function(x, y) {   import_LL(\"stringi\", selection = \"stri_c\")   stri_c(x, y)   } mypaste(\"hello \", \"world\") #> exposing and locking functions to current environment ... #> Done #> [1] \"hello world\"    # Using internal function ==== # Through re-assignment: fun <- import_int(tinycodet ~ .internal_paste, .libPaths()) fun(\"hello\", \"world\") #> [1] \"helloworld\"  # Or using directly: import_int(   tinycodet ~ .internal_paste, .libPaths() )(\"hello\", \"world\") #> [1] \"helloworld\""},{"path":"https://tony-aw.github.io/tinycodet/reference/inplace.html","id":null,"dir":"Reference","previous_headings":"","what":"General In-place Modifier Operator — inplace","title":"General In-place Modifier Operator — inplace","text":"x %:=% f operator performs -place modification object x function f.  example :   Can now re-written :","code":"mtcars$mpg[mtcars$cyl>6] <- mtcars$mpg[mtcars$cyl>6]^2 mtcars$mpg\\[mtcars$cyl>6\\] %:=% \\(x)x^2"},{"path":"https://tony-aw.github.io/tinycodet/reference/inplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General In-place Modifier Operator — inplace","text":"","code":"x %:=% f"},{"path":"https://tony-aw.github.io/tinycodet/reference/inplace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General In-place Modifier Operator — inplace","text":"x variable. f (possibly anonymous) function applied -place x. function must take one argument .","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/inplace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General In-place Modifier Operator — inplace","text":"operator return value: -place modifier, thus modifies object directly.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/inplace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General In-place Modifier Operator — inplace","text":"","code":"set.seed(1) object <- matrix(rpois(10, 10), ncol=2) print(object) #>      [,1] [,2] #> [1,]    8   12 #> [2,]   10   11 #> [3,]    7    9 #> [4,]   11   14 #> [5,]   14   11 y <- 3 object %:=% \\(x) x+y # same as object <- object + y print(object) #>      [,1] [,2] #> [1,]   11   15 #> [2,]   13   14 #> [3,]   10   12 #> [4,]   14   17 #> [5,]   17   14"},{"path":"https://tony-aw.github.io/tinycodet/reference/lock.html","id":null,"dir":"Reference","previous_headings":"","what":"Lock T, Lock F, or Create Locked Constants — lock","title":"Lock T, Lock F, or Create Locked Constants — lock","text":"lock_TF() function locks T F values sets TRUE FALSE, respectively, prevent user re-assigning .  Removing created T F objects allows re-assignment .  X %<-c% operator creates constant X assigns .  Constants changed, accessed removed. piece code requires unchangeable constant, use operator create said constant.  Removing constant X also removes binding lock. Thus change constant, simply remove re-create .","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/lock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lock T, Lock F, or Create Locked Constants — lock","text":"","code":"lock_TF(env)  X %<-c% A"},{"path":"https://tony-aw.github.io/tinycodet/reference/lock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lock T, Lock F, or Create Locked Constants — lock","text":"env optional environment give, determining environment T F locked.  specified, current environment (like global environment, environment within function) used. X syntactically valid unquoted name object created. kind object assigned X.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/lock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lock T, Lock F, or Create Locked Constants — lock","text":"lock_TF(): Two constants, namely T F, set TRUE FALSE respectively, created specified else current environment, locked. Removing created T F objects allows re-assignment .  X %<-c% : object X containing created current environment, object changed. can accessed removed.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/lock.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lock T, Lock F, or Create Locked Constants — lock","text":"Note following statement   returns   due R's precedence rules. Therefore, cases, right hand side X %<-c% need surrounded brackets. .e.:   Note lock_TF() function %s<-c% operator create constants lockBinding.  constants protected modification copy, protected modification reference (see example collapse::setv).","code":"x %<-c% 2+2 print(x) [1] 2 x %<-c% (2+2)"},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/lock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lock T, Lock F, or Create Locked Constants — lock","text":"","code":"lock_TF() X %<-c% data.frame(x=3, y=2) # this data.frame cannot be changed. Only accessed or removed. X[1, ,drop=FALSE] #>   x y #> 1 3 2"},{"path":"https://tony-aw.github.io/tinycodet/reference/logic_ops.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional Logic Operators — logic_ops","title":"Additional Logic Operators — logic_ops","text":"Additional logic operators:  x %xor% y operator \"exclusive-\" operator, xor(x, y).  x %n&% operator \"-\" operator, (!x) & (!y).  x %% y operator !x %% y.  x %?=% y operator checks x y unreal unknown (.e. NA, NaN, Inf, -Inf).  n %=numtype% numtype operator checks every value numeric vector n can considered number belonging type numtype.  s %=strtype% strtype operator checks every value character vector s can seen certain strtype.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/logic_ops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional Logic Operators — logic_ops","text":"","code":"x %xor% y  x %n&% y  x %out% y  x %?=% y  n %=numtype% numtype  s %=strtype% strtype"},{"path":"https://tony-aw.github.io/tinycodet/reference/logic_ops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional Logic Operators — logic_ops","text":"x, y see Logic. n numeric vector. numtype single string giving numeric type checked.  See Details section supported types. s character vector. strtype single string giving string type checked.  See Details section supported types.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/logic_ops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional Logic Operators — logic_ops","text":"logical vector.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/logic_ops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Additional Logic Operators — logic_ops","text":"argument numtype, following options supported: \"~0\": zero, else number whose absolute value smaller Machine tolerance (sqrt(.Machine$double.eps)). \"B\": binary numbers (exactly 0 exactly 1); \"prop\": proportions - numbers 0 1 (exactly 0 1 also allowed); \"\": Integers; \"odd\": odd integers; \"even\": even integers; \"R\": Real numbers; \"unreal\": infinity, NA, NaN; argument strtype, following options supported: \"empty\": checks string consists empty spaces. \"unreal\": checks string NA, literal string \"NA\", \"NaN\" \"Inf\", regardless leading trailing spaces. \"numeric\": checks string can converted number, disregarding leading trailing spaces. .e. string \"5.0\" can converted actual number 5.0. \"special\": checks string consists special characters.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/logic_ops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional Logic Operators — logic_ops","text":"","code":"x <- c(TRUE, FALSE, TRUE, FALSE, NA, NaN, Inf, -Inf, TRUE, FALSE) y <- c(FALSE, TRUE, TRUE, FALSE, rep(NA, 6)) outcome <- data.frame(   x=x, y=y,   \"x %xor% y\"=x %xor% y, \"x %n&% y\" = x %n&% y, \"x %?=% y\" = x %?=% y,   check.names = FALSE ) print(outcome) #>       x     y x %xor% y x %n&% y x %?=% y #> 1     1 FALSE      TRUE    FALSE    FALSE #> 2     0  TRUE      TRUE    FALSE    FALSE #> 3     1  TRUE     FALSE    FALSE    FALSE #> 4     0 FALSE     FALSE     TRUE    FALSE #> 5    NA    NA        NA       NA     TRUE #> 6   NaN    NA        NA       NA     TRUE #> 7   Inf    NA        NA       NA     TRUE #> 8  -Inf    NA        NA       NA     TRUE #> 9     1    NA        NA       NA    FALSE #> 10    0    NA        NA       NA    FALSE  1:3 %out% 1:10 #> [1] FALSE FALSE FALSE 1:10 %out% 1:3 #>  [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE   n <- c(0:5, 0:-5, 0.1, -0.1, 0, 1, Inf, -Inf, NA, NaN) 1e-20 %=numtype% \"~0\" #> [1] TRUE n[n %=numtype% \"B\"] #> [1] 0 1 0 0 1 n[n %=numtype% \"prop\"] #> [1] 0.0 1.0 0.0 0.1 0.0 1.0 n[n %=numtype% \"I\"] #>  [1]  0  1  2  3  4  5  0 -1 -2 -3 -4 -5  0  1 n[n %=numtype% \"odd\"] #> [1]  1  3  5 -1 -3 -5  1 n[n %=numtype% \"even\"] #> [1]  0  2  4  0 -2 -4  0 n[n %=numtype% \"R\"] #>  [1]  0.0  1.0  2.0  3.0  4.0  5.0  0.0 -1.0 -2.0 -3.0 -4.0 -5.0  0.1 -0.1  0.0 #> [16]  1.0 n[n %=numtype% \"unreal\"] #> [1]  Inf -Inf   NA  NaN  s <- c(\" AbcZ123 \", \" abc \", \" 1.3 \", \" !#$%^&*() \", \"  \", \"  NA  \", \"  NaN  \", \" Inf \") s[s %=strtype% \"empty\"] #> [1] \"  \" s[s %=strtype% \"unreal\"] #> [1] \"  NA  \"  \"  NaN  \" \" Inf \"   s[s %=strtype% \"numeric\"] #> [1] \" 1.3 \" \" Inf \" s[s %=strtype% \"special\"] #> [1] \" !#$%^&*() \""},{"path":"https://tony-aw.github.io/tinycodet/reference/matrix_ops.html","id":null,"dir":"Reference","previous_headings":"","what":"Row- or Column-wise Re-ordering of Matrices — matrix_ops","title":"Row- or Column-wise Re-ordering of Matrices — matrix_ops","text":"Infix operators custom row- column-wise re-ordering matrices.  x %row~% mat operator re-orders elements every row, row ordered independently rows, matrix x, according ordering ranks given matrix mat.  x %col~% mat operator re-orders elements every column, column ordered independently columns, matrix x, according ordering ranks given matrix mat.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/matrix_ops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row- or Column-wise Re-ordering of Matrices — matrix_ops","text":"","code":"x %row~% mat  x %col~% mat"},{"path":"https://tony-aw.github.io/tinycodet/reference/matrix_ops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row- or Column-wise Re-ordering of Matrices — matrix_ops","text":"x matrix mat matrix dimensions x, giving ordering ranks every element matrix x.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/matrix_ops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row- or Column-wise Re-ordering of Matrices — matrix_ops","text":"modified matrix.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/matrix_ops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Row- or Column-wise Re-ordering of Matrices — matrix_ops","text":"matrix x numeric matrix, one wants sort elements every row column numerically, x %row~% x x %col~% x suffice, respectively.  matrix x numeric, sorting elements using x %row~% x x %col~% x still possible, probably best option. non-numeric case, providing matrix ordering ranks mat faster give accurate ordering. See examples section.  mat matrix non-repeating random integers, .e. mat <- sample(1:length(x)) |> matrix(ncol=ncol(x)))  code x %row~% mat  randomly shuffle elements every row x, shuffling order row independent shuffling order rows.  Similarly, x %col~% mat  randomly shuffle elements every column x, shuffling order column independent shuffling order columns.  Re-ordering/sorting every row/column matrix operators generally faster loops apply-like functions.  Note operators strip attributes except dimensions.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/matrix_ops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row- or Column-wise Re-ordering of Matrices — matrix_ops","text":"","code":"# numeric matrix ====  x <- matrix(sample(1:25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    9   10    3   16   11 #> [2,]   14   12    6   19    7 #> [3,]    5   15   20   21   22 #> [4,]   23    1   13   25   18 #> [5,]    2    4   24   17    8 x %row~% x # sort elements of every row independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    3    9   10   11   16 #> [2,]    6    7   12   14   19 #> [3,]    5   15   20   21   22 #> [4,]    1   13   18   23   25 #> [5,]    2    4    8   17   24 x %row~% -x # reverse-sort elements of every row independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   16   11   10    9    3 #> [2,]   19   14   12    7    6 #> [3,]   22   21   20   15    5 #> [4,]   25   23   18   13    1 #> [5,]   24   17    8    4    2 x %col~% x # sort elements of every column independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    2    1    3   16    7 #> [2,]    5    4    6   17    8 #> [3,]    9   10   13   19   11 #> [4,]   14   12   20   21   18 #> [5,]   23   15   24   25   22 x %col~% -x # reverse-sort elements of every column independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   23   15   24   25   22 #> [2,]   14   12   20   21   18 #> [3,]    9   10   13   19   11 #> [4,]    5    4    6   17    8 #> [5,]    2    1    3   16    7  x <- matrix(sample(1:25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    6   14    1   24   15 #> [2,]    7    2    3   11    4 #> [3,]   19   13   17   12    5 #> [4,]   10   20    8   22   23 #> [5,]   25   21   16   18    9 mat <- sample(1:length(x)) |> matrix(ncol=ncol(x)) # matrix of non-repeating random integers x %row~% mat # randomly shuffle every row independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1   24   14    6   15 #> [2,]   11    4    3    2    7 #> [3,]    5   19   17   12   13 #> [4,]   20   22    8   23   10 #> [5,]   25   18    9   16   21 x %col~% mat # randomise shuffle every column independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   25   20    1   22    4 #> [2,]   19    2    3   11    5 #> [3,]    6   14    8   18   23 #> [4,]   10   21   17   24    9 #> [5,]    7   13   16   12   15  # character matrix ====  x <- matrix(sample(letters, 25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"g\"  \"k\"  \"t\"  \"f\"  \"y\"  #> [2,] \"s\"  \"o\"  \"z\"  \"n\"  \"u\"  #> [3,] \"b\"  \"w\"  \"h\"  \"v\"  \"i\"  #> [4,] \"j\"  \"p\"  \"e\"  \"c\"  \"d\"  #> [5,] \"a\"  \"l\"  \"q\"  \"x\"  \"r\"  mat <- stringi::stri_rank(as.vector(x)) |> matrix(ncol=ncol(x)) x %row~% mat # sort elements of every row independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"f\"  \"g\"  \"k\"  \"t\"  \"y\"  #> [2,] \"n\"  \"o\"  \"s\"  \"u\"  \"z\"  #> [3,] \"b\"  \"h\"  \"i\"  \"v\"  \"w\"  #> [4,] \"c\"  \"d\"  \"e\"  \"j\"  \"p\"  #> [5,] \"a\"  \"l\"  \"q\"  \"r\"  \"x\"  x %row~% -mat # reverse-sort elements of every row independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"y\"  \"t\"  \"k\"  \"g\"  \"f\"  #> [2,] \"z\"  \"u\"  \"s\"  \"o\"  \"n\"  #> [3,] \"w\"  \"v\"  \"i\"  \"h\"  \"b\"  #> [4,] \"p\"  \"j\"  \"e\"  \"d\"  \"c\"  #> [5,] \"x\"  \"r\"  \"q\"  \"l\"  \"a\"  x %col~% mat # sort elements of every column independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"a\"  \"k\"  \"e\"  \"c\"  \"d\"  #> [2,] \"b\"  \"l\"  \"h\"  \"f\"  \"i\"  #> [3,] \"g\"  \"o\"  \"q\"  \"n\"  \"r\"  #> [4,] \"j\"  \"p\"  \"t\"  \"v\"  \"u\"  #> [5,] \"s\"  \"w\"  \"z\"  \"x\"  \"y\"  x %col~% -mat # reverse-sort elements of every column independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"s\"  \"w\"  \"z\"  \"x\"  \"y\"  #> [2,] \"j\"  \"p\"  \"t\"  \"v\"  \"u\"  #> [3,] \"g\"  \"o\"  \"q\"  \"n\"  \"r\"  #> [4,] \"b\"  \"l\"  \"h\"  \"f\"  \"i\"  #> [5,] \"a\"  \"k\"  \"e\"  \"c\"  \"d\"   x <- matrix(sample(letters, 25), nrow=5) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"v\"  \"n\"  \"u\"  \"w\"  \"j\"  #> [2,] \"f\"  \"q\"  \"r\"  \"b\"  \"p\"  #> [3,] \"t\"  \"c\"  \"o\"  \"h\"  \"z\"  #> [4,] \"i\"  \"s\"  \"l\"  \"y\"  \"d\"  #> [5,] \"e\"  \"g\"  \"a\"  \"m\"  \"k\"  mat <- sample(1:length(x)) |> matrix(ncol=ncol(x)) # matrix of non-repeating random integers x %row~% mat # randomly shuffle every row independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"j\"  \"w\"  \"u\"  \"n\"  \"v\"  #> [2,] \"q\"  \"r\"  \"p\"  \"b\"  \"f\"  #> [3,] \"c\"  \"o\"  \"h\"  \"t\"  \"z\"  #> [4,] \"y\"  \"d\"  \"l\"  \"i\"  \"s\"  #> [5,] \"g\"  \"k\"  \"a\"  \"e\"  \"m\"  x %col~% mat # randomise shuffle every column independently #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"e\"  \"g\"  \"r\"  \"y\"  \"k\"  #> [2,] \"t\"  \"c\"  \"o\"  \"w\"  \"d\"  #> [3,] \"i\"  \"q\"  \"a\"  \"h\"  \"j\"  #> [4,] \"f\"  \"s\"  \"u\"  \"m\"  \"p\"  #> [5,] \"v\"  \"n\"  \"l\"  \"b\"  \"z\""},{"path":"https://tony-aw.github.io/tinycodet/reference/pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscellaneous Package Related Functions — pkgs","title":"Miscellaneous Package Related Functions — pkgs","text":"pkgs %installed % lib.loc operator checks one packages (pkgs) exist library location (lib.loc), without loading packages.  syntax operator forces user make syntactically explicit look installed R-packages.  pkgs %installed % lib.loc even load package, user can safely use without fearing unwanted side-effects.  pkg_get_deps() function gets direct dependencies package Description file. works non-CRAN packages also.  pkg_get_deps_minimal() function pkg_get_deps(), except base, recom, rstudioapi, shared_tidy set FALSE, default value deps_type c(\"Depends\", \"Imports\").  pkg_lsf() function gets list exported functions/operators package.  One handy use function , example, globally attach infix operators package using library, like :","code":"library(packagename, include.only = pkg_lsf(\"packagename\", type=\"inops\"))"},{"path":"https://tony-aw.github.io/tinycodet/reference/pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Miscellaneous Package Related Functions — pkgs","text":"","code":"pkgs %installed in% lib.loc  pkg_get_deps(   package,   lib.loc = .libPaths(),   deps_type = c(\"LinkingTo\", \"Depends\", \"Imports\"),   base = FALSE,   recom = TRUE,   rstudioapi = TRUE,   shared_tidy = TRUE )  pkg_get_deps_minimal(   package,   lib.loc = .libPaths(),   deps_type = c(\"Depends\", \"Imports\") )  pkg_lsf(package, type, lib.loc = .libPaths())"},{"path":"https://tony-aw.github.io/tinycodet/reference/pkgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Miscellaneous Package Related Functions — pkgs","text":"pkgs character vector package name(s). lib.loc character vector specifying library search path (location R library trees search ).  lib.loc argument usually .libPaths().  See also loadNamespace. package single string giving package name. deps_type character vector, giving dependency types used.  order character vector given deps_type affects order returned character vector; see Details sections. base logical, indicating whether base/core R included (TRUE), included (FALSE). recom logical, indicating whether pre-installed 'recommended' R-packages included (TRUE), included (FALSE). rstudioapi logical, indicating whether 'rstudioapi' R-package included (TRUE), included (FALSE). shared_tidy logical, indicating whether shared dependencies 'tidyverse' included (TRUE), included (FALSE). Details:  'tidyverse' packages tend dependencies 'tinyverse' 'fastverse' packages.  dependencies shared across 'tidyverse'.  \"official\" list shared dependencies 'tidyverse' currently following:  'rlang', 'lifecycle', 'cli', 'glue', 'withr'. type type functions list. Possibilities: \"inops\" \"operators\": infix operators. \"regfuns\": regular functions (thus excluding infix operators). \"\": functions, regular functions infix operators.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/pkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Miscellaneous Package Related Functions — pkgs","text":" pkgs %installed % lib.loc: Returns named logical vector, names giving package names, value TRUE indicates package installed, value FALSE indicates package installed.  pkg_get_deps(): character vector direct dependencies, without duplicates.  pkg_lsf(): Returns character vector exported function names specified package.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/pkgs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Miscellaneous Package Related Functions — pkgs","text":"pkg_get_deps():  string argument deps_type, package names corresponding field Description file extracted, order appear field.  order given argument deps_type also affects order returned character vector:  example, c(\"LinkingTo\", \"Depends\", \"Imports\"),  means package names extracted fields following order: \"LinkingTo\"; \"Depends\"; \"Imports\". unique (thus non-repeating) package names returned user.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/pkgs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Miscellaneous Package Related Functions — pkgs","text":"O'Brien J., elegantly extract R-package dependencies package listed CRAN. Stack Overflow. (1 September 2023). https://stackoverflow.com/questions/30223957/elegantly-extract-r-package-dependencies---package--listed--cran","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/pkgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Miscellaneous Package Related Functions — pkgs","text":"","code":"\"dplyr\" %installed in% .libPaths() #> dplyr  #>  TRUE   pkg_get_deps_minimal(\"dplyr\") #> [1] \"generics\"   \"magrittr\"   \"pillar\"     \"R6\"         \"tibble\"     #> [6] \"tidyselect\" \"vctrs\"      pkgs <- pkg_get_deps(\"dplyr\") pkgs %installed in% .libPaths() #>        cli   generics       glue  lifecycle   magrittr     pillar         R6  #>       TRUE       TRUE       TRUE       TRUE       TRUE       TRUE       TRUE  #>      rlang     tibble tidyselect      vctrs  #>       TRUE       TRUE       TRUE       TRUE  pkg_lsf(\"dplyr\", \"all\") #>   [1] \"slice_max\"             \"src\"                   \"db_desc\"               #>   [4] \"group_by_drop_default\" \"db_commit\"             \"coalesce\"              #>   [7] \"summarize_if\"          \"mutate_\"               \"db_create_index\"       #>  [10] \"join_by\"               \"check_dbplyr\"          \"src_tbls\"              #>  [13] \"db_query_rows\"         \"dense_rank\"            \"slice_head\"            #>  [16] \"tbl\"                   \"consecutive_id\"        \"first\"                 #>  [19] \"arrange\"               \"dplyr_row_slice\"       \"sql_semi_join\"         #>  [22] \"is.grouped_df\"         \"summarise_each\"        \"group_vars\"            #>  [25] \"bind_cols\"             \"last_dplyr_warnings\"   \"distinct_at\"           #>  [28] \"mutate_all\"            \"relocate\"              \"compute\"               #>  [31] \"mutate_if\"             \"distinct_\"             \"group_indices_\"        #>  [34] \"eval_tbls2\"            \"rename_all\"            \"count\"                 #>  [37] \"do_\"                   \"do\"                    \"cumany\"                #>  [40] \"wrap_dbplyr_obj\"       \"recode_factor\"         \"same_src\"              #>  [43] \"top_frac\"              \"select_vars\"           \"desc\"                  #>  [46] \"db_create_indexes\"     \"lead\"                  \"mutate_at\"             #>  [49] \"distinct_prepare\"      \"src_sqlite\"            \"distinct_if\"           #>  [52] \"cur_column\"            \"semi_join\"             \"filter_if\"             #>  [55] \"sql_translate_env\"     \"arrange_\"              \"case_match\"            #>  [58] \"sql_set_op\"            \"eval_tbls\"             \"arrange_at\"            #>  [61] \"add_count\"             \"dplyr_reconstruct\"     \"slice_min\"             #>  [64] \"new_rowwise_df\"        \"cross_join\"            \"select\"                #>  [67] \"distinct_all\"          \"src_local\"             \"as.tbl\"                #>  [70] \"summarise\"             \"db_drop_table\"         \"rows_patch\"            #>  [73] \"cur_data\"              \"row_number\"            \"groups\"                #>  [76] \"anti_join\"             \"tbl_vars\"              \"cur_group_id\"          #>  [79] \"auto_copy\"             \"sql_subquery\"          \"group_indices\"         #>  [82] \"progress_estimated\"    \"transmute_all\"         \"new_grouped_df\"        #>  [85] \"add_tally_\"            \"group_data\"            \"rows_insert\"           #>  [88] \"all_equal\"             \"group_split\"           \"tbl_ptype\"             #>  [91] \"inner_join\"            \"db_insert_into\"        \"db_save_query\"         #>  [94] \"id\"                    \"summarise_all\"         \"db_begin\"              #>  [97] \"left_join\"             \"summarize_each_\"       \"dplyr_col_modify\"      #> [100] \"compare_tbls2\"         \"filter\"                \"union_all\"             #> [103] \"summarize_all\"         \"slice_tail\"            \"n\"                     #> [106] \"add_count_\"            \"summarize_each\"        \"show_query\"            #> [109] \"group_cols\"            \"summarise_at\"          \"n_distinct\"            #> [112] \"transmute_at\"          \"rename\"                \"reframe\"               #> [115] \"select_vars_\"          \"near\"                  \"pick\"                  #> [118] \"n_groups\"              \"across\"                \"all_vars\"              #> [121] \"select_all\"            \"slice\"                 \"na_if\"                 #> [124] \"select_if\"             \"grouped_df\"            \"tbl_df\"                #> [127] \"tally_\"                \"is.src\"                \"db_create_table\"       #> [130] \"mutate_each\"           \"group_keys\"            \"add_rownames\"          #> [133] \"rename_vars\"           \"select_at\"             \"is.tbl\"                #> [136] \"arrange_all\"           \"summarize\"             \"cummean\"               #> [139] \"rename_with\"           \"group_map\"             \"current_vars\"          #> [142] \"with_groups\"           \"last\"                  \"rowwise\"               #> [145] \"group_size\"            \"nth\"                   \"src_postgres\"          #> [148] \"dim_desc\"              \"transmute\"             \"transmute_if\"          #> [151] \"case_when\"             \"arrange_if\"            \"order_by\"              #> [154] \"with_order\"            \"group_rows\"            \"any_vars\"              #> [157] \"db_analyze\"            \"db_data_type\"          \"top_n\"                 #> [160] \"add_tally\"             \"db_query_fields\"       \"group_trim\"            #> [163] \"between\"               \"select_\"               \"lag\"                   #> [166] \"mutate_each_\"          \"percent_rank\"          \"distinct\"              #> [169] \"group_by_prepare\"      \"db_explain\"            \"summarise_each_\"       #> [172] \"tbl_nongroup_vars\"     \"bench_tbls\"            \"is_grouped_df\"         #> [175] \"right_join\"            \"summarise_if\"          \"filter_\"               #> [178] \"cur_group_rows\"        \"src_mysql\"             \"summarize_at\"          #> [181] \"rows_delete\"           \"combine\"               \"ntile\"                 #> [184] \"location\"              \"symdiff\"               \"sql_escape_string\"     #> [187] \"rename_vars_\"          \"nest_by\"               \"db_rollback\"           #> [190] \"filter_at\"             \"collapse\"              \"db_write_table\"        #> [193] \"db_has_table\"          \"ungroup\"               \"group_by\"              #> [196] \"funs\"                  \"vars\"                  \"if_all\"                #> [199] \"slice_sample\"          \"recode\"                \"validate_rowwise_df\"   #> [202] \"rename_\"               \"cur_group\"             \"group_nest\"            #> [205] \"filter_all\"            \"src_df\"                \"summarise_\"            #> [208] \"group_by_\"             \"copy_to\"               \"cur_data_all\"          #> [211] \"if_else\"               \"transmute_\"            \"funs_\"                 #> [214] \"summarize_\"            \"failwith\"              \"compare_tbls\"          #> [217] \"sample_frac\"           \"group_by_all\"          \"explain\"               #> [220] \"rename_if\"             \"sample_n\"              \"group_by_if\"           #> [223] \"validate_grouped_df\"   \"common_by\"             \"group_walk\"            #> [226] \"changes\"               \"make_tbl\"              \"rows_upsert\"           #> [229] \"cume_dist\"             \"ident\"                 \"rows_append\"           #> [232] \"rows_update\"           \"select_var\"            \"db_list_tables\"        #> [235] \"rename_at\"             \"sql_escape_ident\"      \"group_by_at\"           #> [238] \"pull\"                  \"mutate\"                \"nest_join\"             #> [241] \"slice_\"                \"count_\"                \"group_modify\"          #> [244] \"if_any\"                \"tally\"                 \"bind_rows\"             #> [247] \"c_across\"              \"cumall\"                \"collect\"               #> [250] \"min_rank\"              \"sql\"                   \"sql_select\"            #> [253] \"sql_join\"              \"full_join\""},{"path":"https://tony-aw.github.io/tinycodet/reference/pversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Package Versions Mismatch — pversion","title":"Check for Package Versions Mismatch — pversion","text":"pversion_check4mismatch() function checks mismatch currently loaded packages packages specified library path.  pversion_report() function gives table specified packages, loaded installed versions, regardless mismatch .","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/pversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Package Versions Mismatch — pversion","text":"","code":"pversion_check4mismatch(pkgs = NULL, lib.loc = .libPaths())  pversion_report(pkgs = NULL, lib.loc = .libPaths())"},{"path":"https://tony-aw.github.io/tinycodet/reference/pversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Package Versions Mismatch — pversion","text":"pkgs character vector package name(s).  Packages actually loaded ignored.  Base/core R also ignored.  NULL, loaded packages (see loadedNamespaces) excluding core/base R checked. lib.loc character vector specifying library search path (location R library trees search ).  lib.loc argument usually .libPaths().  See also loadNamespace.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/pversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Package Versions Mismatch — pversion","text":" pversion_check4mismatch(): mismatch loaded versions lib.loc found, returns NULL. Otherwise returns data.frame, loaded version library version specified packages.  pversion_report(): Returns data.frame, loaded version library version specified packages, well logical column indicating whether two versions equal (TRUE), equal (FALSE).","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/pversion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Package Versions Mismatch — pversion","text":"","code":"\"dplyr\" %installed in%  .libPaths() #> dplyr  #>  TRUE   import_as(~dpr., \"dplyr\") #> Importing packages and registering methods... #> Done #> You can now access the functions using `dpr.$` #> For conflicts report, packages order, and other attributes, run `attr.import(dpr.)`  pversion_check4mismatch() #> NULL pversion_report() #>        package version_loaded version_lib.loc versions_equal #> 1    powerjoin          0.1.0           0.1.0           TRUE #> 2         sass          0.4.7           0.4.7           TRUE #> 3         utf8          1.2.4           1.2.4           TRUE #> 4     generics          0.1.3           0.1.3           TRUE #> 5        tidyr          1.3.0           1.3.0           TRUE #> 6         xml2          1.3.5           1.3.5           TRUE #> 7      stringi          1.8.3           1.8.3           TRUE #> 8       digest         0.6.33          0.6.33           TRUE #> 9     magrittr          2.0.3           2.0.3           TRUE #> 10    evaluate           0.22            0.22           TRUE #> 11     fastmap          1.1.1           1.1.1           TRUE #> 12   rprojroot          2.0.3           2.0.3           TRUE #> 13    jsonlite          1.8.7           1.8.7           TRUE #> 14     whisker          0.4.1           0.4.1           TRUE #> 15        httr          1.4.7           1.4.7           TRUE #> 16   tidytable         0.10.2          0.10.2           TRUE #> 17       purrr          1.0.2           1.0.2           TRUE #> 18       fansi          1.0.5           1.0.5           TRUE #> 19 textshaping          0.3.7           0.3.7           TRUE #> 20   jquerylib          0.1.4           0.1.4           TRUE #> 21         cli          3.6.1           3.6.1           TRUE #> 22       rlang          1.1.1           1.1.1           TRUE #> 23     remotes        2.4.2.1         2.4.2.1           TRUE #> 24       withr          2.5.2           2.5.2           TRUE #> 25      cachem          1.0.8           1.0.8           TRUE #> 26        yaml          2.3.7           2.3.7           TRUE #> 27     memoise          2.0.1           2.0.1           TRUE #> 28       dplyr          1.1.3           1.1.3           TRUE #> 29        curl          5.1.0           5.1.0           TRUE #> 30       vctrs          0.6.4           0.6.4           TRUE #> 31          R6          2.5.1           2.5.1           TRUE #> 32   lifecycle          1.0.3           1.0.3           TRUE #> 33          fs          1.6.3           1.6.3           TRUE #> 34        ragg          1.2.6           1.2.6           TRUE #> 35   pkgconfig          2.0.3           2.0.3           TRUE #> 36        desc          1.4.2           1.4.2           TRUE #> 37   tinycodet          0.3.9           0.3.9           TRUE #> 38     pkgdown          2.0.7           2.0.7           TRUE #> 39      pillar          1.9.0           1.9.0           TRUE #> 40       bslib          0.5.1           0.5.1           TRUE #> 41        glue          1.6.2           1.6.2           TRUE #> 42  data.table        1.14.10         1.14.10           TRUE #> 43        Rcpp         1.0.11          1.0.11           TRUE #> 44 systemfonts          1.0.5           1.0.5           TRUE #> 45    collapse          2.0.7           2.0.7           TRUE #> 46        xfun           0.40            0.40           TRUE #> 47      tibble          3.2.1           3.2.1           TRUE #> 48  tidyselect          1.2.0           1.2.0           TRUE #> 49  rstudioapi         0.15.0          0.15.0           TRUE #> 50       knitr           1.45            1.45           TRUE #> 51   htmltools        0.5.6.1         0.5.6.1           TRUE #> 52   rmarkdown           2.25            2.25           TRUE #> 53     downlit          0.4.3           0.4.3           TRUE"},{"path":"https://tony-aw.github.io/tinycodet/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. stringi %s$%, %s*%, %s+%","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/report_inops.html","id":null,"dir":"Reference","previous_headings":"","what":"Report Infix Operators — report_inops","title":"Report Infix Operators — report_inops","text":"report_inops() function returns data.frame listing infix operators defined current environment (like global environment, environment within function), user specified environment. also reports packages infix operators came .","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/report_inops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report Infix Operators — report_inops","text":"","code":"report_inops(env)"},{"path":"https://tony-aw.github.io/tinycodet/reference/report_inops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report Infix Operators — report_inops","text":"env optional environment give, function look infix operators.  specified, current environment (like global environment, environment within function) used.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/report_inops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report Infix Operators — report_inops","text":"data.frame. first column gives infix operator names. second column gives package operator came , NA come package.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/report_inops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report Infix Operators — report_inops","text":"","code":"report_inops() #> NULL  `%paste%` <- function(x,y)paste0(x,y)  report_inops() #>   infix_operator package #> 1        %paste%    <NA>  import_inops(\"stringi\") #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done  report_inops() #>    infix_operator package #> 1         %paste%    <NA> #> 2           %s!=% stringi #> 3          %s!==% stringi #> 4            %s$% stringi #> 5            %s*% stringi #> 6            %s+% stringi #> 7            %s<% stringi #> 8           %s<=% stringi #> 9           %s==% stringi #> 10         %s===% stringi #> 11           %s>% stringi #> 12          %s>=% stringi #> 13       %stri!=% stringi #> 14      %stri!==% stringi #> 15        %stri$% stringi #> 16        %stri*% stringi #> 17        %stri+% stringi #> 18        %stri<% stringi #> 19       %stri<=% stringi #> 20       %stri==% stringi #> 21      %stri===% stringi #> 22        %stri>% stringi #> 23       %stri>=% stringi"},{"path":"https://tony-aw.github.io/tinycodet/reference/source_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Source Specific Objects from Script — source_selection","title":"Source Specific Objects from Script — source_selection","text":"source_selection() function base R's source function, except allows placing selected objects functions current environment, instead objects.  objects selected can specified using combination following: supplying character vector exact object names select argument. supplying character vector regex patterns regex argument. supplying character vector fixed patterns fixed argument. Note source_selection() function suppress output (.e. plots, prints, messages) sourced script file.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/source_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source Specific Objects from Script — source_selection","text":"","code":"source_selection(lst, select = NULL, regex = NULL, fixed = NULL)"},{"path":"https://tony-aw.github.io/tinycodet/reference/source_selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source Specific Objects from Script — source_selection","text":"lst named list, giving arguments passed source function.  local argument included list. select character vector, giving exact names functions objects appearing script, expose current environment. regex character vector regex patterns (see about_search_regex).  give regular expressions match names functions objects appearing script, expose current environment.  example, expose following methods current environment, mymethod.numeric() mymethod.character() generic mymethod(),  one specify regex = \"^mymethod\". fixed character vector fixed patterns (see about_search_fixed).  give fixed expressions match names functions objects appearing script, expose current environment.  example, expose following methods current environment, mymethod.numeric() mymethod.character() generic mymethod(),  one specify fixed= \"mymethod\".","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/source_selection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Source Specific Objects from Script — source_selection","text":"specified objects placed current environment (like Global environment, environment within function).","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/source_selection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Source Specific Objects from Script — source_selection","text":"One can specify objects expose using arguments select, regex, fixed.  user can specify 3 , least one 3 must specified.  problem specifications overlap.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/source_selection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Source Specific Objects from Script — source_selection","text":"","code":"exprs <- expression({ helloworld = function()print(\"helloworld\") goodbyeworld <- function() print(\"goodbye world\") `%s+test%` <- function(x,y) stringi::`%s+%`(x,y) `%s*test%` <- function(x,y) stringi::`%s*%`(x,y)  mymethod <- function(x) UseMethod(\"mymethod\", x)  mymethod.numeric <- function(x)x * 2  mymethod.character <- function(x)chartr(x, old = \"a-zA-Z\", new = \"A-Za-z\") })  source_selection(list(exprs=exprs), regex = \"^mymethod\") #> Sourcing script ...  #> Done mymethod(1) #> [1] 2 mymethod(\"a\") #> [1] \"A\"   temp.fun <- function(){   source_selection(list(exprs=exprs), regex = \"^mymethod\", fixed = c(\"%\", \":=\"))   ls() # list all objects residing within the function definition } temp.fun() #> Sourcing script ...  #> Done #> [1] \"%s*test%\"           \"%s+test%\"           \"mymethod\"           #> [4] \"mymethod.character\" \"mymethod.numeric\"    temp.fun <- function(){   source_selection(list(exprs=exprs), select = c(\"helloworld\", \"goodbyeworld\"))   ls() # list all objects residing within the function definition } temp.fun() #> Sourcing script ...  #> Done #> [1] \"goodbyeworld\" \"helloworld\""},{"path":"https://tony-aw.github.io/tinycodet/reference/strcut.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut Strings — strcut_loc","title":"Cut Strings — strcut_loc","text":"strcut_loc() function cuts every string character vector around location range loc, every string cut following parts: sub-string loc; sub-string loc ; sub-string loc. location range loc usually matrix 2 columns, giving start end points pattern match.  strcut_brk() function (wrapper around stri_split_boundaries(..., tokens_only = FALSE)) cuts every string individual text breaks (like character, word, line, sentence boundaries).","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/strcut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut Strings — strcut_loc","text":"","code":"strcut_loc(str, loc)  strcut_brk(str, type = \"character\", tolist = FALSE, n = -1L, ...)"},{"path":"https://tony-aw.github.io/tinycodet/reference/strcut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut Strings — strcut_loc","text":"str string character vector. loc Either one following: result stri_locate_ith function. matrix 2 integer columns, nrow(loc)==length(str), giving location range middle part. vector length 2, giving location range middle part. type single string; either break iterator type, one character, line_break, sentence, word, custom set ICU break iteration rules. tolist logical, indicating strcut_brk return list (TRUE), matrix (FALSE, default). n see stri_split_boundaries. ... additional arguments passed stri_split_boundaries.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/strcut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut Strings — strcut_loc","text":"strcut_loc() function: character matrix length(str) rows 3 columns, every row holds following: first column contains sub-string loc[,], NA loc[,] contains NA; second column contains sub_string loc[,], uncut string loc[,] contains NA; third last column contains sub-string loc[,], NA loc[,] contains NA. strcut_brk() function: character matrix length(str) rows number columns equal maximum number pieces str cut . Empty places filled NA.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/strcut.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cut Strings — strcut_loc","text":"main difference strcut_ - functions stri_split /  strsplit, latter generally removes delimiter patterns string cutting, strcut_-functions attempt remove parts string default, attempt cut strings separate pieces. Moreover, strcut_ - functions return matrix default.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/strcut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut Strings — strcut_loc","text":"","code":"x <- rep(paste0(1:10, collapse=\"\"), 10) print(x) #>  [1] \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" #>  [6] \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" loc <- stri_locate_ith(x, 1:10, fixed = as.character(1:10)) strcut_loc(x, loc) #>       prepart     mainpart postpart     #>  [1,] \"\"          \"1\"      \"2345678910\" #>  [2,] \"1\"         \"2\"      \"345678910\"  #>  [3,] \"12\"        \"3\"      \"45678910\"   #>  [4,] \"123\"       \"4\"      \"5678910\"    #>  [5,] \"1234\"      \"5\"      \"678910\"     #>  [6,] \"12345\"     \"6\"      \"78910\"      #>  [7,] \"123456\"    \"7\"      \"8910\"       #>  [8,] \"1234567\"   \"8\"      \"910\"        #>  [9,] \"12345678\"  \"9\"      \"10\"         #> [10,] \"123456789\" \"10\"     \"\"           strcut_loc(x, c(5,5)) #>       prepart mainpart postpart #>  [1,] \"1234\"  \"5\"      \"678910\" #>  [2,] \"1234\"  \"5\"      \"678910\" #>  [3,] \"1234\"  \"5\"      \"678910\" #>  [4,] \"1234\"  \"5\"      \"678910\" #>  [5,] \"1234\"  \"5\"      \"678910\" #>  [6,] \"1234\"  \"5\"      \"678910\" #>  [7,] \"1234\"  \"5\"      \"678910\" #>  [8,] \"1234\"  \"5\"      \"678910\" #>  [9,] \"1234\"  \"5\"      \"678910\" #> [10,] \"1234\"  \"5\"      \"678910\" strcut_loc(x, c(NA, NA)) #>       prepart mainpart      postpart #>  [1,] NA      \"12345678910\" NA       #>  [2,] NA      \"12345678910\" NA       #>  [3,] NA      \"12345678910\" NA       #>  [4,] NA      \"12345678910\" NA       #>  [5,] NA      \"12345678910\" NA       #>  [6,] NA      \"12345678910\" NA       #>  [7,] NA      \"12345678910\" NA       #>  [8,] NA      \"12345678910\" NA       #>  [9,] NA      \"12345678910\" NA       #> [10,] NA      \"12345678910\" NA       strcut_loc(x, c(5, NA)) #>       prepart mainpart      postpart #>  [1,] NA      \"12345678910\" NA       #>  [2,] NA      \"12345678910\" NA       #>  [3,] NA      \"12345678910\" NA       #>  [4,] NA      \"12345678910\" NA       #>  [5,] NA      \"12345678910\" NA       #>  [6,] NA      \"12345678910\" NA       #>  [7,] NA      \"12345678910\" NA       #>  [8,] NA      \"12345678910\" NA       #>  [9,] NA      \"12345678910\" NA       #> [10,] NA      \"12345678910\" NA       strcut_loc(x, c(NA, 5)) #>       prepart mainpart      postpart #>  [1,] NA      \"12345678910\" NA       #>  [2,] NA      \"12345678910\" NA       #>  [3,] NA      \"12345678910\" NA       #>  [4,] NA      \"12345678910\" NA       #>  [5,] NA      \"12345678910\" NA       #>  [6,] NA      \"12345678910\" NA       #>  [7,] NA      \"12345678910\" NA       #>  [8,] NA      \"12345678910\" NA       #>  [9,] NA      \"12345678910\" NA       #> [10,] NA      \"12345678910\" NA        test <- \"The\\u00a0above-mentioned    features are very useful. \" %s+% \"Spam, spam, eggs, bacon, and spam. 123 456 789\" strcut_brk(test, \"line\") #>      [,1]         [,2]            [,3]        [,4]   [,5]    [,6]       #> [1,] \"The above-\" \"mentioned    \" \"features \" \"are \" \"very \" \"useful. \" #>      [,7]     [,8]     [,9]     [,10]     [,11]  [,12]    [,13]  [,14]  [,15] #> [1,] \"Spam, \" \"spam, \" \"eggs, \" \"bacon, \" \"and \" \"spam. \" \"123 \" \"456 \" \"789\" strcut_brk(test, \"word\") #>      [,1]  [,2] [,3]    [,4] [,5]        [,6]   [,7]       [,8] [,9]  [,10] #> [1,] \"The\" \" \"  \"above\" \"-\"  \"mentioned\" \"    \" \"features\" \" \"  \"are\" \" \"   #>      [,11]  [,12] [,13]    [,14] [,15] [,16]  [,17] [,18] [,19]  [,20] [,21] #> [1,] \"very\" \" \"   \"useful\" \".\"   \" \"   \"Spam\" \",\"   \" \"   \"spam\" \",\"   \" \"   #>      [,22]  [,23] [,24] [,25]   [,26] [,27] [,28] [,29] [,30]  [,31] [,32] #> [1,] \"eggs\" \",\"   \" \"   \"bacon\" \",\"   \" \"   \"and\" \" \"   \"spam\" \".\"   \" \"   #>      [,33] [,34] [,35] [,36] [,37] #> [1,] \"123\" \" \"   \"456\" \" \"   \"789\" strcut_brk(test, \"sentence\") #>      [,1]                                                #> [1,] \"The above-mentioned    features are very useful. \" #>      [,2]                                  [,3]          #> [1,] \"Spam, spam, eggs, bacon, and spam. \" \"123 456 789\" strcut_brk(test) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,] \"T\"  \"h\"  \"e\"  \" \"  \"a\"  \"b\"  \"o\"  \"v\"  \"e\"  \"-\"   \"m\"   \"e\"   \"n\"   \"t\"   #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,] \"i\"   \"o\"   \"n\"   \"e\"   \"d\"   \" \"   \" \"   \" \"   \" \"   \"f\"   \"e\"   \"a\"   #>      [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] #> [1,] \"t\"   \"u\"   \"r\"   \"e\"   \"s\"   \" \"   \"a\"   \"r\"   \"e\"   \" \"   \"v\"   \"e\"   #>      [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] #> [1,] \"r\"   \"y\"   \" \"   \"u\"   \"s\"   \"e\"   \"f\"   \"u\"   \"l\"   \".\"   \" \"   \"S\"   #>      [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] #> [1,] \"p\"   \"a\"   \"m\"   \",\"   \" \"   \"s\"   \"p\"   \"a\"   \"m\"   \",\"   \" \"   \"e\"   #>      [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] #> [1,] \"g\"   \"g\"   \"s\"   \",\"   \" \"   \"b\"   \"a\"   \"c\"   \"o\"   \"n\"   \",\"   \" \"   #>      [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] #> [1,] \"a\"   \"n\"   \"d\"   \" \"   \"s\"   \"p\"   \"a\"   \"m\"   \".\"   \" \"   \"1\"   \"2\"   #>      [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] #> [1,] \"3\"   \" \"   \"4\"   \"5\"   \"6\"   \" \"   \"7\"   \"8\"   \"9\"   strcut_brk(test, n = 1) #>      [,1]                                                                                              #> [1,] \"The above-mentioned    features are very useful. Spam, spam, eggs, bacon, and spam. 123 456 789\" strcut_brk(test, \"line\", tolist = TRUE) #> [[1]] #>  [1] \"The above-\"    \"mentioned    \" \"features \"     \"are \"          #>  [5] \"very \"         \"useful. \"      \"Spam, \"        \"spam, \"        #>  [9] \"eggs, \"        \"bacon, \"       \"and \"          \"spam. \"        #> [13] \"123 \"          \"456 \"          \"789\"           #>  strcut_brk(test, \"word\", tolist = TRUE) #> [[1]] #>  [1] \"The\"       \" \"         \"above\"     \"-\"         \"mentioned\" \"    \"      #>  [7] \"features\"  \" \"         \"are\"       \" \"         \"very\"      \" \"         #> [13] \"useful\"    \".\"         \" \"         \"Spam\"      \",\"         \" \"         #> [19] \"spam\"      \",\"         \" \"         \"eggs\"      \",\"         \" \"         #> [25] \"bacon\"     \",\"         \" \"         \"and\"       \" \"         \"spam\"      #> [31] \".\"         \" \"         \"123\"       \" \"         \"456\"       \" \"         #> [37] \"789\"       #>  strcut_brk(test, \"sentence\", tolist = TRUE) #> [[1]] #> [1] \"The above-mentioned    features are very useful. \" #> [2] \"Spam, spam, eggs, bacon, and spam. \"               #> [3] \"123 456 789\"                                       #>"},{"path":"https://tony-aw.github.io/tinycodet/reference/stri_join_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate Character Matrix Row-wise or Column-wise — stri_join_mat","title":"Concatenate Character Matrix Row-wise or Column-wise — stri_join_mat","text":"stri_join_mat() function (aliases stri_c_mat stri_paste_mat) perform row-wise (margin = 1; default) column-wise (margin = 2) joining matrix strings, thereby transforming matrix strings vector strings.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/stri_join_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate Character Matrix Row-wise or Column-wise — stri_join_mat","text":"","code":"stri_join_mat(mat, margin = 1, sep = \"\", collapse = NULL)  stri_c_mat(mat, margin = 1, sep = \"\", collapse = NULL)  stri_paste_mat(mat, margin = 1, sep = \"\", collapse = NULL)"},{"path":"https://tony-aw.github.io/tinycodet/reference/stri_join_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate Character Matrix Row-wise or Column-wise — stri_join_mat","text":"mat matrix strings margin margin strings must joined. margin = 1, elements within row matrix mat joined single string. Thus matrix 10 rows, returns vector 10 strings. margin = 2, elements within column matrix mat joined single string. Thus matrix 10 columns, returns vector 10 strings. sep, collapse stri_join.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/stri_join_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate Character Matrix Row-wise or Column-wise — stri_join_mat","text":"stri_join_mat() function, aliases, return vector strings.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/stri_join_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate Character Matrix Row-wise or Column-wise — stri_join_mat","text":"","code":"#############################################################################  # Basic example  x <- matrix(letters[1:25], ncol = 5, byrow = TRUE) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"a\"  \"b\"  \"c\"  \"d\"  \"e\"  #> [2,] \"f\"  \"g\"  \"h\"  \"i\"  \"j\"  #> [3,] \"k\"  \"l\"  \"m\"  \"n\"  \"o\"  #> [4,] \"p\"  \"q\"  \"r\"  \"s\"  \"t\"  #> [5,] \"u\"  \"v\"  \"w\"  \"x\"  \"y\"  stri_join_mat(x, margin = 1) #> [1] \"abcde\" \"fghij\" \"klmno\" \"pqrst\" \"uvwxy\"  x <- matrix(letters[1:25], ncol = 5, byrow = FALSE) print(x) #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"a\"  \"f\"  \"k\"  \"p\"  \"u\"  #> [2,] \"b\"  \"g\"  \"l\"  \"q\"  \"v\"  #> [3,] \"c\"  \"h\"  \"m\"  \"r\"  \"w\"  #> [4,] \"d\"  \"i\"  \"n\"  \"s\"  \"x\"  #> [5,] \"e\"  \"j\"  \"o\"  \"t\"  \"y\"  stri_join_mat(x, margin = 2) #> [1] \"abcde\" \"fghij\" \"klmno\" \"pqrst\" \"uvwxy\"   ############################################################################# # sorting characters in strings ====  x <- c(paste(sample(letters), collapse = \"\"), paste(sample(letters), collapse = \"\")) print(x) #> [1] \"nsmkphirjodetqgxfvulbazcyw\" \"fqteilhdyvmwaosjkrxpgbuzcn\" mat <- strcut_brk(x) rank <- stringi::stri_rank(as.vector(mat)) |>  matrix(ncol=ncol(mat)) sorted <- mat %row~% rank sorted[is.na(sorted)] <- \"\" print(sorted) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,] \"a\"  \"b\"  \"c\"  \"d\"  \"e\"  \"f\"  \"g\"  \"h\"  \"i\"  \"j\"   \"k\"   \"l\"   \"m\"   \"n\"   #> [2,] \"a\"  \"b\"  \"c\"  \"d\"  \"e\"  \"f\"  \"g\"  \"h\"  \"i\"  \"j\"   \"k\"   \"l\"   \"m\"   \"n\"   #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,] \"o\"   \"p\"   \"q\"   \"r\"   \"s\"   \"t\"   \"u\"   \"v\"   \"w\"   \"x\"   \"y\"   \"z\"   #> [2,] \"o\"   \"p\"   \"q\"   \"r\"   \"s\"   \"t\"   \"u\"   \"v\"   \"w\"   \"x\"   \"y\"   \"z\"   stri_join_mat(sorted, margin = 1) #> [1] \"abcdefghijklmnopqrstuvwxyz\" \"abcdefghijklmnopqrstuvwxyz\" stri_join_mat(sorted, margin = 2) #>  [1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\" \"ff\" \"gg\" \"hh\" \"ii\" \"jj\" \"kk\" \"ll\" \"mm\" \"nn\" \"oo\" #> [16] \"pp\" \"qq\" \"rr\" \"ss\" \"tt\" \"uu\" \"vv\" \"ww\" \"xx\" \"yy\" \"zz\"   #############################################################################  # sorting words ====  x <- c(\"2nd 3rd 1st\", \"Goodbye everyone\") print(x) #> [1] \"2nd 3rd 1st\"      \"Goodbye everyone\" mat <- strcut_brk(x, \"word\") rank <- stringi::stri_rank(as.vector(mat)) |> matrix(ncol=ncol(mat)) sorted <- mat %row~% rank sorted[is.na(sorted)] <- \"\" stri_c_mat(sorted, margin = 1, sep = \" \") # <- alias for stri_join_mat #> [1] \"    1st 2nd 3rd\"      \"  everyone Goodbye  \" stri_c_mat(sorted, margin = 2, sep = \" \") #> [1] \"   \"         \"  everyone\"  \"1st Goodbye\" \"2nd \"        \"3rd \"          #############################################################################  # randomly shuffling sentences ====  x <- c(\"Hello, who are you? Oh, really?! Cool!\", \"I don't care. But I really don't.\") print(x) #> [1] \"Hello, who are you? Oh, really?! Cool!\" #> [2] \"I don't care. But I really don't.\"      mat <- strcut_brk(x, \"sentence\") rank <- sample(1:length(mat)) |> matrix(ncol = ncol(mat)) sorted <- mat %row~% rank sorted[is.na(sorted)] <- \"\" stri_paste_mat(sorted, margin = 1) # <- another alias for stri_join_mat #> [1] \"Hello, who are you? Cool!Oh, really?! \" #> [2] \"But I really don't.I don't care. \"      stri_paste_mat(sorted, margin = 2) #> [1] \"Hello, who are you? But I really don't.\" #> [2] \"Cool!I don't care. \"                     #> [3] \"Oh, really?! \""},{"path":"https://tony-aw.github.io/tinycodet/reference/stri_locate_ith.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate \\(i^{th}\\) Pattern Occurrence or Text Boundary — stri_locate_ith","title":"Locate \\(i^{th}\\) Pattern Occurrence or Text Boundary — stri_locate_ith","text":"stri_locate_ith() function locates \\(^{th}\\) occurrence pattern string character vector.  stri_locate_ith_boundaries() function locates \\(^{th}\\) text boundary (like character, word, line, sentence boundaries).","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/stri_locate_ith.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate \\(i^{th}\\) Pattern Occurrence or Text Boundary — stri_locate_ith","text":"","code":"stri_locate_ith(str, i, ..., regex, fixed, coll, charclass)  stri_locate_ith_regex(str, pattern, i, ..., opts_regex = NULL)  stri_locate_ith_fixed(str, pattern, i, ..., opts_fixed = NULL)  stri_locate_ith_coll(str, pattern, i, ..., opts_collator = NULL)  stri_locate_ith_charclass(str, pattern, i, merge = TRUE, ...)  stri_locate_ith_boundaries(str, i, ..., opts_brkiter = NULL)"},{"path":"https://tony-aw.github.io/tinycodet/reference/stri_locate_ith.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate \\(i^{th}\\) Pattern Occurrence or Text Boundary — stri_locate_ith","text":"str string character vector. number, numeric vector length str.  Positive numbers counting left. Negative numbers counting right. .e.: stri_locate_ith(str, =1, ...)  gives position (range) first occurrence pattern. stri_locate_ith(str, =-1, ...)  gives position (range) last occurrence pattern. stri_locate_ith(str, =2, ...) gives position (range) second occurrence pattern. stri_locate_ith(str, =-2, ...)  gives position (range) second-last occurrence pattern. abs() larger number instances, first (< 0) last (> 0) instance given.  example: suppose string 3 instances pattern;  >= 3 third instance located,  <= -3 first instance located. ... arguments supplied stri_locate stri_locate_all_boundaries.  supply arguments omit_no_match get_length, already specified internally. Supplying arguments anyway result error. pattern, regex, fixed, coll, charclass character vector search patterns, stri_locate. opts_regex, opts_fixed, opts_collator, opts_brkiter named list used tune selected search engine's settings.  see stri_opts_regex, stri_opts_fixed, stri_opts_collator, stri_opts_brkiter  NULL defaults. merge logical, indicating charclass locations merged . Details:  charclass pattern type, stri_locate_ith() function gives start end consecutive characters default, just like stri_locate_all.  give start end positions single characters, much like stri_locate_first stri_locate_last, set merge = FALSE.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/stri_locate_ith.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate \\(i^{th}\\) Pattern Occurrence or Text Boundary — stri_locate_ith","text":"stri_locate_ith() function returns integer matrix two columns, giving start end positions \\(^{th}\\) matches, two NAs matches found, also two NAs str NA.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/stri_locate_ith.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Locate \\(i^{th}\\) Pattern Occurrence or Text Boundary — stri_locate_ith","text":"'stringi' functions support operations first, last, occurrences pattern.  stri_locate_ith() function allows locating \\(^{th}\\) occurrence pattern.  allows several workflows operating \\(^{th}\\) pattern occurrence.  extracting \\(^{th}\\) pattern occurrence:  Locate \\(^{th}\\) occurrence using stri_locate_ith(), extract using, example, stri_sub.  replacing/transforming \\(^{th}\\) pattern occurrence: Locate \\(^{th}\\) occurrence using stri_locate_ith(). Extract occurrence using stri_sub. Transform replace extracted sub-strings. Return transformed/replaced sub-string back, using stri_sub. See also examples section.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/stri_locate_ith.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Locate \\(i^{th}\\) Pattern Occurrence or Text Boundary — stri_locate_ith","text":"capture_groups argument regex (yet) supported!  one wishes capture \\(^{th}\\) occurrence group, first apply stri_locate_ith() entire occurrence without group capture, get matched group capture using stri_match.  See examples .","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/stri_locate_ith.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate \\(i^{th}\\) Pattern Occurrence or Text Boundary — stri_locate_ith","text":"","code":"#############################################################################  # practical example: transform regex pattern ====  # input character vector: x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\"  # locate ith (second and second-last) vowel locations: p <- rep(\"A|E|I|O|U\", 2) # vowels loc <- stri_locate_ith(x, c(2, -2), regex=p, case_insensitive=TRUE) print(loc) #>      start end #> [1,]     5   5 #> [2,]     2   2  # extract ith vowels: extr <- stringi::stri_sub(x, loc) print(extr) #> [1] \"e\" \"o\"  # transform & replace ith vowels with numbers: repl <- chartr(\"aeiou\", \"12345\", extr) stringi::stri_sub(x, loc) <- repl  # result (notice ith vowels are now numbers): print(x) #> [1] \"abcd2fghijklm\" \"n4pqrstuvwxyz\"  #############################################################################   # practical example: group-capture regex pattern ====  # input character: # first group: c(breakfast=eggs, breakfast=bacon) # second group: c(lunch=pizza, lunch=spaghetti) x <- c('breakfast=eggs;lunch=pizza',        'breakfast=bacon;lunch=spaghetti',        'no food here') # no group here print(x) #> [1] \"breakfast=eggs;lunch=pizza\"      \"breakfast=bacon;lunch=spaghetti\" #> [3] \"no food here\"                            # locate ith=2nd group: p <- '(\\\\w+)=(\\\\w+)' loc <- stri_locate_ith(x, i = 2, regex = p) print(loc) #>      start end #> [1,]    16  26 #> [2,]    17  31 #> [3,]    NA  NA  # extract ith=2nd group: extr <- stringi::stri_sub(x, loc) print(extr) #> [1] \"lunch=pizza\"     \"lunch=spaghetti\" NA                 # capture ith=2nd group: stringi::stri_match(extr, regex = p) #>      [,1]              [,2]    [,3]        #> [1,] \"lunch=pizza\"     \"lunch\" \"pizza\"     #> [2,] \"lunch=spaghetti\" \"lunch\" \"spaghetti\" #> [3,] NA                NA      NA           #############################################################################   # practical example: replace words using boundaries ====  # input character vector: x <- c(\"good morning and good night\", \"hello ladies and gentlemen\") print(x) #> [1] \"good morning and good night\" \"hello ladies and gentlemen\"   # report ith word locations: loc <- stri_locate_ith_boundaries(x, c(-3, 3), type = \"word\") print(loc) #>      start end #> [1,]    18  21 #> [2,]     7  12  # extract ith words: extr <- stringi::stri_sub(x, from=loc) print(extr) #> [1] \"good\"   \"ladies\"  # transform and replace words (notice ith words have inverted case): tf <- chartr(extr, old = \"a-zA-Z\", new = \"A-Za-z\") stringi::stri_sub(x, loc) <- tf  # result: print(x) #> [1] \"good morning and GOOD night\" \"hello LADIES and gentlemen\"    #############################################################################  # find pattern ====  extr <- stringi::stri_sub(x, from=loc) repl <- chartr(extr, old = \"a-zA-Z\", new = \"A-Za-z\") stringi::stri_sub_replace(x, loc, replacement=repl) #> [1] \"good morning and good night\" \"hello ladies and gentlemen\"   # simple pattern ====  x <- rep(paste0(1:10, collapse=\"\"), 10) print(x) #>  [1] \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" #>  [6] \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" \"12345678910\" out <- stri_locate_ith(x, 1:10, regex = as.character(1:10)) cbind(1:10, out) #>          start end #>  [1,]  1     1   1 #>  [2,]  2     2   2 #>  [3,]  3     3   3 #>  [4,]  4     4   4 #>  [5,]  5     5   5 #>  [6,]  6     6   6 #>  [7,]  7     7   7 #>  [8,]  8     8   8 #>  [9,]  9     9   9 #> [10,] 10    10  11   x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- rep(\"a|e|i|o|u\",2) out <- stri_locate_ith(x, c(-1, 1), regex=p) print(out) #>      start end #> [1,]     9   9 #> [2,]     2   2 substr(x, out[,1], out[,2]) #> [1] \"i\" \"o\"   #############################################################################  # ignore case pattern ====   x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- rep(\"A|E|I|O|U\", 2) out <- stri_locate_ith(x, c(1, -1), regex=p, case_insensitive=TRUE) substr(x, out[,1], out[,2]) #> [1] \"a\" \"u\"   #############################################################################  # multi-character pattern ====  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" # multi-character pattern: p <- rep(\"AB\", 2) out <- stri_locate_ith(x, c(1, -1), regex=p, case_insensitive=TRUE) print(out) #>      start end #> [1,]     1   2 #> [2,]    NA  NA substr(x, out[,1], out[,2]) #> [1] \"ab\" NA      #############################################################################  # Replacement transformation using stringi ====  x <- c(\"hello world\", \"goodbye world\") loc <- stri_locate_ith(x, c(1, -1), regex=\"a|e|i|o|u\") extr <- stringi::stri_sub(x, from=loc) repl <- chartr(extr, old = \"a-zA-Z\", new = \"A-Za-z\") stringi::stri_sub_replace(x, loc, replacement=repl) #> [1] \"hEllo world\"   \"goodbye wOrld\"   #############################################################################  # Boundaries ====  test <- c( paste0(\"The\\u00a0above-mentioned    features are very useful. \",       \"Spam, spam, eggs, bacon, and spam. 123 456 789\"),       \"good morning, good evening, and good night\"       ) loc <- stri_locate_ith_boundaries(test, i = c(1, -1), type = \"word\") stringi::stri_sub(test, from=loc) #> [1] \"The\"   \"night\""},{"path":"https://tony-aw.github.io/tinycodet/reference/str_arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"String Arithmetic Operators — str_arithmetic","title":"String Arithmetic Operators — str_arithmetic","text":"String arithmetic operators.   x %s+% y  operator exported 'stringi', concatenates character vectors x y.   x %s-% p  operator removes character/pattern defined p x.   x %s*% n  operator exported 'stringi', duplicates string x n times, concatenates results.   x %s/% p  operator counts often character/pattern defined p occurs element x.   x %s//% brk  operator counts often text boundary specified list brk occurs element x.   e1 %s$% e2  operator exported 'stringi', provides access stri_sprintf form infix operator.   x %ss% p  operator splits strings x delimiter character/pattern defined p, removes p process.  cutting strings text boundaries, around location, see strcut_brk strcut_loc.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/str_arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String Arithmetic Operators — str_arithmetic","text":"","code":"x %s-% p  x %s/% p  x %s//% brk  x %ss% p"},{"path":"https://tony-aw.github.io/tinycodet/reference/str_arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String Arithmetic Operators — str_arithmetic","text":"x string character vector. p either list 'stringi' arguments (see s_pattern), else character vector length x length 1 regular expressions. brk list arguments send stri_count_boundaries.  see also stri_opts_brkiter.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/str_arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String Arithmetic Operators — str_arithmetic","text":"%s+%, %s-%, %s*% operators return character vector length x. %s/% %s//% return integer vector length x. %s$% operator returns character vector. %ss% operator returns list split strings - , simplify = TRUE / simplify = NA, returns matrix split strings.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/str_arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String Arithmetic Operators — str_arithmetic","text":"","code":"x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" y <- c(\"a\", \"b\") p <- rep(\"a|e|i|o|u\", 2) # same as p <- list(regex=rep(\"a|e|i|o|u\", 2)) n <- c(3, 2)  x %s+% y # = paste0(x,y) #> [1] \"abcdefghijklma\" \"nopqrstuvwxyzb\" x %s-% p # remove all vowels from x #> [1] \"bcdfghjklm\"  \"npqrstvwxyz\" x %s*% n #> [1] \"abcdefghijklmabcdefghijklmabcdefghijklm\" #> [2] \"nopqrstuvwxyznopqrstuvwxyz\"              x %s/% p # count how often vowels appear in each string of vector x #> [1] 3 2 x %ss% p # split x around vowels, removing the vowels in the process #> [[1]] #> [1] \"\"     \"bcd\"  \"fgh\"  \"jklm\" #>  #> [[2]] #> [1] \"n\"     \"pqrst\" \"vwxyz\" #>  x %ss% s_regex(p, simplify = NA) # same as above, but in matrix form #>      [,1] [,2]    [,3]    [,4]   #> [1,] \"\"   \"bcd\"   \"fgh\"   \"jklm\" #> [2,] \"n\"  \"pqrst\" \"vwxyz\" NA      test <- c( paste0(\"The\\u00a0above-mentioned    features are very useful. \", \"Spam, spam, eggs, bacon, and spam. 123 456 789\"), \"good morning, good evening, and good night\" ) test %s//% list(type = \"character\") #> [1] 95 42   x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" y <- \"a\" # pattern that ignores case: p <- list(regex=rep(\"A|E|I|O|U\", 2), case_insensitive = TRUE) n <- c(2, 3)  x %s+% y # =paste0(x,y) #> [1] \"abcdefghijklma\" \"nopqrstuvwxyza\" x %s-% p # remove all vowels from x #> [1] \"bcdfghjklm\"  \"npqrstvwxyz\" x %s*% n #> [1] \"abcdefghijklmabcdefghijklm\"              #> [2] \"nopqrstuvwxyznopqrstuvwxyznopqrstuvwxyz\" x %s/% p # count how often vowels appears in each string of vector x. #> [1] 3 2  x <- c(paste(letters, collapse = \", \"), paste(LETTERS, collapse = \", \")) print(x) #> [1] \"a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\" #> [2] \"A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z\" x %ss% \", \" #> [[1]] #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" #>  #> [[2]] #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" #> [20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\" #>  t(x %ss% s_fixed(\", \", simplify = NA)) #>       [,1] [,2] #>  [1,] \"a\"  \"A\"  #>  [2,] \"b\"  \"B\"  #>  [3,] \"c\"  \"C\"  #>  [4,] \"d\"  \"D\"  #>  [5,] \"e\"  \"E\"  #>  [6,] \"f\"  \"F\"  #>  [7,] \"g\"  \"G\"  #>  [8,] \"h\"  \"H\"  #>  [9,] \"i\"  \"I\"  #> [10,] \"j\"  \"J\"  #> [11,] \"k\"  \"K\"  #> [12,] \"l\"  \"L\"  #> [13,] \"m\"  \"M\"  #> [14,] \"n\"  \"N\"  #> [15,] \"o\"  \"O\"  #> [16,] \"p\"  \"P\"  #> [17,] \"q\"  \"Q\"  #> [18,] \"r\"  \"R\"  #> [19,] \"s\"  \"S\"  #> [20,] \"t\"  \"T\"  #> [21,] \"u\"  \"U\"  #> [22,] \"v\"  \"V\"  #> [23,] \"w\"  \"W\"  #> [24,] \"x\"  \"X\"  #> [25,] \"y\"  \"Y\"  #> [26,] \"z\"  \"Z\""},{"path":"https://tony-aw.github.io/tinycodet/reference/str_subset_ops.html","id":null,"dir":"Reference","previous_headings":"","what":"String Subsetting Operators — str_subset_ops","title":"String Subsetting Operators — str_subset_ops","text":"String subsetting operators.  x %sget% ss  operator gets certain number first last characters every string character vector x.  x %strim% ss  operator trims certain number first last characters every string character vector x.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/str_subset_ops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String Subsetting Operators — str_subset_ops","text":"","code":"x %sget% ss  x %strim% ss"},{"path":"https://tony-aw.github.io/tinycodet/reference/str_subset_ops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String Subsetting Operators — str_subset_ops","text":"x character vector. ss vector length 2, matrix 2 columns nrow(ss)==length(x). object ss consist entirely non-negative non-missing integers, coerce-able integers. (thus negative integers, missing values allowed; decimal numbers converted integers).  first element/column ss gives number characters counting left side extracted/removed x.  second element/column ss gives number characters counting right side extracted/removed x.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/str_subset_ops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String Subsetting Operators — str_subset_ops","text":"x %sget% ss  operator gives certain number first last characters character vector x.  x %strim% ss  operator removes certain number first last characters character vector x.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/str_subset_ops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"String Subsetting Operators — str_subset_ops","text":"operators serve way provide straight-forward string sub-setting.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/str_subset_ops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String Subsetting Operators — str_subset_ops","text":"","code":"x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(2,3) x %sget% ss #> [1] \"abklm\" \"noxyz\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(1,0) x %sget% ss #> [1] \"a\" \"n\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(2,3) x %strim% ss #> [1] \"cdefghij\" \"pqrstuvw\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" ss <- c(1,0) x %strim% ss #> [1] \"bcdefghijklm\" \"opqrstuvwxyz\""},{"path":"https://tony-aw.github.io/tinycodet/reference/str_truth.html","id":null,"dir":"Reference","previous_headings":"","what":"'stringi' Pattern Detection Operators — str_truth","title":"'stringi' Pattern Detection Operators — str_truth","text":"x %s{}% p operator checks every string character vector x pattern defined p present.  x %s!{}% p operator checks every string character vector x pattern defined p present.  string ()equality operators, see %s==% 'stringi' package.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/str_truth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'stringi' Pattern Detection Operators — str_truth","text":"","code":"x %s{}% p  x %s!{}% p"},{"path":"https://tony-aw.github.io/tinycodet/reference/str_truth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'stringi' Pattern Detection Operators — str_truth","text":"x string character vector. p either list 'stringi' arguments (see s_pattern), else character vector length x length 1 regular expressions.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/str_truth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'stringi' Pattern Detection Operators — str_truth","text":"x %s{}% p x %s!{}% p operators return logical vectors, TRUE indicates pattern found, FALSE indicates pattern found.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/str_truth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'stringi' Pattern Detection Operators — str_truth","text":"","code":"# simple pattern ====  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %s{}% \"a\" #> [1]  TRUE FALSE x %s!{}% \"a\" #> [1] FALSE  TRUE which(x %s{}% \"a\") #> [1] 1 which(x %s!{}% \"a\") #> [1] 2 x[x %s{}% \"a\"] #> [1] \"abcdefghijklm\" x[x %s!{}% \"a\"] #> [1] \"nopqrstuvwxyz\" x[x %s{}% \"a\"] <- 1 x[x %s!{}% \"a\"] <- 1 print(x) #> [1] \"1\" \"1\"  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) x %s{}% \"1\" #> [1] FALSE FALSE x %s!{}% \"1\" #> [1] TRUE TRUE which(x %s{}% \"1\") #> integer(0) which(x %s!{}% \"1\") #> [1] 1 2 x[x %s{}% \"1\"] #> character(0) x[x %s!{}% \"1\"] #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x[x %s{}% \"1\"] <- \"a\" x[x %s!{}% \"1\"] <- \"a\" print(x) #> [1] \"a\" \"a\"   #############################################################################  # ignore case pattern ====   x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- list(regex = c(\"A\", \"A\"), case_insensitive=TRUE) x %s{}% p #> [1]  TRUE FALSE x %s!{}% p #> [1] FALSE  TRUE which(x %s{}% p) #> [1] 1 which(x %s!{}% p) #> [1] 2 x[x %s{}% p] #> [1] \"abcdefghijklm\" x[x %s!{}% p] #> [1] \"nopqrstuvwxyz\" x[x %s{}% p] <- \"hello\" x[x %s!{}% p] <- \"hello\" print(x) #> [1] \"hello\" \"hello\"   #############################################################################  # multi-character pattern ====  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- list(regex = rep(\"AB\", 2), case_insensitive=TRUE) x %s{}% p #> [1]  TRUE FALSE x %s!{}% p #> [1] FALSE  TRUE which(x %s{}% p) #> [1] 1 which(x %s!{}% p) #> [1] 2 x[x %s{}% p] #> [1] \"abcdefghijklm\" x[x %s!{}% p] #> [1] \"nopqrstuvwxyz\" x[x %s{}% p] <- \"CD\" x[x %s!{}% p] <- \"CD\" print(x) #> [1] \"CD\" \"CD\""},{"path":"https://tony-aw.github.io/tinycodet/reference/subset_if.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Sub-setting and In-place Replacer of Unreal Values — subset_if","title":"Conditional Sub-setting and In-place Replacer of Unreal Values — subset_if","text":"x %[]% cond operator selects elements vector/matrix/array x, result cond(x) returns TRUE.  x %[!]% cond operator selects elements vector/matrix/array x, result cond(x) returns FALSE.  x %unreal =% repl operator modifies unreal (NA, NaN, Inf, -Inf) values x replacement value repl.  Thus, x %unreal =% repl,  , x[.na(x)|.nan(x)|.infinite(x)] <- repl","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/subset_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Sub-setting and In-place Replacer of Unreal Values — subset_if","text":"","code":"x %[if]% cond  x %[!if]% cond  x %unreal =% repl"},{"path":"https://tony-aw.github.io/tinycodet/reference/subset_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Sub-setting and In-place Replacer of Unreal Values — subset_if","text":"x vector, matrix, array. cond (possibly anonymous) function returns logical vector length/dimensions x.  example: \\(x)x>0. repl replacement value.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/subset_if.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional Sub-setting and In-place Replacer of Unreal Values — subset_if","text":"x %[]% cond x %[!]% cond operators: subset_if - operators return vector selected elements.  x %unreal =% repl operator: x %unreal =% repl operator return value: -place modifier, thus modifies x directly. object x modified NA, NaN, Inf, -Inf elements replaced repl.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/subset_if.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Sub-setting and In-place Replacer of Unreal Values — subset_if","text":"","code":"x <- c(-10:9, NA, NA) object_with_very_long_name <- matrix(x, ncol=2) print(object_with_very_long_name) #>       [,1] [,2] #>  [1,]  -10    1 #>  [2,]   -9    2 #>  [3,]   -8    3 #>  [4,]   -7    4 #>  [5,]   -6    5 #>  [6,]   -5    6 #>  [7,]   -4    7 #>  [8,]   -3    8 #>  [9,]   -2    9 #> [10,]   -1   NA #> [11,]    0   NA object_with_very_long_name %[if]% \\(x)x %in% 1:10 #> [1] 1 2 3 4 5 6 7 8 9 object_with_very_long_name %[!if]% \\(x)x %in% 1:10 #>  [1] -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0  NA  NA  x <- c(1:9, NA, NaN, Inf) print(x) #>  [1]   1   2   3   4   5   6   7   8   9  NA NaN Inf x %unreal =% 0 # same as x[is.na(x)|is.nan(x)|is.infinite(x)] <- 0 print(x) #>  [1] 1 2 3 4 5 6 7 8 9 0 0 0"},{"path":"https://tony-aw.github.io/tinycodet/reference/s_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Pattern Specifications for String Related Infix Operators — s_pattern","title":"Pattern Specifications for String Related Infix Operators — s_pattern","text":"%s-%, %s/%, %ss% operators, well string detection operators (str_truth), perform pattern matching purpose, pattern given right hand side.  character vector string given right hand side, interpreted case-sensitive regex patterns 'stringi'.  Instead giving string character vector regex patterns, one can also supply list specify exactly pattern interpreted. list use exact argument convention 'stringi'.  example: list(regex=p, case_insensitive=FALSE, ...) list(fixed=p, ...) list(coll=p, ...) list(charclass=p, ...) arguments list simply passed appropriate functions 'stringi'.  example:   counts often regular expression specified character vector p occurs x, whereas following,   , except uses fixed (.e. literal) expression, distinguish upper case lower case characters.  'tinycodet' adds convenience functions based stri_opts_ - functions 'stringi': s_regex(p, ...) equivalent list(regex = p, ...) s_fixed(p, ...) equivalent list(fixed = p, ...) s_coll(p, ...) equivalent list(coll = p, ...) s_chrcls(p, ...) equivalent list(charclass = p, ... ) ellipsis (...) passed appropriate 'stringi'-functions matches arguments.  'stringi' infix operators start \"%s\", though alias starting \"%stri\". analogy , functions start \"s_\" rather \"stri_\", meant infix operators .","code":"x %s/% p x %s/% list(fixed=p, case_insensitive=TRUE)"},{"path":"https://tony-aw.github.io/tinycodet/reference/s_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pattern Specifications for String Related Infix Operators — s_pattern","text":"","code":"s_regex(   p,   case_insensitive,   comments,   dotall,   multiline,   time_limit,   stack_limit,   ... )  s_fixed(p, case_insensitive, overlap, ...)  s_coll(   p,   locale,   strength,   alternate_shifted,   french,   uppercase_first,   case_level,   numeric,   normalization,   ... )  s_chrcls(p, ...)"},{"path":"https://tony-aw.github.io/tinycodet/reference/s_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pattern Specifications for String Related Infix Operators — s_pattern","text":"p character vector giving pattern search . case_insensitive see stri_opts_regex stri_opts_fixed. comments, dotall, multiline see stri_opts_regex. time_limit, stack_limit see stri_opts_regex. ... additional arguments part stri_opts - functions passed .  example: max_count overlap see stri_opts_fixed. locale, strength, alternate_shifted see stri_opts_collator. french, normalization, numeric see stri_opts_collator. uppercase_first, case_level see stri_opts_collator.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/s_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pattern Specifications for String Related Infix Operators — s_pattern","text":"list arguments passed appropriate infix operators.","code":""},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/s_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pattern Specifications for String Related Infix Operators — s_pattern","text":"","code":"x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- rep(\"a|e|i|o|u\", 2) # same as p <- list(regex=rep(\"a|e|i|o|u\", 2)) x %s/% p # count how often vowels appear in each string of vector x. #> [1] 3 2  x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" x %s/% list(regex = rep(\"A|E|I|O|U\", 2), case_insensitive = TRUE) #> [1] 3 2 x %s/% s_regex(rep(\"A|E|I|O|U\", 2), case_insensitive = TRUE) #> [1] 3 2   x <- c(paste0(letters[1:13], collapse=\"\"), paste0(letters[14:26], collapse=\"\")) print(x) #> [1] \"abcdefghijklm\" \"nopqrstuvwxyz\" p <- list(fixed = c(\"A\", \"A\"), case_insensitive=TRUE) x %s{}% p #> [1]  TRUE FALSE x %s!{}% p #> [1] FALSE  TRUE p <- s_fixed(c(\"A\", \"A\"), case_insensitive=TRUE) x %s{}% p #> [1]  TRUE FALSE x %s!{}% p #> [1] FALSE  TRUE"},{"path":"https://tony-aw.github.io/tinycodet/reference/transform_if.html","id":null,"dir":"Reference","previous_headings":"","what":"The transform_if function — transform_if","title":"The transform_if function — transform_if","text":"transform_if() function transforms object x, based logical result (TRUE, FALSE, NA) condition function cond(x) logical vector cond, : every value cond(x)==TRUE / cond==TRUE, function yes(x) run scalar yes returned. every value cond(x)==FALSE / cond==FALSE, function (x) run scalar returned. every value cond(x)==NA / cond==NA, function (x) run scalar returned. ifelse-like function yes vectors, see kit::iif.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/transform_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The transform_if function — transform_if","text":"","code":"transform_if(x, cond, yes = function(x) x, no = function(x) x, other = NA)"},{"path":"https://tony-aw.github.io/tinycodet/reference/transform_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The transform_if function — transform_if","text":"x vector, matrix, array. cond either object class logical length x,  (possibly anonymous) function returns object class logical length x.  example: \\(x)x>0. yes (possibly anonymous) transformation function use function cond(x)==TRUE / logical cond==TRUE.  Alternatively, one can also supply atomic scalar.  argument yes specified, defaults \\(x)x. (possibly anonymous) transformation function use function cond(x)==FALSE / logical cond==FALSE.  Alternatively, one can also supply atomic scalar.  argument specified, defaults \\(x)x. (possibly anonymous) transformation function use function cond(x) / logical cond returns NA.  Alternatively, one can also supply atomic scalar.  argument specified, defaults NA.  Note function  (x) run scalar returned function cond(x) logical cond NA, necessarily x NA.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/transform_if.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The transform_if function — transform_if","text":"transformed vector, matrix, array (attributes conserved).","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/transform_if.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The transform_if function — transform_if","text":"careful coercion! example following code:   returns:   due character vector given 2 incompatible classes.","code":"x <- c(\"a\", \"b\") transform_if(x, \\(x)x==\"a\", as.numeric, as.logical) [1] NA NA"},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/transform_if.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The transform_if function — transform_if","text":"","code":"x <- c(-10:9, NA, NA) object <- matrix(x, ncol=2) attr(object, \"helloworld\") <- \"helloworld\" print(object) #>       [,1] [,2] #>  [1,]  -10    1 #>  [2,]   -9    2 #>  [3,]   -8    3 #>  [4,]   -7    4 #>  [5,]   -6    5 #>  [6,]   -5    6 #>  [7,]   -4    7 #>  [8,]   -3    8 #>  [9,]   -2    9 #> [10,]   -1   NA #> [11,]    0   NA #> attr(,\"helloworld\") #> [1] \"helloworld\" y <- 0 z <- 1000  object |> transform_if(\\(x)x>y, log, \\(x)x^2, \\(x)-z) #>       [,1]          [,2] #>  [1,]  100     0.0000000 #>  [2,]   81     0.6931472 #>  [3,]   64     1.0986123 #>  [4,]   49     1.3862944 #>  [5,]   36     1.6094379 #>  [6,]   25     1.7917595 #>  [7,]   16     1.9459101 #>  [8,]    9     2.0794415 #>  [9,]    4     2.1972246 #> [10,]    1 -1000.0000000 #> [11,]    0 -1000.0000000 #> attr(,\"helloworld\") #> [1] \"helloworld\" object |> transform_if(object > y, log, \\(x)x^2, -z) # same as previous line #>       [,1]          [,2] #>  [1,]  100     0.0000000 #>  [2,]   81     0.6931472 #>  [3,]   64     1.0986123 #>  [4,]   49     1.3862944 #>  [5,]   36     1.6094379 #>  [6,]   25     1.7917595 #>  [7,]   16     1.9459101 #>  [8,]    9     2.0794415 #>  [9,]    4     2.1972246 #> [10,]    1 -1000.0000000 #> [11,]    0 -1000.0000000 #> attr(,\"helloworld\") #> [1] \"helloworld\""},{"path":"https://tony-aw.github.io/tinycodet/reference/x.import.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for the tinycodet package import system — x.import","title":"Helper functions for the tinycodet package import system — x.import","text":"help.import() function finds help file functions topics, including exposed functions/operators well functions package alias object.  .tinyimport() function checks alias object exposed function class tinyimport; .e. object produced import_as, import_inops, import_LL function.  attr.import() function gets one special attribute(s) alias object returned import_as.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/x.import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for the tinycodet package import system — x.import","text":"","code":"help.import(..., i, alias)  is.tinyimport(x)  attr.import(alias, which = NULL)"},{"path":"https://tony-aw.github.io/tinycodet/reference/x.import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for the tinycodet package import system — x.import","text":"... arguments passed help. either one following: function (use back-ticks function infix operator). Examples:  myfun , `%operator%` , myalias.$some_function . function, alias argument ignored. string giving function name topic (.e. \"myfun\", \"thistopic\"). string, argument alias must specified also. alias alias object created import_as function. x object/function tested. attributes list. NULL, attributes returned.  Possibilities: \"pkgs\", \"conflicts\", \"args\", \"ordered_object_names\".","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/x.import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for the tinycodet package import system — x.import","text":"help.import(): Opens appropriate help page.  .tinyimport(): Returns TRUE function produced import_as, import_inops, import_LL, returns FALSE .  attr.import(alias, = NULL): special attributes given alias object returned list.  attr.import(alias, = \"pkgs\"): Returns list 3 elements: packages_order: character vector package names, giving packages order imported alias object. main_package: string giving name main package. Re-exported functions, present, taken together main package. re_exports.pkgs: character vector package names, giving packages re-exported functions main package taken. attr.import(alias, = \"conflicts\"): order packages imported alias object (see attribute pkgs$packages_order) matters: Functions later named packages overwrite earlier named packages, case conflicts. \"conflicts\" attribute returns data.frame showing exactly functions overwrite functions earlier named packages, \"win\" conflicts.  attr.import(alias, = \"args\"): Returns list input arguments. arguments supplied import_as alias object question created.  attr.import(alias, = \"ordered_object_names\"): Gives names objects alias, order imported. conflicting objects, last imported ones used ordering. Note argument re_exports TRUE, re-exported functions imported main package imported, thus changing order slightly.","code":""},{"path":"https://tony-aw.github.io/tinycodet/reference/x.import.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper functions for the tinycodet package import system — x.import","text":"help.import(...):  use topic / package / alias argument sets together. either one set .  example:","code":"import_as(~ mr., \"magrittr\") import_inops(mr.) help.import(i = mr.$add) help.import(i = `%>%`) help.import(i = \"add\", alias = mr.) help.import(topic = \"%>%\", package = \"magrittr\") help.import(\"%>%\", package = \"magrittr\") # same as previous line"},{"path":[]},{"path":"https://tony-aw.github.io/tinycodet/reference/x.import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper functions for the tinycodet package import system — x.import","text":"","code":"import_as(~ to., \"tinycodet\") #> Importing packages and registering methods... #> Done #> You can now access the functions using `to.$` #> For conflicts report, packages order, and other attributes, run `attr.import(to.)`  import_inops(to.) #> Checking for conflicting infix operators in the current environment... #> Placing infix operators in current environment... #> Done `%s==%` <- stringi::`%s==%`  is.tinyimport(to.) # returns TRUE #> [1] TRUE is.tinyimport(`%:=%`) # returns TRUE #> [1] TRUE is.tinyimport(`%s==%`) # returns FALSE: not imported by tinycodet import system #> [1] FALSE  attr.import(to., which = \"conflicts\") #>                  package winning_conflicts #> 1 tinycodet + re-exports"},{"path":"https://tony-aw.github.io/tinycodet/news/index.html","id":"tinycodet-039-under-development","dir":"Changelog","previous_headings":"","what":"tinycodet 0.3.9 (Under Development)","title":"tinycodet 0.3.9 (Under Development)","text":"Clarified documentation %col~% %row~% strip attributes (really made clear documentation ). Clarified usage merge = FALSE pattern charclass, documentation stri_locate_ith() function. Clarified documentation locked objects protected modification reference. Clarified documentation ‘stringi’ pattern-searching infix operators p argument can also character vector length 1. Clarified stri_locate_ith() documentation one pass capture_groups argument; also clarified capture ith group using stri_locate_ith. Removed redundant stringi:: call example code import_LL(). help file s_pattern functions now actually titled “s_pattern”. Cleaned internal code . help.import() function now gives error neither topic/package /alias supplied, instead just silently nothing. messages returned import_as() aliasing packages now slightly less verbose: removed line “Methods work like normally”, replaced line “Importing packages …” “Importing packages registering methods…”. strcut_brk() function now includes tolist argument return list. Moreover, n argument may now also specified (n = -1L default). Improved safety malformed condition transform_if() function. Added dependency: ‘collapse’ now added dependency, improved speed. dependencies added, likely added. New Feature: Added %ss% collection string arithmetic operators. Added tests new operator also. Optimization: Managed optimise stri_locate_ith() even . Optimised ‘subset_if’ operators bit . Also optimised %n&%, %=strtype% operators bit . Argument API change: s_pattern functions now wrap additional arguments list user, case using vector arguments, preventing potential confusion. Argument API change: now also explicit stri_locate_ith_[regex/fixed/coll/charclass] functions, using argument conventions rest ‘stringi’. Argument API change: type argument stri_locate_ith_boundaries() now mandatory argument; one can now also supply stri_opts_brikiter(), keep consistent rest ‘stringi’. Tests: Improved tests s_pattern operators. Added tests stri_locate_ith() using argument merge = FALSE. Added error check tests help.import(). Added tests unequal vector sizes logic operators. Added tests empty condition subsets transform_if(). Added tests new %ss% infix operator. Bug fix: small bug s_coll() worked properly assigned object (usual), called directly (like nested inside function). now fixed.","code":""},{"path":"https://tony-aw.github.io/tinycodet/news/index.html","id":"tinycodet-030","dir":"Changelog","previous_headings":"","what":"tinycodet 0.3.0","title":"tinycodet 0.3.0","text":"CRAN release: 2023-12-11 Expanded import system documentation. Also tweaked documentation import_as() make slightly clearer. Expanded documentation decimal_truth operators. import_as() now allow 10 packages loaded single alias, prevent abusive usage import_as(). import system now tiny safety checks, including checks widely known meta-packages (“fastverse”). pkg_get_deps() function now also shared_tidy argument ignore shared ‘tidyverse’ libraries (‘rlang’, ‘lifecycle’, ‘cli’, ‘glue’, ‘withr’). Also changed default values recom, rstudioapi arguments. Added pkg_get_deps_minimal() function. Also changed default arguments pkg_get_deps(). Changed error message wrong extension specifications: replaced “actual reverse-dependencies” “actual extensions”. Changed usage word “load” “import” import system documentation, avoid confusion concept loading package. Added pversion_ functions help checking package versions. Removed “versions” attribute alias objects, favour aforementioned pversion_ functions. Argument name change: import_as() function, changed argument name loadorder import_order, avoid confusion concept loading package. Tests: Added tests. Optimization: Minor optimizations import_* functions transform_if(). Bug fix: Fixed bug pkg_get_deps() didn’t properly ignore recommended R-packages recom = FALSE.","code":""},{"path":"https://tony-aw.github.io/tinycodet/news/index.html","id":"tinycodet-022","dir":"Changelog","previous_headings":"","what":"tinycodet 0.2.2","title":"tinycodet 0.2.2","text":"CRAN release: 2023-11-25 Small tweak pdf manual. Replaced incorrect uses word “class” “type” atomic type casting help file. Improved performance stri_join_mat(), produced better examples help file website. Fixed incorrect regex usage one examples.","code":""},{"path":"https://tony-aw.github.io/tinycodet/news/index.html","id":"tinycodet-02","dir":"Changelog","previous_headings":"","what":"tinycodet 0.2","title":"tinycodet 0.2","text":"CRAN release: 2023-11-01 Removed changed “functions” title, description, introduction help page, website, ‘tinycodet’ actually turned somewhat larger anticipated. Fixed latex issue pdf file generation users using R version < 4.2.0 Mac OS. Changed @name @rdname parameters tinycodet overview help files, get top pdf file. Removed sentence “Note recommended R-packages actually installed system taken consideration” pkgs help file, longer applicable (list recommended R packages hard coded). Expanded ‘tinycodet_import’ help page info.","code":""},{"path":"https://tony-aw.github.io/tinycodet/news/index.html","id":"tinycodet-0106","dir":"Changelog","previous_headings":"","what":"tinycodet 0.1.0.6","title":"tinycodet 0.1.0.6","text":"CRAN release: 2023-10-12 Replaced usage installed.packages() %installed % operator find.package(). Also added sentence “pkgs %installed % lib.loc even load package, user can safely use without fearing unwanted side-effects.” help page. Replaced usage installed.packages() manually specified character vector R scripts/functions “internal_functions.R”, “import_misc.R”, “import_inops.R”, “x.import.R”. Replaced “” “” help page “tinycodet_import”, set condition examples. Re-implemented fake packages, time preventing false positives using tip Duncan Murdoch.","code":""},{"path":"https://tony-aw.github.io/tinycodet/news/index.html","id":"tinycodet-0105","dir":"Changelog","previous_headings":"","what":"tinycodet 0.1.0.5","title":"tinycodet 0.1.0.5","text":"fake packages now tested GitHub page, package folder , prevent false positives CRAN checks.","code":""},{"path":"https://tony-aw.github.io/tinycodet/news/index.html","id":"tinycodet-0104","dir":"Changelog","previous_headings":"","what":"tinycodet 0.1.0.4","title":"tinycodet 0.1.0.4","text":"Removed last sentence Description DESCRIPTION file, contained word “vectorized”, “vectorised” “vectorized” cause CRAN checks complain.","code":""},{"path":"https://tony-aw.github.io/tinycodet/news/index.html","id":"tinycodet-0103","dir":"Changelog","previous_headings":"","what":"tinycodet 0.1.0.3","title":"tinycodet 0.1.0.3","text":"Changed spellings word “vectorised”, “vectorized”, despite clear Language field.","code":""},{"path":"https://tony-aw.github.io/tinycodet/news/index.html","id":"tinycodet-0102","dir":"Changelog","previous_headings":"","what":"tinycodet 0.1.0.2","title":"tinycodet 0.1.0.2","text":"Corrected ‘Authors@R’ field DESCRIPTION file. Added ‘Language: en-gb’ DESCRIPTION file. Removed “Maintainer” field, can auto-generated ‘Authors@R’.","code":""},{"path":"https://tony-aw.github.io/tinycodet/news/index.html","id":"tinycodet-0101","dir":"Changelog","previous_headings":"","what":"tinycodet 0.1.0.1","title":"tinycodet 0.1.0.1","text":"Corrected LICENSE file.","code":""},{"path":"https://tony-aw.github.io/tinycodet/news/index.html","id":"tinycodet-01","dir":"Changelog","previous_headings":"","what":"tinycodet 0.1","title":"tinycodet 0.1","text":"Initial release.","code":""}]
