)  |> errorfun()
form <- as.formula(paste(i, "~ foo"))
expect_error(
import_int(form),
pattern = pattern
)  |> errorfun()
enumerate <- enumerate + 4
}
# package is core R ====
basepkgs <- c(
"base", "compiler", "datasets", "grDevices", "graphics", "grid", "methods",
"parallel", "splines", "stats", "stats4", "tcltk", "tools",
"translations", "utils"
)
pattern <- 'The following "packages" are base/core R, which is not allowed:'
for(i in basepkgs) {
expect_error(
import_as(~stri., i),
pattern = pattern
) |> errorfun()
expect_error(
import_inops(i),
pattern = pattern
)  |> errorfun()
expect_error(
import_inops(unexpose = i),
pattern = pattern
)  |> errorfun()
expect_error(
import_LL(i, "foo"),
pattern = pattern
)  |> errorfun()
form <- as.formula(paste(i, "~ foo"))
expect_error(
import_int(form),
pattern = pattern
)  |> errorfun()
enumerate <- enumerate + 4
}
# set-up ====
enumerate <- 0 # to count number of tests performed using iterations in loops
loops <- 0 # to count number of loops
errorfun <- function(tt) {
if(isTRUE(tt)) print(tt)
if(isFALSE(tt)) stop(print(tt))
}
# package not installed ====
pattern <- "The following packages are not installed"
expect_error(
import_as(~stri., "stringi", lib.loc = c("foo1", "foo2")),
pattern = pattern
)
expect_error(
import_inops("stringi", lib.loc = c("foo1", "foo2")),
pattern = pattern
)
expect_error(
import_inops(unexpose = "stringi", lib.loc = c("foo1", "foo2")),
pattern = pattern
)
expect_error(
import_LL("stringi", lib.loc = c("foo1", "foo2"), selection = "foo"),
pattern = pattern
)
expect_error(
import_int(stringi ~ foo, lib.loc = c("foo1", "foo2")),
pattern = pattern
)
expect_error(
pversion_check4mismatch("foo", lib.loc = c("foo1", "foo2")),
pattern = pattern
)
expect_error(
pversion_report("foo", lib.loc = c("foo1", "foo2")),
pattern = pattern
)
pattern <- "You have misspelled the following"
loops <- loops + 1
for(i in c("", "!@#$%^&*()")) {
expect_error(
import_as(~stri., i),
pattern = pattern
) |> errorfun()
expect_error(
import_inops(i),
pattern = pattern
)  |> errorfun()
expect_error(
import_inops(unexpose = i),
pattern = pattern
)  |> errorfun()
expect_error(
import_LL(i, "foo"),
pattern = pattern
)  |> errorfun()
expect_error(
pversion_check4mismatch(i),
pattern = pattern
)  |> errorfun()
expect_error(
pversion_report(i),
pattern = pattern
)  |> errorfun()
enumerate <- enumerate + 5
}
expect_error(
import_int(`!@#$%^&*()` ~ foo),
pattern = pattern
)
expect_error(
import_as(~stri., "stringi", dependencies = c("", "!@#$%^&*()")),
pattern = pattern
)
expect_error(
import_as(~stri., "stringi", extensions = c("", "!@#$%^&*()")),
pattern = pattern
)
# package is core R ====
basepkgs <- c(
"base", "compiler", "datasets", "grDevices", "graphics", "grid", "methods",
"parallel", "splines", "stats", "stats4", "tcltk", "tools",
"translations", "utils"
)
pattern <- 'The following "packages" are base/core R, which is not allowed:'
loops <- loops + 1
for(i in basepkgs) {
expect_error(
import_as(~stri., i),
pattern = pattern
) |> errorfun()
expect_error(
import_inops(i),
pattern = pattern
)  |> errorfun()
expect_error(
import_inops(unexpose = i),
pattern = pattern
)  |> errorfun()
expect_error(
import_LL(i, "foo"),
pattern = pattern
)  |> errorfun()
form <- as.formula(paste(i, "~ foo"))
expect_error(
import_int(form),
pattern = pattern
)  |> errorfun()
enumerate <- enumerate + 4
}
import_as(~stri., "stringi", dependencies = basepkgs)
expect_error(
import_as(~stri., "stringi", dependencies = basepkgs[1:5]),
pattern = pattern
)
# package is metaverse ====
metapkgs <- c(
"tidyverse", "fastverse", "tinyverse"
)
pattern <- "The following packages are known meta-verse packages, which is not allowed:"
loops <- loops + 1
for(i in metapkgs) {
expect_error(
import_as(~stri., i),
pattern = pattern
) |> errorfun()
expect_error(
import_inops(i),
pattern = pattern
)  |> errorfun()
expect_error(
import_inops(unexpose = i),
pattern = pattern
)  |> errorfun()
expect_error(
import_LL(i, "foo"),
pattern = pattern
)  |> errorfun()
form <- as.formula(paste(i, "~ foo"))
expect_error(
import_int(form),
pattern = pattern
)  |> errorfun()
expect_error(
pversion_check4mismatch(i),
pattern = pattern
)  |> errorfun()
expect_error(
pversion_report(i),
pattern = pattern
)  |> errorfun()
enumerate <- enumerate + 6
}
expect_error(
import_as(~stri., "stringi", dependencies = metapkgs),
pattern = pattern
)
expect_error(
import_as(~stri., "stringi", extensions = metapkgs),
pattern = pattern
)
import_as(~stri., "stringi", dependencies = c("foo1"))
# package not installed ====
pattern <- "The following packages are not installed"
expect_error(
import_as(~stri., "stringi", lib.loc = c("foo1", "foo2")),
pattern = pattern
)
expect_error(
import_inops("stringi", lib.loc = c("foo1", "foo2")),
pattern = pattern
)
expect_error(
import_inops(unexpose = "stringi", lib.loc = c("foo1", "foo2")),
pattern = pattern
)
expect_error(
import_LL("stringi", lib.loc = c("foo1", "foo2"), selection = "foo"),
pattern = pattern
)
expect_error(
import_int(stringi ~ foo, lib.loc = c("foo1", "foo2")),
pattern = pattern
)
expect_error(
pversion_check4mismatch("foo", lib.loc = c("foo1", "foo2")),
pattern = pattern
)
expect_error(
pversion_report("foo", lib.loc = c("foo1", "foo2")),
pattern = pattern
)
expect_error(
import_as(~stri., "stringi", dependencies = c("foo1", "foo2")),
pattern = "The following dependencies are not installed"
)
expect_error(
import_as(~stri., "stringi", extensions = c("foo1", "foo2")),
pattern = "The following extensions are not installed"
)
pattern <- "You have misspelled the following"
loops <- loops + 1
for(i in c("", "!@#$%^&*()")) {
expect_error(
import_as(~stri., i),
pattern = pattern
) |> errorfun()
expect_error(
import_inops(i),
pattern = pattern
)  |> errorfun()
expect_error(
import_inops(unexpose = i),
pattern = pattern
)  |> errorfun()
expect_error(
import_LL(i, "foo"),
pattern = pattern
)  |> errorfun()
expect_error(
pversion_check4mismatch(i),
pattern = pattern
)  |> errorfun()
expect_error(
pversion_report(i),
pattern = pattern
)  |> errorfun()
expect_error(
import_as(~stri., "stringi", dependencies = i),
pattern = pattern
)
expect_error(
import_as(~stri., "stringi", extensions = i),
pattern = pattern
)
enumerate <- enumerate + 7
}
expect_error(
import_int(`!@#$%^&*()` ~ foo),
pattern = pattern
)
expect_error(
import_as(~stri., "stringi", dependencies = c("", "!@#$%^&*()")),
pattern = pattern
)
expect_error(
import_as(~stri., "stringi", extensions = c("", "!@#$%^&*()")),
pattern = pattern
)
# package is core R ====
basepkgs <- c(
"base", "compiler", "datasets", "grDevices", "graphics", "grid", "methods",
"parallel", "splines", "stats", "stats4", "tcltk", "tools",
"translations", "utils"
)
pattern <- 'The following "packages" are base/core R, which is not allowed:'
loops <- loops + 1
for(i in basepkgs) {
expect_error(
import_as(~stri., i),
pattern = pattern
) |> errorfun()
expect_error(
import_inops(i),
pattern = pattern
)  |> errorfun()
expect_error(
import_inops(unexpose = i),
pattern = pattern
)  |> errorfun()
expect_error(
import_LL(i, "foo"),
pattern = pattern
)  |> errorfun()
form <- as.formula(paste(i, "~ foo"))
expect_error(
import_int(form),
pattern = pattern
)  |> errorfun()
expect_error(
import_as(~stri., "stringi", dependencies = i),
pattern = pattern
)
expect_error(
import_as(~stri., "stringi", extensions = i),
pattern = pattern
)
enumerate <- enumerate + 7
}
expect_error(
import_as(~stri., "stringi", dependencies = basepkgs[1:5]),
pattern = pattern
)
expect_error(
import_as(~stri., "stringi", extensions = basepkgs[1:5]),
pattern = pattern
)
# package is metaverse ====
metapkgs <- c(
"tidyverse", "fastverse", "tinyverse"
)
pattern <- "The following packages are known meta-verse packages, which is not allowed:"
loops <- loops + 1
for(i in metapkgs) {
expect_error(
import_as(~stri., i),
pattern = pattern
) |> errorfun()
expect_error(
import_inops(i),
pattern = pattern
)  |> errorfun()
expect_error(
import_inops(unexpose = i),
pattern = pattern
)  |> errorfun()
expect_error(
import_LL(i, "foo"),
pattern = pattern
)  |> errorfun()
form <- as.formula(paste(i, "~ foo"))
expect_error(
import_int(form),
pattern = pattern
)  |> errorfun()
expect_error(
pversion_check4mismatch(i),
pattern = pattern
)  |> errorfun()
expect_error(
pversion_report(i),
pattern = pattern
)  |> errorfun()
expect_error(
import_as(~stri., "stringi", dependencies = i),
pattern = pattern
)
expect_error(
import_as(~stri., "stringi", extensions = i),
pattern = pattern
)
enumerate <- enumerate + 9
}
expect_error(
import_as(~stri., "stringi", dependencies = metapkgs),
pattern = pattern
)
expect_error(
import_as(~stri., "stringi", extensions = metapkgs),
pattern = pattern
)
# bad library ====
expect_error(
import_as(~stri., "stringi", lib.loc=mean),
pattern = "`lib.loc` must be a character vector with at least one library path"
)
expect_error(
import_inops("stringi", lib.loc=mean),
pattern = "`lib.loc` must be a character vector with at least one library path"
)
expect_error(
import_inops(unexpose = "stringi", lib.loc=mean),
pattern = "`lib.loc` must be a character vector with at least one library path"
)
expect_error(
import_LL("stringi", "%stri==%", lib.loc=mean),
pattern = "`lib.loc` must be a character vector with at least one library path"
)
expect_error(
import_int(stringi ~ foo, lib.loc=mean),
pattern = "`lib.loc` must be a character vector with at least one library path"
)
expect_error(
import_data("stringi", 'foo', lib.loc=mean),
pattern = "`lib.loc` must be a character vector with at least one library path"
)
expect_error(
pversion_report("stringi", lib.loc = mean),
pattern = "`lib.loc` must be a character vector with at least one library path"
)
expect_error(
pversion_check4mismatch("stringi", lib.loc = mean),
pattern = "`lib.loc` must be a character vector with at least one library path"
)
import_as( ~ stri., mean)
import_inops(expose = mean)
library(tinytest)
library(tinycodet)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
# count number of "expect_" occurrences ====
testfiles <- list.files(file.path(getwd(), "/"), pattern = "*.R", recursive = TRUE)
n.testfiles <- length(testfiles)
temp.fun <- function(x) {
foo <- readLines(file.path(x))
sum(stringi::stri_count(foo, regex="expect_"))
}
testcount_regular <- sapply(
testfiles,
FUN = temp.fun
) |> sum()
# count number of loop iterated tests ====
n.iterations <- 0
n.loops <- 0
testfiles <- list.files(file.path(getwd(), "regular"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"regular", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testfiles <- list.files(file.path(getwd(), "safer"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"safer", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testfiles <- list.files(file.path(getwd(), "strings"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"strings", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testfiles <- list.files(file.path(getwd(), "import"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"import", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testcount_loops <- n.iterations - n.loops
# determine total number of tests ====
testcount_total <- testcount_regular + testcount_loops
print(testcount_total)
# test / function ratio ====
nfuns <- length(getNamespaceExports(loadNamespace("tinycodet")))
testcount_total / nfuns # about 72 tests per function on average
tinycodet:::.internal_package_found
tinycodet:::.internal_prep_Namespace("stringi", c("foo", .libPaths(), sys.call()))
expect_equal(
tinycodet:::.internal_prep_Namespace("stringi", c("foo", .libPaths(), sys.call())),
tinycodet:::.internal_prep_Namespace("stringi", c(.libPaths(), "foo"), sys.call()))
