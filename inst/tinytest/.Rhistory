myxp <- sub2ind_rcpp(lst, dims)
myxp2 <- sub2ind_rcpp2(lst, dims)
s2c <- coord2ind(sub2coord(lst, dims), dims)
all(myxp == s2c)
all(myxp2 == s2c)
foo <- bench::mark(
# control = list(seq_len(n), rev(seq_len(n/2)), seq_len(n)),
coord2ind(sub2coord(lst, dims), dims),
sub2ind_rcpp(sub, dims),
sub2ind_rcpp2(sub, dims),
min_iterations = 200,
check = FALSE
)
foo
ggplot2::autoplot(foo)
n <- 3000
dims <- x.dim <- c(n+1, n+1)
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
lst <- sub <- list(seq_len(n - 1), rev(seq_len(n/2)))
myxp <- sub2ind_rcpp(lst, dims)
myxp2 <- sub2ind_rcpp2(lst, dims)
s2c <- coord2ind(sub2coord(lst, dims), dims)
all(myxp == s2c)
all(myxp2 == s2c)
foo <- bench::mark(
# control = list(seq_len(n), rev(seq_len(n/2)), seq_len(n)),
coord2ind(sub2coord(lst, dims), dims),
sub2ind_rcpp(sub, dims),
sub2ind_rcpp2(sub, dims),
min_iterations = 200,
check = FALSE
)
foo
ggplot2::autoplot(foo)
Rcpp::cppFunction(
"
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out';
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out;
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
Range myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out;
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_rep_sugar(IntegerVector x, int times) {
return rep(x, times);
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
Range myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out;
}
"
)
x <- seq_len(1e6)
foo <- bench::mark(
rcpp_rep_int(x, 100),
rcpp_rep_sugar(x, 100)
)
foo
ggplot2::autoplot(foo)
x <- seq_len(1e5)
foo <- bench::mark(
rcpp_rep_int(x, 100),
rcpp_rep_sugar(x, 100),
min_iterations = 100
)
x <- seq_len(1e5)
foo <- bench::mark(
rcpp_rep_int(x, 100),
rcpp_rep_sugar(x, 100),
min_iterations = 100
)
foo
ggplot2::autoplot(foo)
Rcpp::sourceCpp(
"
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
Range myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out;
}
// [[Rcpp::export]]
IntegerVector rcpp_sub2ind2(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
Rcpp::IntegerVector coord(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
coord = rcpp_rep_int(rep_each(temp, reps_each[j]), reps_whole[j]);
out = out + (coord - 1) * myprod; // final addition
}
}
return(out);
}
"
)
Rcpp::sourceCpp(
code =  "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
Range myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out;
}
// [[Rcpp::export]]
IntegerVector rcpp_sub2ind2(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
Rcpp::IntegerVector coord(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
coord = rcpp_rep_int(rep_each(temp, reps_each[j]), reps_whole[j]);
out = out + (coord - 1) * myprod; // final addition
}
}
return(out);
}
"
)
sub2ind_rcpp <- function(sub, x.dim) {
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp)
sub2ind_rcpp2 <- function(sub, x.dim) {
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind2(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp2)
library(subsets)
n <- 3000
dims <- x.dim <- c(n+1, n+1)
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
lst <- sub <- list(seq_len(n - 1), rev(seq_len(n/2)))
myxp <- sub2ind_rcpp(lst, dims)
myxp2 <- sub2ind_rcpp2(lst, dims)
s2c <- coord2ind(sub2coord(lst, dims), dims)
all(myxp == s2c)
all(myxp2 == s2c)
foo <- bench::mark(
# control = list(seq_len(n), rev(seq_len(n/2)), seq_len(n)),
coord2ind(sub2coord(lst, dims), dims),
sub2ind_rcpp(sub, dims),
sub2ind_rcpp2(sub, dims),
min_iterations = 200,
check = FALSE
)
foo
ggplot2::autoplot(foo)
# set-up ====
setwd("D:/D Desktop/Publications/R package tinycodet")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest", "pkgdown", "goodpractice", "rhub")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# Render ReadMe, vignettes and pkgdown site ====
pkgs <- c("dplyr", "powerjoin", "magrittr", "zeallot", "tidytable", "data.table",
"gamair", "rbenchmark", "xfun", "pkgdown", "servr")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
if(!requireNamespace("xfun"))install.packages("xfun")
xfun::Rscript_call(
rmarkdown::render,
list(input = "./tinycodet/README.Rmd", output_format = "github_document")
)
path_vignettes <- normalizePath("./tinycodet/vignettes/articles/")
files <- list.files(path = path_vignettes, pattern = ".Rmd")
temp.fun <- function(x) {
xfun::Rscript_call(
rmarkdown::render,
list(input = file.path(path_vignettes, x), output_format = "html_vignette")
)
}
lapply(files, temp.fun)
# check references:
data_reference_index_missing <- function(pkg = ".", depth = 1L) {
tinycodet::import_inops("magrittr")
tinycodet::import_inops("rlang")
pkg <- pkgdown:::as_pkgdown(pkg)
meta <- pkg$meta[["reference"]] %||% default_reference_index(pkg)
if (length(meta) == 0) {
return(list())
}
# Cross-reference complete list of topics vs. topics found in index page
all_topics <- meta %>%
purrr::map(~ pkgdown:::select_topics(.$contents, pkg$topics)) %>%
purrr::reduce(union)
in_index <- seq_along(pkg$topics$name) %in% all_topics
missing <- !in_index & !pkg$topics$internal
pkg$topics$name[missing]
}
data_reference_index_missing("./tinycodet")
pkgdown::template_reference("./tinycodet")
# create site:
pkgdown::build_site("./tinycodet", run_dont_run = TRUE)
expect_equal(x %d==% y, !(x %d==% y))
library(tinycodet)
library(tinytest)
expect_equal(x %d==% y, !(x %d==% y))
# set-up ====
errorfun <- function(tt) {
if(isTRUE(tt)) print(tt)
if(isFALSE(tt)) stop(print(tt))
}
tol <- sqrt(.Machine$double.eps)
eps <- tol * 2
enumerate <- 0
# check (in)equality - vector by vector ====
x <- c(
c(0.3, 0.6, 0.7),
c(0.3, 0.6, 0.7) + eps,
c(0.3, 0.6, 0.7) - eps
)
y <- c(
c(0.1*3, 0.1*6, 0.1*7),
c(0.1*3, 0.1*6, 0.1*7) - eps,
c(0.1*3, 0.1*6, 0.1*7) + eps
)
equal <- c(rep(TRUE, 3), rep(FALSE, 6))
smaller <- c(rep(FALSE, 6), rep(TRUE, 3))
bigger <- c(rep(FALSE, 3), rep(TRUE, 3), rep(FALSE, 3))
expect_equal(x %d==% y, equal)
expect_equal(x %d<=% y, equal | smaller)
expect_equal(x %d>=% y, equal | bigger)
expect_equal(x %d!=% y, !equal)
expect_equal(x %d<% y, !equal & smaller)
expect_equal(x %d>% y, !equal & bigger)
expect_equal(x %d==% y, !(x %d==% y))
expect_equal(x %d!=% y, !(x %d==% y))
expect_equal(x %d<=% y, !(x %d>% y))
# relational checks
expect_equal(x %d!=% y, !(x %d==% y))
expect_equal(x %d<=% y, !(x %d>% y))
expect_equal(x %d>=% y, !(x %d>% y))
expect_equal(x %d>=% y, !(x %d<% y))
# check (in)equality - scalar by scalar ====
for(i in seq_along(x)) {
expect_equal(x[i] %d==% y[i], equal[i]) |> errorfun()
expect_equal(x[i] %d<=% y[i], equal[i] | smaller[i])  |> errorfun()
expect_equal(x[i] %d>=% y[i], equal[i] | bigger[i])  |> errorfun()
expect_equal(x[i] %d!=% y[i], !equal[i])  |> errorfun()
expect_equal(x[i] %d<% y[i], !equal[i] & smaller[i])  |> errorfun()
expect_equal(x[i] %d>% y[i], !equal[i] & bigger[i])  |> errorfun()
expect_equal(x[i] %d!=% y[i], !(x[i] %d==% y[i]))
expect_equal(x[i] %d<=% y[i], !(x[i] %d>% y[i]))
expect_equal(x[i] %d>=% y[i], !(x[i] %d<% y[i]))
enumerate <- enumerate + 9
}
# check (in)equality - vector by scalar / scalar by vector ====
x <- 0.3
y <- c(0.3 * 1, 0.3 + eps, 0.3 - eps)
equal <- c(TRUE, FALSE, FALSE)
smaller <- c(FALSE, TRUE, FALSE)
bigger <- c(FALSE, FALSE, TRUE)
expect_equal(x %d==% y, equal)
expect_equal(x %d<=% y, equal | smaller)
expect_equal(x %d>=% y, equal | bigger)
expect_equal(x %d!=% y, !equal)
expect_equal(x %d<% y, !equal & smaller)
expect_equal(x %d>% y, !equal & bigger)
expect_equal(x %d!=% y, !(x %d==% y))
expect_equal(x %d<=% y, !(x %d>% y))
expect_equal(x %d>=% y, !(x %d<% y))
y <- 0.7
x <- c(0.7 * 1, 0.7 + eps, 0.7 - eps)
equal <- c(TRUE, FALSE, FALSE)
smaller <- c(FALSE, FALSE, TRUE)
bigger <- c(FALSE, TRUE, FALSE)
expect_equal(x %d==% y, equal)
expect_equal(x %d<=% y, equal | smaller)
expect_equal(x %d>=% y, equal | bigger)
expect_equal(x %d!=% y, !equal)
expect_equal(x %d<% y, !equal & smaller)
expect_equal(x %d>% y, !equal & bigger)
expect_equal(x %d!=% y, !(x %d==% y))
expect_equal(x %d<=% y, !(x %d>% y))
expect_equal(x %d>=% y, !(x %d<% y))
# make new vars
y <- 0.7
x <- c(0.7 * 1, 0.7 + eps, 0.7 - eps)
equal <- c(TRUE, FALSE, FALSE)
smaller <- c(FALSE, FALSE, TRUE)
bigger <- c(FALSE, TRUE, FALSE)
# regular checks
expect_equal(x %d==% y, equal)
expect_equal(x %d<=% y, equal | smaller)
expect_equal(x %d>=% y, equal | bigger)
expect_equal(x %d!=% y, !equal)
expect_equal(x %d<% y, !equal & smaller)
expect_equal(x %d>% y, !equal & bigger)
# relational checks
expect_equal(x %d!=% y, !(x %d==% y))
expect_equal(x %d<=% y, !(x %d>% y))
expect_equal(x %d>=% y, !(x %d<% y))
# check (in)equality - dimension retention ====
x <- c(
c(0.3, 0.6, 0.7),
c(0.3, 0.6, 0.7) + eps,
c(0.3, 0.6, 0.7) - eps
)
library(tinytest)
library(tinycodet)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
# count number of "expect_" occurrences ====
testfiles <- list.files(file.path(getwd(), "/"), pattern = "*.R", recursive = TRUE)
n.testfiles <- length(testfiles)
temp.fun <- function(x) {
foo <- readLines(file.path(x))
sum(stringi::stri_count(foo, regex="expect_"))
}
testcount_regular <- sapply(
testfiles,
FUN = temp.fun
) |> sum()
# count number of loop iterated tests ====
n.iterations <- 0
n.loops <- 0
testfiles <- list.files(file.path(getwd(), "regular"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
if(!grepl("-special", i)) {
my_env <- new.env()
source(file.path(getwd(),"regular", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
}
warnings()
testcount_loops <- n.iterations - n.loops
# determine total number of tests ====
testcount_total <- testcount_regular + testcount_loops
print(testcount_total)
# test / function ratio ====
nfuns <- length(getNamespaceExports(loadNamespace("tinycodet")))
testcount_total / nfuns # about 45 tests per function on average
# count number of "expect_" occurrences ====
testfiles <- list.files(file.path(getwd(), "/"), pattern = "*.R", recursive = TRUE)
n.testfiles <- length(testfiles)
temp.fun <- function(x) {
foo <- readLines(file.path(x))
sum(stringi::stri_count(foo, regex="expect_"))
}
testcount_regular <- sapply(
testfiles,
FUN = temp.fun
) |> sum()
# count number of loop iterated tests ====
n.iterations <- 0
n.loops <- 0
testfiles <- list.files(file.path(getwd(), "regular"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
if(!grepl("-special", i)) {
my_env <- new.env()
source(file.path(getwd(),"regular", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
}
library(tinytest)
library(tinycodet)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
# count number of "expect_" occurrences ====
testfiles <- list.files(file.path(getwd(), "/"), pattern = "*.R", recursive = TRUE)
n.testfiles <- length(testfiles)
temp.fun <- function(x) {
foo <- readLines(file.path(x))
sum(stringi::stri_count(foo, regex="expect_"))
}
testcount_regular <- sapply(
testfiles,
FUN = temp.fun
) |> sum()
# count number of loop iterated tests ====
n.iterations <- 0
n.loops <- 0
testfiles <- list.files(file.path(getwd(), "regular"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
if(!grepl("-special", i)) {
my_env <- new.env()
source(file.path(getwd(),"regular", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
}
testcount_loops <- n.iterations - n.loops
# determine total number of tests ====
testcount_total <- testcount_regular + testcount_loops
print(testcount_total)
# test / function ratio ====
nfuns <- length(getNamespaceExports(loadNamespace("tinycodet")))
testcount_total / nfuns # about 45 tests per function on average
