libraty(tinycodet)
library(tinycodet)
x.charclass <- c('stRRRingi','R STRINGI', '123')
pattern <- c('\\p{Ll}', '\\p{Lu}', '\\p{Zs}')
expect1 <- expect2 <- expect3 <- list()
out1 <- out2 <- out3 <- list()
loops <- loops + 1
# set-up ===
enumerate <- 0 # to count number of tests performed using iterations in loops
loops <- 0 # to count number of loops
x.charclass <- c('stRRRingi','R STRINGI', '123')
pattern <- c('\\p{Ll}', '\\p{Lu}', '\\p{Zs}')
expect1 <- expect2 <- expect3 <- list()
out1 <- out2 <- out3 <- list()
loops <- loops + 1
library(tinytest)
x.charclass <- c('stRRRingi','R STRINGI', '123')
pattern <- c('\\p{Ll}', '\\p{Lu}', '\\p{Zs}')
expect1 <- expect2 <- expect3 <- list()
out1 <- out2 <- out3 <- list()
loops <- loops + 1
for(i in 1:length(pattern)) {
out1[[i]] <- stri_locate_ith(x.charclass, i = 1, charclass = pattern[[i]], merge = FALSE)
expect1[[i]] <- stringi::stri_locate_first_charclass(x.charclass, pattern[[i]], merge = FALSE)
out2[[i]] <- stri_locate_ith(x.charclass, i = -1, charclass = pattern[[i]], merge = FALSE)
expect2[[i]] <- stringi::stri_locate_last_charclass(x.charclass, pattern[[i]], merge = FALSE)
out3[[i]] <- stri_locate_ith(x.charclass, i = c(1, -1, 1), charclass = pattern[[i]], merge = FALSE)
expect3[[i]] <- rbind(stringi::stri_locate_first_charclass(x.charclass[1], pattern[[i]], merge = FALSE),
stringi::stri_locate_last_charclass(x.charclass[2], pattern[[i]], merge = FALSE),
stringi::stri_locate_first_charclass(x.charclass[3], pattern[[i]], merge = FALSE))
enumerate <- enumerate + 3
}
for(i in 1:length(pattern)) {
out1[[i]] <- stri_locate_ith(x.charclass, i = 1, charclass = pattern[[i]], merge = FALSE)
expect1[[i]] <- stringi::stri_locate_first_charclass(x.charclass, pattern[[i]])
out2[[i]] <- stri_locate_ith(x.charclass, i = -1, charclass = pattern[[i]], merge = FALSE)
expect2[[i]] <- stringi::stri_locate_last_charclass(x.charclass, pattern[[i]])
out3[[i]] <- stri_locate_ith(x.charclass, i = c(1, -1, 1), charclass = pattern[[i]], merge = FALSE)
expect3[[i]] <- rbind(stringi::stri_locate_first_charclass(x.charclass[1], pattern[[i]]),
stringi::stri_locate_last_charclass(x.charclass[2], pattern[[i]]),
stringi::stri_locate_first_charclass(x.charclass[3], pattern[[i]]))
enumerate <- enumerate + 3
}
expect_equal(expect1, out1)
expect_equal(expect2, out2)
expect_equal(expect3, out3)
# charclass - merge = FALSE ====
x.charclass <- c('stRRRingi','R STRINGI', '123')
pattern <- c('\\p{Ll}', '\\p{Lu}', '\\p{Zs}')
expect1 <- expect2 <- expect3 <- list()
out1 <- out2 <- out3 <- list()
loops <- loops + 1
for(i in 1:length(pattern)) {
out1[[i]] <- stri_locate_ith(x.charclass, i = 1, charclass = pattern[[i]], merge = FALSE)
expect1[[i]] <- stringi::stri_locate_first_charclass(x.charclass, pattern[[i]])
out2[[i]] <- stri_locate_ith(x.charclass, i = -1, charclass = pattern[[i]], merge = FALSE)
expect2[[i]] <- stringi::stri_locate_last_charclass(x.charclass, pattern[[i]])
out3[[i]] <- stri_locate_ith(x.charclass, i = c(1, -1, 1), charclass = pattern[[i]], merge = FALSE)
expect3[[i]] <- rbind(stringi::stri_locate_first_charclass(x.charclass[1], pattern[[i]]),
stringi::stri_locate_last_charclass(x.charclass[2], pattern[[i]]),
stringi::stri_locate_first_charclass(x.charclass[3], pattern[[i]]))
enumerate <- enumerate + 3
}
expect_equal(expect1, out1)
expect_equal(expect2, out2)
expect_equal(expect3, out3)
x.charclass <- c('stRRRingi','R STRINGI', '123')
pattern <- c('\\p{Ll}', '\\p{Lu}', '\\p{Zs}')
expect_equal(
stri_locate_ith(x.charclass, i = 1, charclass = pattern),
stringi::stri_locate_first_charclass(x.charclass, pattern)
)
expect_equal(
stri_locate_ith(x.charclass, i = 1, charclass = pattern, merge = FALSE),
stringi::stri_locate_first_charclass(x.charclass, pattern)
)
expect_equal(
stri_locate_ith(x.charclass, i = -1, charclass = pattern, merge = FALSE),
stringi::stri_locate_last_charclass(x.charclass, pattern)
)
expect_equal(
stri_locate_ith(x.charclass, i = c(1, -1, 1), charclass = pattern), merge = FALSE,
rbind(
stringi::stri_locate_first_charclass(x.charclass, pattern),
stringi::stri_locate_last_charclass(x.charclass, pattern),
stringi::stri_locate_first_charclass(x.charclass, pattern)
)
)
expect_equal(
stri_locate_ith(x.charclass, i = c(1, -1, 1), charclass = pattern, merge = FALSE),
rbind(
stringi::stri_locate_first_charclass(x.charclass, pattern),
stringi::stri_locate_last_charclass(x.charclass, pattern),
stringi::stri_locate_first_charclass(x.charclass, pattern)
)
)
stri_locate_ith(x.charclass, i = c(1, -1, 1), charclass = pattern, merge = FALSE)
stringi::stri_locate_first_charclass(x.charclass, pattern)
stringi::stri_locate_last_charclass(x.charclass, pattern)
expect_equal(
stri_locate_ith(x.charclass, i = c(1, -1, 1), charclass = pattern, merge = FALSE),
rbind(
stringi::stri_locate_first_charclass(x.charclass[1], pattern),
stringi::stri_locate_last_charclass(x.charclass[2], pattern),
stringi::stri_locate_first_charclass(x.charclass[3], pattern)
)
)
rbind(
stringi::stri_locate_first_charclass(x.charclass[1], pattern),
stringi::stri_locate_last_charclass(x.charclass[2], pattern),
stringi::stri_locate_first_charclass(x.charclass[3], pattern)
)
expect_equal(
stri_locate_ith(x.charclass, i = c(1, -1, 1), charclass = pattern, merge = FALSE),
rbind(
stringi::stri_locate_first_charclass(x.charclass[1], pattern[1]),
stringi::stri_locate_last_charclass(x.charclass[2], pattern[2]),
stringi::stri_locate_first_charclass(x.charclass[3], pattern[3])
)
)
library(tinytest)
library(tinycodet)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
# count number of "expect_" occurrences ====
testfiles <- list.files(file.path(getwd(), "/"), pattern = "*.R", recursive = TRUE)
n.testfiles <- length(testfiles)
temp.fun <- function(x) {
foo <- readLines(file.path(x))
sum(stringi::stri_count(foo, regex="expect_"))
}
testcount_regular <- sapply(
testfiles,
FUN = temp.fun
) |> sum()
# count number of loop iterated tests ====
n.iterations <- 0
n.loops <- 0
testfiles <- list.files(file.path(getwd(), "regular"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
if(!grepl("-special", i)) {
my_env <- new.env()
source(file.path(getwd(),"regular", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) & "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
}
testcount_loops <- n.iterations - n.loops
# determine total number of tests ====
testcount_total <- testcount_regular + testcount_loops
print(testcount_total)
# test / function ratio ====
nfuns <- length(getNamespaceExports(loadNamespace("tinycodet")))
testcount_total / nfuns # about 14 tests per function on average
