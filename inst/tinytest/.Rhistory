}
}
return flatind;
}
"
)
x.dim <- c(2000L, 2000L, 3L)
x.len <- as.integer(prod(x.dim))
x <- array(sample(1:x.len), dim = x.dim)
ind1 <- 1:500
ind2 <- seq_len(x.dim[2])
ind3 <- 1:2
dimcumprod <- as.integer(cumprod(x.dim))
all(
rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod) ==
C_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
)
foo <- bench::mark(
rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod),
C_sub2ind_3d(ind1, ind2, ind3, dimcumprod),
min_iterations = 500
)
obj <- summary(foo)
obj
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(n, sizeof(int));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
return buf;
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(n, sizeof(int));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
counter--;
PROTECT(flatind = allocVector(INTSXP, j));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return flatind;
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body
)
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(n, sizeof(int));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
counter--;
PROTECT(flatind = allocVector(INTSXP, j));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(n, sizeof(int));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
counter--;
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(n, sizeof(int));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(ni * nj * nk, sizeof(int));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(ni * nj * nk, sizeof(int));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
if(counter > 0) {
counter--;
}
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(ni * nj * nk, sizeof(int));
SEXP flatind;
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
if(counter > 0) {
counter--;
}
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
x.dim <- c(1500L, 1500L, 3L)
x.len <- as.integer(prod(x.dim))
x <- array(sample(1:x.len), dim = x.dim)
ind1 <- 1:500
ind2 <- seq_len(x.dim[2])
ind3 <- 1:2
dimcumprod <- as.integer(cumprod(x.dim))
all(
rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod) ==
C_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
)
C_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
test_rcpp <- rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
test_rcpp <- rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
test_c <- C_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(ni * nj * nk, sizeof(int));
SEXP flatind;
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
x.dim <- c(1500L, 1500L, 3L)
x.len <- as.integer(prod(x.dim))
x <- array(sample(1:x.len), dim = x.dim)
ind1 <- 1:500
ind2 <- seq_len(x.dim[2])
ind3 <- 1:2
dimcumprod <- as.integer(cumprod(x.dim))
test_rcpp <- rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
test_c <- C_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
all( test_rcpp == test_c)
foo <- bench::mark(
rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod),
C_sub2ind_3d(ind1, ind2, ind3, dimcumprod),
min_iterations = 500
)
obj <- summary(foo)
obj
# Overview pages:
?squarebrackets::squarebrackets_help
?squarebrackets::squarebrackets_immutable_classes
?squarebrackets::squarebrackets_mutable_classes
?squarebrackets::squarebrackets_indx_args
?squarebrackets::squarebrackets_duplicates
?squarebrackets::squarebrackets_PassByReference
?squarebrackets::squarebrackets_technical
?squarebrackets::squarebrackets_inconveniences
?squarebrackets::class_mutable_atomic
# generic methods:
?squarebrackets::sb_x()
?squarebrackets::sb_rm()
?squarebrackets::sb_mod()
?squarebrackets::sb_set()
?squarebrackets::sb_coe()
?squarebrackets::sb2_coe()
?squarebrackets::sb_before()
?squarebrackets::sb2_rec()
?squarebrackets::sb_setRename()
?squarebrackets::sb_currentBindings()
# helper functions:
?squarebrackets::n()
?squarebrackets::sub2ind()
?squarebrackets::match_all()
?squarebrackets::idx_by()
?squarebrackets::idx_ord()
?squarebrackets::idx()
?squarebrackets::idx_ord()
squarebrackets::idx_ord_v()
?squarebrackets::idx_ord_v()
?squarebrackets::seq_rec2()
?squarebrackets::seq_names()
?squarebrackets::seq_mlen()
?squarebrackets::indx_x()
# Overview pages:
?squarebrackets::squarebrackets_help
ut <- loadNamespace("utils")
View(ut)
ut[["specialOps"]]
baseenv()[["??"]]
b <- loadNamespace("base")
b
p <- parent.env(ut)
View(p)
p
ls(p)
help.search("??")
View(ut)
View(ut[["?"]])
`<-`
.Internal("??")
.Primitive("??")
?.Internal
.External("??")
?help
?`?`
?"stringi::stri_c"
?stringi::stri_c
usethis::use_tidy_dependencies()
usethis::use_tidy_dependencies
?tinycodet::import_as
?usethis::use_standalone
?dplyr
??dplyr
?collapse::setv
?data.table
??data.table
foo <- Rgraphviz::plot
environment(foo)
foo2 <- Rgraphviz::AgEdge
environment(foo2)
asNamespace(environment(foo2))
getNamespaceName
getNamespaceName(foo)
getNamespaceName(environment(foo))
rg <- loadNamespace("Rgraphviz")
View(rg)
rg[[".__T__plot:base"]]
Tplot <- rg[[".__T__plot:base"]]
View(Tplot)
parent.env(Tplot)
rg
View(rg)
imp.rg <- parent.env(rg)
View(imp.rg)
imp.rg[["plot"]]
Rplot <- imp.rg[["plot"]]
Rplot
?isS4Method
??isS4Method
?setClass
install.packages("aorsf")
tinycodet::import_as(~ af., "aorsf")
View(af.)
af2 <- new.env()
import::into(af2, .from = "aorsf", .all = TRUE)
sort(names(af.))
sort(names(af2))
sort(names(af.))[-1] == sort(names(af2))
#' @rdname tinycodetfakepkg6
#' @export
setClass("plottingclass", slots = c(x = "numeric", y = "numeric"))
#' @rdname tinycodetfakepkg6
#' @export
plottingClass <- setClass("plottingclass", slots = c(x = "numeric", y = "numeric"))
setMethod("plot", "Ragraph", function(x, y) paste0(x, y))
setMethod("plot", "plottingclass", function(x, y) paste0(x, y))
plottingClass
new("plottingclass", x = 1:10, y = 1:10)
myobj <- new("plottingclass", x = 1:10, y = 1:10)
plot(myobj)
setMethod("plot", "plottingclass", function(obj) paste0(obj$x, obj$y))
plot.plottingclass
rg$AgEdge
help.import(i =rg$AgEdge)
library(tinycodet)
help.import(i =rg$AgEdge)
help.import(i =rg.$AgEdge)
import_as(~ rg., "Rgraphviz")
help.import(i =rg.$AgEdge)
rg[[".__T__show:methods"]]
library(tinytest)
library(tinycodet)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
library(tinytest)
library(tinycodet)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
# count number of "expect_" occurrences ====
testfiles <- list.files(file.path(getwd(), "/"), pattern = "*.R", recursive = TRUE)
n.testfiles <- length(testfiles)
temp.fun <- function(x) {
foo <- readLines(file.path(x))
sum(stringi::stri_count(foo, regex="expect_"))
}
testcount_regular <- sapply(
testfiles,
FUN = temp.fun
) |> sum()
# count number of loop iterated tests ====
n.iterations <- 0
n.loops <- 0
testfiles <- list.files(file.path(getwd(), "regular"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"regular", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testfiles <- list.files(file.path(getwd(), "safer"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"safer", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testfiles <- list.files(file.path(getwd(), "strings"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"strings", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testfiles <- list.files(file.path(getwd(), "import"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"import", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testcount_loops <- n.iterations - n.loops
# determine total number of tests ====
testcount_total <- testcount_regular + testcount_loops
print(testcount_total)
# test / function ratio ====
nfuns <- length(getNamespaceExports(loadNamespace("tinycodet")))
testcount_total / nfuns # about 72 tests per function on average
