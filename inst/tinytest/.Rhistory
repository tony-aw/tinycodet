d$set <- NULL
d$set
d <- dict(list(apple = 5, orange = 10))
lockBinding("set", d)
d$set <- NULL
d$set("banana", 3)
d$set
125/3
40/8*3
40*8
125/0.4
library(tinycodet)
loadNamespace("bench")
loadNamespace("ggplot2")
n <- 1e5
x <- rep(paste0(1:50, collapse = ""), n)
p <- "\\d"
i <- sample(c(-50:-1, 1:50), replace=TRUE, size = n)
locate_stringi <- function(...) {
stringi::stri_locate_all(...)
stringi::stri_count(...)
}
bm.stri_locate_ith <- bench::mark(
"stri_locate_ith" = { stri_locate_ith_regex(x, p, i) },
"stringi::(stri_locate_all + stri_count)" = { locate_stringi(str=x, regex = p) },
min_iterations = 500,
check = FALSE
)
ggplot2::autoplot(bm.stri_locate_ith)
bm.stri_locate_ith
Rcpp::cppFunction(
"
IntegerVector rcpp_convert_i(IntegerVector n_matches, IntegerVector i) {
int n = i.length();
IntegerVector out(n);
int res = 0;
for(int j = 0; j < n; ++j) {
if(IntegerVector::is_na(i[j])) {
stop(\"i is not allowed to be 0 or NA\");
}
else if(i[j] < 0) {
res = n_matches[j] - abs(i[j] + 1);
if(res < 1) {
out[j] = 1;
} else {
out[j] = res;
}
}
else if(i[j] > 0) {
if(i[j] < n_matches[j]) {
out[j] = i[j];
} else {
out[j] = n_matches[j];
}
}
else {
stop(\"i is not allowed to be 0 or NA\");
}
}
return out;
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_convert_neg_i(IntegerVector n_matches, IntegerVector i) {
int n = i.length();
IntegerVector out(n);
int res = 0;
for(int j = 0; j < n; ++j) {
res = n_matches[j] - abs(i[j] + 1);
if(res < 1) {
out[j] = 1;
} else {
out[j] = res;
}
}
return out;
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_convert_pos_i(IntegerVector n_matches, IntegerVector i) {
int n = i.length();
IntegerVector out(n);
for(int j = 0; j < n; ++j) {
if(i[j] < n_matches[j]) {
out[j] = i[j];
} else {
out[j] = n_matches[j];
}
}
return out;
}
"
)
rcpp_old <- function(n.matches, i) {
i <- as.integer(i)
neg <- which(i < 0)
pos <- which(i > 0)
bad_i <- length(i) != (length(neg) + length(pos))
if(bad_i){
stop("`i` is not allowed to be zero or NA")
}
i[neg] <- rcpp_convert_neg_i(n.matches[neg], i[neg])
i[pos] <- rcpp_convert_pos_i(n.matches[pos], i[pos])
return(i)
}
rcpp_convert_i(n.matches, rep(0, length(n.matches)))
i <- sample(c(-50:-1, 1:50), 5e5, TRUE)
n.matches <- sample(0:50, 5e5, TRUE)
rcpp_convert_i(n.matches, rep(0, length(n.matches)))
rcpp_convert_i(n.matches, rep(NA, length(n.matches)))
rcpp_convert_i(n.matches, rep(NaN, length(n.matches)))
rcpp_convert_i(n.matches, rep(Inf, length(n.matches)))
rcpp_convert_i(n.matches, rep(-Inf, length(n.matches)))
foo <- bench::mark(
rcpp_old = rcpp_old(n.matches, i),
rcpp_new = rcpp_convert_i(n.matches, i),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
i <- sample(c(-50:-1, 1:50))
i <- sample(c(-50:-1, 1:50))
n.matches <- sample(0:50, length(i), TRUE)
foo <- bench::mark(
rcpp_old = for(j in 1:10000) rcpp_old(n.matches, i),
rcpp_new = for(j in 1:10000) rcpp_convert_i(n.matches, i),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
?transform_if
x <- c(-1e5:1e5, NA, NA)
x <- c(-1e6:1e6, NA, NA)
object <- matrix(x, ncol = 2)
x <- c(-1e6:1e6, NA, NaN, 0)
object <- matrix(x, ncol = 2)
attr(object, "helloworld") <- "helloworld"
print(object)
y <- 0
z <- 1000
x <- c(-1e6:1e6, NA, NaN, 0)
object <- matrix(x, ncol = 2)
attr(object, "helloworld") <- "helloworld"
y <- 0
z <- 1000
bm.transform_if <- bench::mark(
transform_if = object |> transform_if(object > y, log, \(x) x^2, -z),
ifelse = ifelse(is.na(object), z, ifelse(object > y, log(object), object^2)),
min_iterations = 250
)
x <- c(-10:10, NA, NaN, 0)
object <- matrix(x, ncol = 2)
attr(object, "helloworld") <- "helloworld"
y <- 0
z <- 1000
object |> transform_if(object > y, log, \(x) x^2, -z)
ifelse(is.na(object), z, ifelse(object > y, log(object), object^2))
bm.transform_if <- bench::mark(
transform_if = object |> transform_if(object > y, log, \(x) x^2, -z),
ifelse = ifelse(is.na(object), -z, ifelse(object > y, log(object), object^2)),
min_iterations = 250
)
object |> transform_if(object > y, log, \(x) x^2, -z)
ifelse(is.na(object), -z, ifelse(object > y, log(object), object^2))
bm.transform_if <- bench::mark(
transform_if = object |> transform_if(object > y, log, \(x) x^2, -z),
ifelse = ifelse(is.na(object), -z, ifelse(object > y, log(object), object^2)),
min_iterations = 250,
check = FALSE
)
x <- c(-1e5:1e5, NA, NaN, 0)
object <- matrix(x, ncol = 2)
attr(object, "helloworld") <- "helloworld"
y <- 0
z <- 1000
bm.transform_if <- bench::mark(
transform_if = object |> transform_if(object > y, log, \(x) x^2, -z),
ifelse = ifelse(is.na(object), -z, ifelse(object > y, log(object), object^2)),
min_iterations = 250,
check = FALSE
)
summary(bm.transform_if)
ggplot2::autoplot(bm.transform_if)
x <- sapply(1:1e6, paste(sample(letters), collapse = ""))
x <- sapply(1:1e6, \(x) paste(sample(letters), collapse = ""))
x <- sapply(1:1e5, \(x) paste(sample(letters), collapse = ""))
library(tinycodet)
x <- sapply(1:10, \(x) paste(sample(letters), collapse = ""))
p = "a|e|i|o|u"
x <- sapply(1:10, \(x) paste(sample(letters), collapse = ""))
p = "a|e|i|o|u"
foo <- bench::mark(
tinycodet = for(i in 1:1000) strfind(x, p, i = "last"),
stringi = stringi::stri_locate(x, regex = p, mode = "last"),
min_iterations = 500
)
strfind(x, p, i = "last")
stringi::stri_locate(x, regex = p, mode = "last")
foo <- bench::mark(
tinycodet = for(i in 1:1000) strfind(x, p, i = "last"),
stringi = for(i in 1:1000) stringi::stri_locate(x, regex = p, mode = "last"),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
x <- sapply(1:10, \(x) paste(sample(letters), collapse = ""))
p = s_fixed("a", case_insensitive = TRUE)
x <- sapply(1:10, \(x) paste(sample(letters), collapse = ""))
p = s_fixed("a", case_insensitive = TRUE)
foo <- bench::mark(
tinycodet = for(i in 1:1000) strfind(x, p, i = "last"),
stringi = for(i in 1:1000) stringi::stri_locate(
x, fixed = p, mode = "last", case_insensitive = TRUE
),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
?stringi::stri_locate()
# locate_first/last vs locate_all
n <- 1e4
x <- rep(paste0(1:50, collapse = ""), n)
p <- "\\d"
bm.stri_locate_last <- bench::mark(
"stri_locate_all" = stringi::stri_locate_all_regex(x, p),
"stri_locate_last" = stringi::stri_locate_last_regex(x, p),
min_iterations = 500,
check = FALSE,
filter_gc = FALSE
)
summary(bm.stri_locate_last)
autoplot(bm.stri_locate_last)
ggplot2::autoplot(bm.stri_locate_last)
19.4/25.8
# locate_first/last vs locate_all
n <- 1e4
x <- sapply(1:n, paste(sample(letters), collapse = ""))
x <- sapply(1:n, \(x) paste(sample(letters), collapse = ""))
p <- "\\d"
bm.stri_locate_last <- bench::mark(
"stri_locate_all" = stringi::stri_locate_all_regex(x, p),
"stri_locate_last" = stringi::stri_locate_last_regex(x, p),
min_iterations = 500,
check = FALSE,
filter_gc = FALSE
)
summary(bm.stri_locate_last)
ggplot2::autoplot(bm.stri_locate_last)
1/0.75
1/0.67
1/1.5
library(tinytest)
library(tinycodet)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
# count number of "expect_" occurrences ====
testfiles <- list.files(file.path(getwd(), "/"), pattern = "*.R", recursive = TRUE)
n.testfiles <- length(testfiles)
temp.fun <- function(x) {
foo <- readLines(file.path(x))
sum(stringi::stri_count(foo, regex="expect_"))
}
testcount_regular <- sapply(
testfiles,
FUN = temp.fun
) |> sum()
# count number of loop iterated tests ====
n.iterations <- 0
n.loops <- 0
testfiles <- list.files(file.path(getwd(), "regular"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
if(!grepl("-special", i)) {
my_env <- new.env()
source(file.path(getwd(),"regular", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
}
testfiles <- list.files(file.path(getwd(), "safer"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
if(!grepl("-special", i)) {
my_env <- new.env()
source(file.path(getwd(),"safer", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
}
testfiles <- list.files(file.path(getwd(), "strings"), pattern = "*.R", recursive = FALSE)
# count number of loop iterated tests ====
n.iterations <- 0
n.loops <- 0
testfiles <- list.files(file.path(getwd(), "regular"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"regular", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testfiles <- list.files(file.path(getwd(), "safer"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"safer", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testfiles <- list.files(file.path(getwd(), "strings"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"strings", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
library(tinytest)
library(tinycodet)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
# count number of "expect_" occurrences ====
testfiles <- list.files(file.path(getwd(), "/"), pattern = "*.R", recursive = TRUE)
n.testfiles <- length(testfiles)
temp.fun <- function(x) {
foo <- readLines(file.path(x))
sum(stringi::stri_count(foo, regex="expect_"))
}
testcount_regular <- sapply(
testfiles,
FUN = temp.fun
) |> sum()
# count number of loop iterated tests ====
n.iterations <- 0
n.loops <- 0
testfiles <- list.files(file.path(getwd(), "regular"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"regular", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testfiles <- list.files(file.path(getwd(), "safer"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"safer", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testfiles <- list.files(file.path(getwd(), "strings"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"strings", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testfiles <- list.files(file.path(getwd(), "import"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"import", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testcount_loops <- n.iterations - n.loops
# determine total number of tests ====
testcount_total <- testcount_regular + testcount_loops
print(testcount_total)
# count number of "expect_" occurrences ====
testfiles <- list.files(file.path(getwd(), "/"), pattern = "*.R", recursive = TRUE)
testfiles
library(tinytest)
library(tinycodet)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
# count number of "expect_" occurrences ====
testfiles <- list.files(file.path(getwd(), "/"), pattern = "*.R", recursive = TRUE)
n.testfiles <- length(testfiles)
temp.fun <- function(x) {
foo <- readLines(file.path(x))
sum(stringi::stri_count(foo, regex="expect_"))
}
testcount_regular <- sapply(
testfiles,
FUN = temp.fun
) |> sum()
# count number of loop iterated tests ====
n.iterations <- 0
n.loops <- 0
testfiles <- list.files(file.path(getwd(), "regular"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"regular", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testfiles <- list.files(file.path(getwd(), "safer"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"safer", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testfiles <- list.files(file.path(getwd(), "strings"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"strings", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testfiles <- list.files(file.path(getwd(), "import"), pattern = "*.R", recursive = FALSE)
for(i in testfiles) {
my_env <- new.env()
source(file.path(getwd(),"import", i), local = my_env) |> suppressMessages()
if("enumerate" %in% names(my_env) && "loops" %in% names(my_env)){
print(my_env$enumerate)
n.iterations <- n.iterations + my_env$enumerate
n.loops <- n.loops + my_env$loops
}
}
testcount_loops <- n.iterations - n.loops
# determine total number of tests ====
testcount_total <- testcount_regular + testcount_loops
print(testcount_total)
# test / function ratio ====
nfuns <- length(getNamespaceExports(loadNamespace("tinycodet")))
testcount_total / nfuns # about 80 tests per function on average
