n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp)
sub2ind_rcpp2 <- function(sub, x.dim) {
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind2(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp2)
foo <- bench::mark(
# control = list(seq_len(n), rev(seq_len(n/2)), seq_len(n)),
coord2ind(sub2coord(lst, dims), dims),
sub2ind_rcpp(sub, dims),
sub2ind_rcpp2(sub, dims),
min_iterations = 100,
check = FALSE
)
50/1000
1/200
1/20
foo
ggplot2::autoplot(foo)
foo <- bench::mark(
# control = list(seq_len(n), rev(seq_len(n/2)), seq_len(n)),
coord2ind(sub2coord(lst, dims), dims),
sub2ind_rcpp(sub, dims),
sub2ind_rcpp2(sub, dims),
min_iterations = 200,
check = FALSE
)
foo
ggplot2::autoplot(foo)
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind2(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
Rcpp::IntegerVector coord(total);
IntegerVector temp0 = lst[0];
out = rep(temp0, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
IntegerVector temp = lst[j];
coord = rep(rep_each(temp, reps_each[j]), reps_whole[j]);
out = out + (coord - 1) * myprod; // final addition
}
}
return(out);
}
"
)
sub2ind_rcpp <- function(sub, x.dim) {
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp)
sub2ind_rcpp2 <- function(sub, x.dim) {
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind2(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp2)
library(subsets)
n <- 3000
dims <- x.dim <- c(n+1, n+1)
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
lst <- sub <- list(seq_len(n), rev(seq_len(n/2)))
myxp <- sub2ind_rcpp(lst, dims)
myxp2 <- sub2ind_rcpp2(lst, dims)
s2c <- coord2ind(sub2coord(lst, dims), dims)
all(myxp == s2c)
all(myxp2 == s2c)
foo <- bench::mark(
# control = list(seq_len(n), rev(seq_len(n/2)), seq_len(n)),
coord2ind(sub2coord(lst, dims), dims),
sub2ind_rcpp(sub, dims),
sub2ind_rcpp2(sub, dims),
min_iterations = 200,
check = FALSE
)
foo
ggplot2::autoplot(foo)
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind2(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
Rcpp::IntegerVector coord(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
coord = rep(rep_each(temp, reps_each[j]), reps_whole[j]);
out = out + (coord - 1) * myprod; // final addition
}
}
return(out);
}
"
)
sub2ind_rcpp <- function(sub, x.dim) {
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp)
sub2ind_rcpp2 <- function(sub, x.dim) {
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind2(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp2)
library(subsets)
n <- 3000
dims <- x.dim <- c(n+1, n+1)
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
lst <- sub <- list(seq_len(n), rev(seq_len(n/2)))
myxp <- sub2ind_rcpp(lst, dims)
myxp2 <- sub2ind_rcpp2(lst, dims)
s2c <- coord2ind(sub2coord(lst, dims), dims)
all(myxp == s2c)
all(myxp2 == s2c)
foo <- bench::mark(
# control = list(seq_len(n), rev(seq_len(n/2)), seq_len(n)),
coord2ind(sub2coord(lst, dims), dims),
sub2ind_rcpp(sub, dims),
sub2ind_rcpp2(sub, dims),
min_iterations = 200,
check = FALSE
)
foo
ggplot2::autoplot(foo)
n <- 3000
dims <- x.dim <- c(n+1, n+1)
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
lst <- sub <- list(seq_len(n - 1), rev(seq_len(n/2)))
myxp <- sub2ind_rcpp(lst, dims)
myxp2 <- sub2ind_rcpp2(lst, dims)
s2c <- coord2ind(sub2coord(lst, dims), dims)
all(myxp == s2c)
all(myxp2 == s2c)
foo <- bench::mark(
# control = list(seq_len(n), rev(seq_len(n/2)), seq_len(n)),
coord2ind(sub2coord(lst, dims), dims),
sub2ind_rcpp(sub, dims),
sub2ind_rcpp2(sub, dims),
min_iterations = 200,
check = FALSE
)
foo
ggplot2::autoplot(foo)
Rcpp::cppFunction(
"
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out';
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out;
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
Range myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out;
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_rep_sugar(IntegerVector x, int times) {
return rep(x, times);
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
Range myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out;
}
"
)
x <- seq_len(1e6)
foo <- bench::mark(
rcpp_rep_int(x, 100),
rcpp_rep_sugar(x, 100)
)
foo
ggplot2::autoplot(foo)
x <- seq_len(1e5)
foo <- bench::mark(
rcpp_rep_int(x, 100),
rcpp_rep_sugar(x, 100),
min_iterations = 100
)
x <- seq_len(1e5)
foo <- bench::mark(
rcpp_rep_int(x, 100),
rcpp_rep_sugar(x, 100),
min_iterations = 100
)
foo
ggplot2::autoplot(foo)
Rcpp::sourceCpp(
"
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
Range myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out;
}
// [[Rcpp::export]]
IntegerVector rcpp_sub2ind2(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
Rcpp::IntegerVector coord(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
coord = rcpp_rep_int(rep_each(temp, reps_each[j]), reps_whole[j]);
out = out + (coord - 1) * myprod; // final addition
}
}
return(out);
}
"
)
Rcpp::sourceCpp(
code =  "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
Range myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out;
}
// [[Rcpp::export]]
IntegerVector rcpp_sub2ind2(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
Rcpp::IntegerVector coord(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
coord = rcpp_rep_int(rep_each(temp, reps_each[j]), reps_whole[j]);
out = out + (coord - 1) * myprod; // final addition
}
}
return(out);
}
"
)
sub2ind_rcpp <- function(sub, x.dim) {
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp)
sub2ind_rcpp2 <- function(sub, x.dim) {
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind2(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp2)
library(subsets)
n <- 3000
dims <- x.dim <- c(n+1, n+1)
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
lst <- sub <- list(seq_len(n - 1), rev(seq_len(n/2)))
myxp <- sub2ind_rcpp(lst, dims)
myxp2 <- sub2ind_rcpp2(lst, dims)
s2c <- coord2ind(sub2coord(lst, dims), dims)
all(myxp == s2c)
all(myxp2 == s2c)
foo <- bench::mark(
# control = list(seq_len(n), rev(seq_len(n/2)), seq_len(n)),
coord2ind(sub2coord(lst, dims), dims),
sub2ind_rcpp(sub, dims),
sub2ind_rcpp2(sub, dims),
min_iterations = 200,
check = FALSE
)
foo
ggplot2::autoplot(foo)
n <- 5e6
x <- rnorm(n)
y <- rnorm(n)
tol <- sqrt(.Machine$double.eps)
bm.equal <- bench::mark(
abs(x - y) < tol,
x %d==% y,
min_iterations = 500
)
library(tinycodet)
library(ggplot2)
n <- 5e6
x <- rnorm(n)
y <- rnorm(n)
tol <- sqrt(.Machine$double.eps)
bm.equal <- bench::mark(
abs(x - y) < tol,
x %d==% y,
min_iterations = 500
)
bm.equal
ggplot2::autoplot(bm.equal)
save(bm.equal, file = "bm.equal.RData")
getwd()
setwd("D:/D Desktop/Publications/R package tinycodet/tinycodet/vignettes/articles")
save(bm.equal, file = "bm.equal.RData")
n <- 5e6
x <- rnorm(n)
y <- rnorm(n)
tol <- sqrt(.Machine$double.eps)
bm.unequal <- bench::mark(
abs(x - y) >= tol,
x %d!=% y,
min_iterations = 500
)
bm.unequal
ggplot2::autoplot(bm.unequal)
save(bm.unequal, file = "bm.unequal.RData")
n <- 5e6
x <- rnorm(n)
y <- rnorm(n)
tol <- sqrt(.Machine$double.eps)
setwd("D:/D Desktop/Publications/R package tinycodet/tinycodet/vignettes/articles")
bm.equal <- bench::mark(
x == y,
abs(x - y) < tol,
x %d==% y,
min_iterations = 500
)
bm.equal
ggplot2::autoplot(bm.equal)
save(bm.equal, file = "bm.equal.RData")
n <- 5e6
x <- rnorm(n)
y <- rnorm(n)
tol <- sqrt(.Machine$double.eps)
bm.unequal <- bench::mark(
x != y,
abs(x - y) >= tol,
x %d!=% y,
min_iterations = 500
)
bm.unequal
ggplot2::autoplot(bm.unequal)
n <- 5e6
x <- rnorm(n)
y <- rnorm(n)
tol <- sqrt(.Machine$double.eps)
bm.equal <- bench::mark(
"base `x == y`" = x == y,
"base `abs(x - y) < tol`" = abs(x - y) < tol,
"tinycodet `x %d==% y`" = x %d==% y,
min_iterations = 500
)
bm.equal
ggplot2::autoplot(bm.equal)
save(bm.equal, file = "bm.equal.RData")
getwd()
n <- 5e6
x <- rnorm(n)
y <- rnorm(n)
tol <- sqrt(.Machine$double.eps)
bm.unequal <- bench::mark(
"base `x != y`" = x != y,
"base `bs(x - y) >= tol`" = abs(x - y) >= tol,
"tinycodet `x %d!=% y`" = x %d!=% y,
min_iterations = 500
)
ggplot2::autoplot(bm.unequal)
save(bm.unequal, file = "bm.unequal.RData")
setwd("D:/D Desktop/Publications/R package tinycodet/tinycodet/vignettes/articles")
n <- 5e6
x <- rnorm(n)
y <- rnorm(n)
tol <- sqrt(.Machine$double.eps)
bm.equal <- bench::mark(
"base `x == y`" = x == y,
"base `abs(x - y) < tol`" = abs(x - y) < tol,
"tinycodet `x %d==% y`" = x %d==% y,
min_iterations = 500
)
bm.equal
ggplot2::autoplot(bm.equal)
save(bm.equal, file = "bm.equal.RData")
n <- 5e6
x <- rnorm(n)
y <- rnorm(n)
tol <- sqrt(.Machine$double.eps)
bm.unequal <- bench::mark(
"base `x != y`" = x != y,
"base `abs(x - y) >= tol`" = abs(x - y) >= tol,
"tinycodet `x %d!=% y`" = x %d!=% y,
min_iterations = 500
)
bm.unequal
ggplot2::autoplot(bm.unequal)
save(bm.unequal, file = "bm.unequal.RData")
?purrr::safely()
purrr::safely
purrr:::capture_error
purrr::safely(mean)
newmean <- purrr::safely(mean)
newmean
newfun <- function(){}
View(newfun)
newfun()
args(mean)
match.arg(mean)
match.call(mean)
as.list(match.call(mean))
?args
formals(mean)
?tryCatch
