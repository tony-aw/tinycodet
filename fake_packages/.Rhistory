}
foo <- bench::mark(
base = x[100, seq_len(ncol(x)), 100],
sub2ind_3d = tempfun(100, seq_len(ncol(x)), 100, dim(x)),
sub2ind = sub2ind(list(100, seq_len(ncol(x)), 100), dim(x), checks = FALSE),
linear = x[sub2ind(list(100, seq_len(ncol(x)), 100), dim(x), checks = FALSE)],
min_iterations = 500,
check = FALSE
)
foo
2.9/1.3
body <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
SEXP flatind = PROTECT(allocVector(INTSXP, ni * nj * nk));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
INTEGER(flatind)[counter] = temp;
counter++;
}
}
}
UNPROTECT(1);
return flatind;
"
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
SEXP flatind = PROTECT(allocVector(INTSXP, ni * nj * nk));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
INTEGER(flatind)[counter] = temp;
counter++;
}
}
}
UNPROTECT(1);
return flatind;
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body
)
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind_3d(
IntegerVector ind1, IntegerVector ind2, Rcpp::IntegerVector ind3, IntegerVector dimcumprod
) {
int ni = ind1.length();
int nj = ind2.length();
int nk = ind3.length();
R_xlen_t counter = 0;
IntegerVector flatind(ni * nj * nk);
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
flatind[counter] = ind1[i] + dimcumprod[0]  * (ind2[j] - 1) + dimcumprod[1] * (ind3[k] - 1);
counter++;
}
}
}
return flatind;
}
"
)
x.dim <- c(2000L, 2000L, 3L)
x.len <- as.integer(prod(x.dim))
x <- array(sample(1:x.len), dim = x.dim)
ind1 <- 1:500
ind2 <- seq_len(x.dim[2])
ind3 <- 1:2
dimcumprod <- as.integer(cumprod(x.dim))
all(
rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod) ==
C_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
)
foo <- bench::mark(
rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod),
C_sub2ind_3d(ind1, ind2, ind3, dimcumprod),
min_iterations = 500
)
obj <- summary(foo)
obj
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(n, sizeof(int));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
return buf;
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(n, sizeof(int));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
counter--;
PROTECT(flatind = allocVector(INTSXP, j));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return flatind;
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body
)
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(n, sizeof(int));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
counter--;
PROTECT(flatind = allocVector(INTSXP, j));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(n, sizeof(int));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
counter--;
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(n, sizeof(int));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(ni * nj * nk, sizeof(int));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(ni * nj * nk, sizeof(int));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
if(counter > 0) {
counter--;
}
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(ni * nj * nk, sizeof(int));
SEXP flatind;
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
if(counter > 0) {
counter--;
}
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
x.dim <- c(1500L, 1500L, 3L)
x.len <- as.integer(prod(x.dim))
x <- array(sample(1:x.len), dim = x.dim)
ind1 <- 1:500
ind2 <- seq_len(x.dim[2])
ind3 <- 1:2
dimcumprod <- as.integer(cumprod(x.dim))
all(
rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod) ==
C_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
)
C_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
test_rcpp <- rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
test_rcpp <- rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
test_c <- C_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(ni * nj * nk, sizeof(int));
SEXP flatind;
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
x.dim <- c(1500L, 1500L, 3L)
x.len <- as.integer(prod(x.dim))
x <- array(sample(1:x.len), dim = x.dim)
ind1 <- 1:500
ind2 <- seq_len(x.dim[2])
ind3 <- 1:2
dimcumprod <- as.integer(cumprod(x.dim))
test_rcpp <- rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
test_c <- C_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
all( test_rcpp == test_c)
foo <- bench::mark(
rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod),
C_sub2ind_3d(ind1, ind2, ind3, dimcumprod),
min_iterations = 500
)
obj <- summary(foo)
obj
# Overview pages:
?squarebrackets::squarebrackets_help
?squarebrackets::squarebrackets_immutable_classes
?squarebrackets::squarebrackets_mutable_classes
?squarebrackets::squarebrackets_indx_args
?squarebrackets::squarebrackets_duplicates
?squarebrackets::squarebrackets_PassByReference
?squarebrackets::squarebrackets_technical
?squarebrackets::squarebrackets_inconveniences
?squarebrackets::class_mutable_atomic
# generic methods:
?squarebrackets::sb_x()
?squarebrackets::sb_rm()
?squarebrackets::sb_mod()
?squarebrackets::sb_set()
?squarebrackets::sb_coe()
?squarebrackets::sb2_coe()
?squarebrackets::sb_before()
?squarebrackets::sb2_rec()
?squarebrackets::sb_setRename()
?squarebrackets::sb_currentBindings()
# helper functions:
?squarebrackets::n()
?squarebrackets::sub2ind()
?squarebrackets::match_all()
?squarebrackets::idx_by()
?squarebrackets::idx_ord()
?squarebrackets::idx()
?squarebrackets::idx_ord()
squarebrackets::idx_ord_v()
?squarebrackets::idx_ord_v()
?squarebrackets::seq_rec2()
?squarebrackets::seq_names()
?squarebrackets::seq_mlen()
?squarebrackets::indx_x()
# Overview pages:
?squarebrackets::squarebrackets_help
ut <- loadNamespace("utils")
View(ut)
ut[["specialOps"]]
baseenv()[["??"]]
b <- loadNamespace("base")
b
p <- parent.env(ut)
View(p)
p
ls(p)
help.search("??")
View(ut)
View(ut[["?"]])
`<-`
.Internal("??")
.Primitive("??")
?.Internal
.External("??")
?help
?`?`
?"stringi::stri_c"
?stringi::stri_c
usethis::use_tidy_dependencies()
usethis::use_tidy_dependencies
?tinycodet::import_as
?usethis::use_standalone
?dplyr
??dplyr
?collapse::setv
?data.table
??data.table
foo <- Rgraphviz::plot
environment(foo)
foo2 <- Rgraphviz::AgEdge
environment(foo2)
asNamespace(environment(foo2))
getNamespaceName
getNamespaceName(foo)
getNamespaceName(environment(foo))
rg <- loadNamespace("Rgraphviz")
View(rg)
rg[[".__T__plot:base"]]
Tplot <- rg[[".__T__plot:base"]]
View(Tplot)
parent.env(Tplot)
rg
View(rg)
imp.rg <- parent.env(rg)
View(imp.rg)
imp.rg[["plot"]]
Rplot <- imp.rg[["plot"]]
Rplot
?isS4Method
??isS4Method
?setClass
install.packages("aorsf")
tinycodet::import_as(~ af., "aorsf")
View(af.)
af2 <- new.env()
import::into(af2, .from = "aorsf", .all = TRUE)
sort(names(af.))
sort(names(af2))
sort(names(af.))[-1] == sort(names(af2))
#' @rdname tinycodetfakepkg6
#' @export
setClass("plottingclass", slots = c(x = "numeric", y = "numeric"))
#' @rdname tinycodetfakepkg6
#' @export
plottingClass <- setClass("plottingclass", slots = c(x = "numeric", y = "numeric"))
setMethod("plot", "Ragraph", function(x, y) paste0(x, y))
setMethod("plot", "plottingclass", function(x, y) paste0(x, y))
plottingClass
new("plottingclass", x = 1:10, y = 1:10)
myobj <- new("plottingclass", x = 1:10, y = 1:10)
plot(myobj)
setMethod("plot", "plottingclass", function(obj) paste0(obj$x, obj$y))
plot.plottingclass
rg$AgEdge
help.import(i =rg$AgEdge)
library(tinycodet)
help.import(i =rg$AgEdge)
help.import(i =rg.$AgEdge)
import_as(~ rg., "Rgraphviz")
help.import(i =rg.$AgEdge)
rg[[".__T__show:methods"]]
setwd("D:/D Desktop/Publications/R package tinycodet/tinycodet/fake_packages")
sessionInfo()
if(!require(devtools))install.packages("devtools")
if(!require(roxygen2))install.packages("roxygen2")
if(!require(usethis)){install.packages("usethis")}
if(!require(rcmdcheck)){install.packages("rcmdcheck")}
if(!require(spelling)){install.packages("spelling")}
if(!require(tinytex)){install.packages("tinytex")}
if(!require(Rcpp)){install.packages("Rcpp")}
if(!require(pkgdown)){install.packages("pkgdown")}
if(!require(goodpractice)){install.packages("goodpractice")}
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
# create("tinycodetfakepkg6")
document("./tinycodetfakepkg6")
install("tinycodetfakepkg1")
# create("tinycodetfakepkg6")
document("./tinycodetfakepkg6")
devtools::build_manual(
"./tinycodetfakepkg6", "./tinycodetfakepkg6"
) # if this fails...:
rcmdcheck::rcmdcheck("./tinycodetfakepkg6")
# create("tinycodetfakepkg6")
document("./tinycodetfakepkg6")
devtools::build_manual(
"./tinycodetfakepkg6", "./tinycodetfakepkg6"
) # if this fails...:
rcmdcheck::rcmdcheck("./tinycodetfakepkg6")
install("tinycodetfakepkg6")
