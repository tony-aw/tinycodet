library(tinycodet)
library(ggplot2)
# stri_locate_ith vs first/last
n <- 1e5
x <- rep(paste0(1:50, collapse = ""), n)
p <- "\\d"
i <- -1
foo <- bench::mark(
stri_locate_ith_regex(x, p, -1),
stringi::stri_locate_last(x, regex = p),
min_iterations = 100
)
foo
autoplot(foo)
?tinycodet::str_search
?rep.int
rep.int(1.0, 2)
rep.int(1.0, 2) |> class()
rep.int(1.0, 2) |> is.integer()
pmax
library(tinycodet)
foo <- crandep::get_dep_all_packages()
unique(foo$type)
foo <- foo[foo$type == "linking to",]
unique(foo$to)
?tinycodet::stri_locate_ith()
?collapse::setattrib()
collapse::unattrib
x <- 1:1e6
names(x) <- sample(letters, 1e6, TRUE)
x <- 1:1e6
names(x) <- sample(letters, 1e6, TRUE)
y <- 1e6:1
names(y) <- sample(letters, 1e6, TRUE)
tempfun <- function(x, y) {
attributes(x) <- NULL
attributes(y) <- NULL
return(x == y)
}
tempfun <- function(x, y) {
attributes(x) <- NULL
attributes(y) <- NULL
return(x == y)
}
foo <- bench::mark(
x == y,
tempfun(x, y),
min_iterations = 200,
check = FALSE
)
foo
Rcpp::cppFunction(
"
LogicalVector rcpp_ntt_equal_dbl(
NumericVector x, NumericVector y, int tol
) {
int n = x.length();
LogicalVector out(n);
out = fabs(x - y) < tol;
return out;
}
"
)
Rcpp::cppFunction(
"
LogicalVector rcpp_ntt_equal_dbl(
NumericVector x, NumericVector y, int tol
) {
int n = x.length();
LogicalVector out(n);
out = fabs(x - y);
return out;
}
"
)
library(tinycodet)
# internal error avoidance ====
x <- as.integer(1:10)
y <- as.integer(1:10)
# internal error avoidance ====
x <- as.integer(1:10)
y <- as.integer(1:10)
tinycodet:::.rcpp_ntt_eq_dbl_00(x, y)
tinycodet:::.rcpp_ntt_eq_dbl_00(x, y, sqrt(.Machine$double.eps))
tinycodet:::.rcpp_ntt_eq_dbl_00(x, y, sqrt(.Machine$double.eps), TRUE)
expect_silent(
tinycodet:::.rcpp_ntt_eq_dbl_01(x, y[1], sqrt(.Machine$double.eps), TRUE)
)
library(tinytest)
# internal error avoidance ====
x <- as.integer(1:10)
y <- as.integer(1:10)
expect_silent(
tinycodet:::.rcpp_ntt_eq_dbl_00(x, y, sqrt(.Machine$double.eps), TRUE)
)
expect_silent(
tinycodet:::.rcpp_ntt_eq_dbl_01(x, y[1], sqrt(.Machine$double.eps), TRUE)
)
expect_silent(
tinycodet:::.rcpp_ntt_eq_dbl_10(x[1], y, sqrt(.Machine$double.eps), TRUE)
)
expect_silent(
tinycodet:::.rcpp_ntt_greater_dbl_00(x, y, sqrt(.Machine$double.eps), TRUE)
)
expect_silent(
tinycodet:::.rcpp_ntt_greater_dbl_01(x, y[1], sqrt(.Machine$double.eps), TRUE)
)
expect_silent(
tinycodet:::.rcpp_ntt_greater_dbl_10(x[1], y, sqrt(.Machine$double.eps), TRUE)
)
# internal error avoidance ====
x <- as.integer(1:10)
y <- as.integer(1:10)
expect_silent(
tinycodet:::.rcpp_ntt_eq_dbl_00(x, y, sqrt(.Machine$double.eps), TRUE)
)
expect_silent(
tinycodet:::.rcpp_ntt_eq_dbl_01(x, y[1], sqrt(.Machine$double.eps), TRUE)
)
expect_silent(
tinycodet:::.rcpp_ntt_eq_dbl_10(x[1], y, sqrt(.Machine$double.eps), TRUE)
)
expect_silent(
tinycodet:::.rcpp_ntt_greater_dbl_00(x, y, sqrt(.Machine$double.eps), TRUE)
)
expect_silent(
tinycodet:::.rcpp_ntt_greater_dbl_01(x, y[1], sqrt(.Machine$double.eps), TRUE)
)
expect_silent(
tinycodet:::.rcpp_ntt_greater_dbl_10(x[1], y, sqrt(.Machine$double.eps), TRUE)
)
expect_silent(
tinycodet:::.rcpp_ntt_smaller_dbl_00(x, y, sqrt(.Machine$double.eps), TRUE)
)
expect_silent(
tinycodet:::.rcpp_ntt_smaller_dbl_01(x, y[1], sqrt(.Machine$double.eps), TRUE)
)
expect_silent(
tinycodet:::.rcpp_ntt_smaller_dbl_10(x[1], y, sqrt(.Machine$double.eps), TRUE)
)
# internal error avoidance ====
x <- as.integer(1:10)
lower <- x - 1L
upper <- x + 1L
expect_silent(
tinycodet:::.rcpp_ntt_between_dbl_00(x, lower, upper, sqrt(.Machine$double.eps), TRUE)
)
expect_silent(
tinycodet:::.rcpp_ntt_between_dbl_00(x, lower, upper, sqrt(.Machine$double.eps))
)
# internal error avoidance ====
x <- as.integer(1:10)
lower <- x - 1L
upper <- x + 1L
expect_silent(
tinycodet:::.rcpp_ntt_between_dbl_00(x, lower, upper, sqrt(.Machine$double.eps))
)
expect_silent(
tinycodet:::.rcpp_ntt_between_dbl_01(x, lower[1], upper[1], sqrt(.Machine$double.eps))
)
expect_silent(
tinycodet:::.rcpp_ntt_between_dbl_10(x[1], lower, upper, sqrt(.Machine$double.eps))
)
with
with.data.frame
with.default()
with.default
?eval
model.frame
model.frame.default
?nargs
all.vars(~ `hello`)
with.default
?with
names(NULL)
d <- import_data("ggplot2", "mpg")
library(tinycodet)
library(tinycodet)
y <- 2
myform <- ~ a^y
expect_equal(
with(x, a^2),
with_pro(x, myform)
)
with(x, a^2)
# with_pro ====
x <- data.frame(a = 1:10, b = letters[1:10])
y <- 2
myform <- form(~ a^y, env = environment())
with(x, a^2)
with_pro(x, myform)
with(x, a^y)
library(tinytest)
expect_equal(
with(x, a^y),
with_pro(x, myform)
)
# with_pro - errors ====
x <- data.frame(a = 1:10, b = letters[1:10])
myform <- form(~ a^2)
expect_error(
with_pro(x, ~ c^2),
pattern = "unknown variable(s) given",
fixed = TRUE
)
expect_error(
with_pro(1:10, myform),
pattern = "`data` must be a recursive object",
fixed = TRUE
)
expect_error(
with_pro(x, "a^2"),
pattern = "`form` must be a formula",
fixed = TRUE
)
expect_error(
with_pro(x, a ~ b),
pattern = "improper formula given"
)
# with_pro ====
x <- data.frame(a = 1:10, b = letters[1:10])
myform <- form(~ a^2)
expect_equal(
with(x, a^2),
with_pro(x, myform)
)
y <- 2
myform <- form(~ a^y, env = environment())
expect_equal(
with(x, a^y),
with_pro(x, myform)
)
# with_pro - errors ====
x <- data.frame(a = 1:10, b = letters[1:10])
myform <- form(~ a^2)
expect_error(
with_pro(x, ~ c^2),
pattern = "unknown variable(s) given",
fixed = TRUE
)
expect_error(
with_pro(1:10, myform),
pattern = "`data` must be a recursive object",
fixed = TRUE
)
expect_error(
with_pro(x, "a^2"),
pattern = "`form` must be a formula",
fixed = TRUE
)
expect_error(
with_pro(x, a ~ b),
pattern = "improper formula given"
)
my_x <- ~ colX # regular column name
my_y <- ~ `1st` # special column name
fill <- ~ colFill
expect_equal(
ggplot2::aes(x = colX, y = `1st`, fill = colFill),
aes_pro(my_x, my_y, fill = fill)
)
my_x <- ~ colX^2 # regular column name with function/expression
my_y <- ~ `1st`^2 # special column name with function/expression
fill <- ~ colFill^2
expect_equal(
ggplot2::aes(colX^2, `1st`^2, fill = colFill^2),
aes_pro(my_x, my_y, fill = fill)
)
# aes_pro - errors ====
my_x <- "colx"
my_y <- "coly"
# aes_pro - errors ====
my_x <- "colx"
my_y <- "coly"
expect_error(
aes_pro(my_x, my_y),
pattern = "formula inputs must be given"
)
expect_error(
aes_pro(x ~ y, y ~ x),
pattern = "improper formula given"
)
?with
?rlang::quotation
with.default
within.data.frame
?with
?interactive
library(tinycodet)
iris$Sepal.Len
# safer_partialmatch ====
safer_partialmatch()
iris$Sepal.Len
expect_warning(
iris$Sepal.Len
)
# special _import_as() tests
library(tinycodet)
library(tinytest)
# safer_partialmatch ====
safer_partialmatch()
expect_warning(
iris$Sepal.Len
)
