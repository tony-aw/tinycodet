// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_anybad_loc
bool rcpp_anybad_loc(IntegerVector lower, IntegerVector upper);
RcppExport SEXP _tinycodet_rcpp_anybad_loc(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_anybad_loc(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_prep_ns
List rcpp_prep_ns(List ns, CharacterVector nms, String pkg);
RcppExport SEXP _tinycodet_rcpp_prep_ns(SEXP nsSEXP, SEXP nmsSEXP, SEXP pkgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type nms(nmsSEXP);
    Rcpp::traits::input_parameter< String >::type pkg(pkgSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_prep_ns(ns, nms, pkg));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_n_matches
Rcpp::IntegerVector rcpp_n_matches(List lst);
RcppExport SEXP _tinycodet_rcpp_n_matches(SEXP lstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type lst(lstSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_n_matches(lst));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_convert_i0
IntegerVector rcpp_convert_i0(IntegerVector n_matches, IntegerVector i);
RcppExport SEXP _tinycodet_rcpp_convert_i0(SEXP n_matchesSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type n_matches(n_matchesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_convert_i0(n_matches, i));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_convert_i1
IntegerVector rcpp_convert_i1(IntegerVector n_matches, int i);
RcppExport SEXP _tinycodet_rcpp_convert_i1(SEXP n_matchesSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type n_matches(n_matchesSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_convert_i1(n_matches, i));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_alloc_stri_locate_ith
IntegerMatrix rcpp_alloc_stri_locate_ith(List p1, IntegerVector n_matches, IntegerVector i);
RcppExport SEXP _tinycodet_rcpp_alloc_stri_locate_ith(SEXP p1SEXP, SEXP n_matchesSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n_matches(n_matchesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_alloc_stri_locate_ith(p1, n_matches, i));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP C_any_neg(SEXP);
RcppExport SEXP C_any_nonpos(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_tinycodet_rcpp_anybad_loc", (DL_FUNC) &_tinycodet_rcpp_anybad_loc, 2},
    {"_tinycodet_rcpp_prep_ns", (DL_FUNC) &_tinycodet_rcpp_prep_ns, 3},
    {"_tinycodet_rcpp_n_matches", (DL_FUNC) &_tinycodet_rcpp_n_matches, 1},
    {"_tinycodet_rcpp_convert_i0", (DL_FUNC) &_tinycodet_rcpp_convert_i0, 2},
    {"_tinycodet_rcpp_convert_i1", (DL_FUNC) &_tinycodet_rcpp_convert_i1, 2},
    {"_tinycodet_rcpp_alloc_stri_locate_ith", (DL_FUNC) &_tinycodet_rcpp_alloc_stri_locate_ith, 3},
    {"C_any_neg",    (DL_FUNC) &C_any_neg,    1},
    {"C_any_nonpos", (DL_FUNC) &C_any_nonpos, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_tinycodet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
