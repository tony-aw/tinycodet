// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_prep_ns
List rcpp_prep_ns(const List ns, const CharacterVector nms, const String pkg);
RcppExport SEXP _tinycodet_rcpp_prep_ns(SEXP nsSEXP, SEXP nmsSEXP, SEXP pkgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type nms(nmsSEXP);
    Rcpp::traits::input_parameter< const String >::type pkg(pkgSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_prep_ns(ns, nms, pkg));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP C_any_badloc(SEXP, SEXP);
RcppExport SEXP C_any_neg(SEXP);
RcppExport SEXP C_any_nonpos(SEXP);
RcppExport SEXP C_do_stri_locate_ith0(SEXP, SEXP, SEXP);
RcppExport SEXP C_do_stri_locate_ith1(SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_tinycodet_rcpp_prep_ns", (DL_FUNC) &_tinycodet_rcpp_prep_ns, 3},
    {"C_any_badloc",          (DL_FUNC) &C_any_badloc,          2},
    {"C_any_neg",             (DL_FUNC) &C_any_neg,             1},
    {"C_any_nonpos",          (DL_FUNC) &C_any_nonpos,          1},
    {"C_do_stri_locate_ith0", (DL_FUNC) &C_do_stri_locate_ith0, 3},
    {"C_do_stri_locate_ith1", (DL_FUNC) &C_do_stri_locate_ith1, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_tinycodet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
