% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/x.import.R
\name{x.import}
\alias{x.import}
\alias{help.import}
\alias{is.tinyimport}
\alias{attr.import}
\title{Helper functions for the tinycodet package import system}
\usage{
help.import(..., i, alias)

is.tinyimport(x)

attr.import(alias, which = NULL)
}
\arguments{
\item{...}{further arguments to be passed to \link[utils]{help}.}

\item{i}{either one of the following: \cr
\itemize{
\item a function (use back-ticks when the function is an infix operator).
Examples:  \code{myfun} , \code{`\%operator\%`} , \code{myalias.$some_function} .
If a function, the \code{alias} argument is ignored.
\item a string giving the function name or topic (i.e. \code{"myfun"}, \code{"thistopic"}).
If a string, argument \code{alias} must be specified also.
}}

\item{alias}{the alias object as created by the \link{import_as} function. \cr}

\item{x}{the object/function to be tested.}

\item{which}{The attributes to list. If \code{NULL}, all attributes will be returned. \cr
Possibilities: "pkgs", "conflicts", "versions", "args", and "ordered_object_names".}
}
\value{
For \code{help.import()}: \cr
Opens the appropriate help page. \cr
\cr
For \code{is.tinyimport()}: \cr
Returns \code{TRUE} if the function is produced by
\link{import_as}, \link{import_inops}, or \link{import_LL},
and returns \code{FALSE} if it is not. \cr
\cr
For \code{attr.import(alias, which = NULL)}: \cr
All special attributes of the given alias object are returned as a list. \cr
\cr
For \code{attr.import(alias, which = "pkgs")}: \cr
Returns a list with 3 elements:
\itemize{
\item packages_order: a character vector of package names,
giving the packages in the order they were loaded in the alias object.
\item main_package: a string giving the name of the main package.
Re-exported functions, if present, are loaded together with the main package.
\item re_exports.pkgs: a character vector of package names,
giving the packages from which the re-exported functions in the main package were taken. \cr \cr
}

For \code{attr.import(alias, which = "conflicts")}: \cr
The order in which packages are loaded in the alias object
(see attribute \code{pkgs$packages_order})
matters:
Functions from later named packages overwrite those from earlier named packages,
in case of conflicts. \cr
The "conflicts" attribute returns a data.frame showing exactly which functions overwrite
functions from earlier named packages, and as such "win" the conflicts. \cr
\cr
For \code{attr.import(alias, which = "versions")}: \cr
A data.frame, giving the version of every package loaded in the alias,
ignoring re-exports. \cr
\cr
For \code{attr.import(alias, which = "args")}: \cr
Returns a list of input arguments.
These were the arguments supplied to \link{import_as} when
the alias object in question was created. \cr
\cr
For \code{attr.import(alias, which = "ordered_object_names")}: \cr
Gives the names of the objects in the alias, in the order as they were loaded. \cr
For conflicting objects, the last load is used for the ordering. \cr
Note that if argument \code{re_exports} is \code{TRUE},
re-exported functions are loaded when the main package is loaded, thus changing this order slightly.
}
\description{
The \code{help.import()} function
finds the help file for functions in an alias object or exposed infix operators. \cr
\cr
The \code{is.tinyimport()} function
checks if an alias object or an exposed function is of class \code{tinyimport};
i.e. if it is an object produced by the
\link{import_as}, \link{import_inops}, or \link{import_LL} function. \cr
\cr
The \code{attr.import()} function
gets one specific special attributes or all special attributes
from an alias object returned by \link{import_as}. \cr
\cr

\ifelse{html}{\href{https://tony-aw.github.io/tinycodet/articles/c_import_additional.html}{\figure{aboutimport-additionalfunctions-darkgreen.svg}{options: alt='[ADDITIONAL FUNCTIONS]'}}}{\href{https://tony-aw.github.io/tinycodet/articles/c_import_additional.html}{about import: additional functions}} \cr
}
\details{
For \code{help.import(...)}: \cr
Do not use the \code{topic} / \code{package} and
\code{i} / \code{alias} argument sets together.
It's either one set or the other. \cr
For example:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{
import_as(~ mr., "magrittr")
import_inops(mr.)
help.import(i=mr.$add)
help.import(i=`\%>\%`)
help.import(i="add", alias=mr.)
help.import(topic = "\%>\%", package = "magrittr")

}\if{html}{\out{</div>}}
}
\examples{

import_as(~ to., "tinycodet")
import_inops(to.)
`\%s==\%` <- stringi::`\%s==\%`

is.tinyimport(to.) # returns TRUE
is.tinyimport(`\%:=\%`) # returns TRUE
is.tinyimport(`\%s==\%`) # returns FALSE: not imported by tinycodet import system

attr.import(to., which="conflicts")




}
\seealso{
\code{\link[=tinycodet_import]{tinycodet_import()}}
}
