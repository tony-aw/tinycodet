% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/x.import.R
\name{x.import}
\alias{x.import}
\alias{help.import}
\alias{attr.import}
\title{Helper functions for the tinyoperations package import system}
\usage{
help.import(..., i, alias)

attr.import(alias, which = NULL)
}
\arguments{
\item{...}{further arguments to be passed to \link[utils]{help}.}

\item{i}{either one of the following: \cr
\itemize{
\item a function (use back-ticks when the function is an infix operator).
Examples:  \code{myfun} , \code{`\%operator\%`} , \code{myalias.$some_function} .
If a function, the \code{alias} argument is ignored.
\item a string giving the function name or topic (i.e. \code{"myfun"}, \code{"thistopic"}).
If a string, argument \code{alias} must be specified also.
}}

\item{alias}{the alias object as created by the \link{import_as} function. \cr}

\item{which}{The attributes to list. If \code{NULL}, all attributes will be returned. \cr
Possibilities: "pkgs", "conflicts", "args".}
}
\value{
For \code{help.import()}: \cr
Opens the appropriate help page. \cr
\cr
For \code{attr.import(alias, which = NULL)}: \cr
Returns ALL special attributes of the given alias object are returned as a list. \cr
\cr
For \code{attr.import(alias, which = "pkgs")}: \cr
Returns a list with 3 elements:
\itemize{
\item packages_order: a character vector of package names,
giving the packages in the order they were loaded in the alias object.
\item main_package: a string giving the name of the main package.
Re-exported functions, if present, are loaded together with the main package.
\item re_exports.pkgs: a character vector of package names,
giving the packages from which the re-exported functions in the main package were taken. \cr \cr
}

For \code{attr.import(alias, which = "conflicts")}: \cr
The order in which packages are loaded in the alias object
(see attribute \code{pkgs$packages_order})
matters:
Functions from later named packages overwrite those from earlier named packages,
in case of conflicts. \cr
The "conflicts" attribute returns a data.frame showing exactly which functions overwrite
functions from earlier named packages, and as such "win" the conflicts. \cr
\cr
For \code{attr.import(alias, which = "args")}: \cr
Returns a list of input arguments.
These were the arguments supplied to \link{import_as} when
the alias object in question was created.
}
\description{
The \code{help.import()} function
finds the help file for functions in an alias object or exposed infix operators. \cr
\cr
The \code{attr.import()} function
gets one specific special attributes or all special attributes
from an alias object returned by \link{import_as}. \cr
}
\details{
For \code{help.import(...)}: \cr
Do not use the \code{topic} / \code{package} and
\code{i} / \code{alias} arguments together. It's either one set or the other. \cr
\cr
}
\examples{

\dontrun{
import_as(mr., "magrittr")
import_inops("magrittr")

attr.import(mr.)
attr.import(mr., which="conflicts")

help.import(i=mr.$add)
help.import(i=`\%>\%`)
help.import(i="add", alias=mr.)
}



}
\seealso{
\code{\link[=tinyoperations_import]{tinyoperations_import()}}
}
