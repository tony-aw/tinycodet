% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stri_locate_ith.R
\name{stri_locate_ith}
\alias{stri_locate_ith}
\title{Locate \eqn{i^{th}} Pattern Occurrence}
\usage{
stri_locate_ith(str, i, ..., regex, fixed, coll, charclass)
}
\arguments{
\item{str}{a string or character vector.}

\item{i}{a number, or a numeric vector of the same length as \code{str}.
This gives the \eqn{i^{th}} instance to be replaced. \cr
Positive numbers are counting from the left. Negative numbers are counting from the right.
I.e.: \cr
\itemize{
\item \code{stri_locate_ith(str, i=1, ...)} \cr
gives the position (range) of the first occurrence of a pattern. \cr
\item \code{stri_locate_ith(str, i=-1, ...)} \cr
gives the position (range) of the last occurrence of a pattern. \cr
\item \code{stri_locate_ith(str, i=2, ...)}\cr
gives the position (range) of the second occurrence of a pattern. \cr
\item \code{stri_locate_ith(str, i=-2, ...)} \cr
gives the position (range) of the second-last occurrence of a pattern. \cr
}
If \code{abs(i)} is larger than the number of instances,
the first (if \code{i < 0}) or last (if \code{i > 0}) instance will be given. \cr
For example: suppose a string has \code{3} instances of some pattern; \cr
then if \code{i >= 3} the third instance will be located, \cr
and if \code{i <= -3} the first instance will be located. \cr}

\item{...}{more arguments to be supplied to
\link[stringi]{stri_locate} and \link[stringi]{stri_count}. \cr
Do not supply the arguments
\code{omit_no_match}, \code{get_length}, or \code{pattern},
as they are already specified internally.
Supplying these arguments anyway will result in an error.}

\item{regex, fixed, coll, charclass}{a character vector of search patterns,
as in \link[stringi]{stri_locate}. \cr}
}
\value{
The \code{stri_locate_ith()} function returns an integer matrix with two columns,
giving the start and end positions of the \eqn{i^{th}} matches,
two \code{NA}s if no matches are found,
and also two \code{NA}s if \code{str} is \code{NA}.\cr
\cr
}
\description{
The \code{stri_locate_ith} function
locates the \eqn{i^{th}} occurrence of a pattern in each string of
some character vector. \cr
}
\examples{

# simple pattern ====

x <- rep(paste0(1:10, collapse=""), 10)
print(x)
out <- stri_locate_ith(x, 1:10, regex = as.character(1:10))
cbind(1:10, out)


x <- c(paste0(letters[1:13], collapse=""), paste0(letters[14:26], collapse=""))
print(x)
p <- rep("a|e|i|o|u",2)
out <- stri_locate_ith(x, c(-1, 1), regex=p)
print(out)
substr(x, out[,1], out[,2])


#############################################################################

# ignore case pattern ====


x <- c(paste0(letters[1:13], collapse=""), paste0(letters[14:26], collapse=""))
print(x)
p <- rep("A|E|I|O|U", 2)
out <- stri_locate_ith(x, c(1, -1), regex=p, case_insensitive=TRUE)
substr(x, out[,1], out[,2])


#############################################################################

# multi-character pattern ====

x <- c(paste0(letters[1:13], collapse=""), paste0(letters[14:26], collapse=""))
print(x)
# multi-character pattern:
p <- rep("AB", 2)
out <- stri_locate_ith(x, c(1, -1), regex=p, case_insensitive=TRUE)
print(out)
substr(x, out[,1], out[,2])



#############################################################################

# Replacement transformation using stringi ====

x <- c("hello world", "goodbye world")
loc <- stri_locate_ith(x, c(1, -1), regex="a|e|i|o|u")
extr <- stringi::stri_sub(x, from=loc)
repl <- chartr(extr, old = "a-zA-Z", new = "A-Za-z")
stringi::stri_sub_replace(x, loc, replacement=repl)


}
\seealso{
\code{\link[=tinyoperations_stringi]{tinyoperations_stringi()}}
}
