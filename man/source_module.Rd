% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/source_module.R
\name{source_module}
\alias{source_module}
\alias{\%@source\%}
\alias{source_inops}
\title{Additional module import management}
\usage{
alias \%@source\% lst

source_inops(...)
}
\arguments{
\item{alias}{a variable name (unquoted),
giving the (not yet existing) object
where the sourced objects from the module are to be assigned to. \cr
Syntactically invalid names are not allowed for the alias name.}

\item{lst}{a named list, giving the arguments to be passed to the
\link[base]{source} function. \cr
For example: \code{alias \%@source\% list(file="mydir/myscript.R")} \cr
The \code{local} argument should not be included in the list.}

\item{...}{arguments to be passed to the \link[base]{source} function,
such as the \code{file} argument. \cr
The \code{local} argument should not be included.}
}
\value{
For the \code{alias \%@source\% list(file=...)} operator: \cr
The variable named as the \code{alias} will be created
(if it did not already exist) in the current environment
(like the Global environment, or the environment within a function),
and will contain all objects from the sourced script. \cr
To use, for example, function "some_function()" from alias "alias.", use: \cr
\code{alias.$some_function()} \cr
\cr
For \code{source_inops()}: \cr
The infix operators from the specified module will be placed
in the current environment
(like the Global environment, or the environment within a function). \cr
\cr
}
\description{
The \code{alias \%@source\% list(file=...)} operator
imports all objects from a source-able script file under an \code{alias}. \cr
\cr
The \code{source_inops()} function
exposes the infix operators defined in a source-able script file
to the current environment
(like the global environment, or the environment within a function). \cr
\cr
Note that the \code{alias \%@source\% list(file=...)} operator and
the \code{source_inops()} function do NOT suppress output
(i.e. plots, prints, messages)
from the sourced module file. \cr
}
\examples{

\dontrun{
alias \%@source\% list(file="mydir/mymodule.R")
source_inops(file="mydir/mymodule.R")
}

exprs <- expression({
helloworld = function()print("helloworld")
goodbyeworld <- function() print("goodbye world")
`\%s+test\%` <- function(x,y) stringi::`\%s+\%`(x,y)
`\%s*test\%` <- function(x,y) stringi::`\%s*\%`(x,y)
})

myalias. \%@source\% list(exprs=exprs)

myalias.$helloworld()

temp.fun <- function(){
  source_inops(exprs=exprs) # places the function inside the function environment
  ls() # list all objects residing within the function definition
}
temp.fun()



}
\seealso{
\link{tinyoperations_import}, \code{\link[base:source]{base::source()}}
}
