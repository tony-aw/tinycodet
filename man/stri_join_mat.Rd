% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stri_join_mat.R
\name{stri_join_mat}
\alias{stri_join_mat}
\alias{stri_c_mat}
\alias{stri_paste_mat}
\title{Concatenate Character Matrix Row-wise or Column-wise}
\usage{
stri_join_mat(mat, margin = 1, sep = "", collapse = NULL)

stri_c_mat(mat, margin = 1, sep = "", collapse = NULL)

stri_paste_mat(mat, margin = 1, sep = "", collapse = NULL)
}
\arguments{
\item{mat}{a matrix of strings}

\item{margin}{the margin over which the strings must be joined. \cr
\itemize{
\item If \code{margin=1}, the elements in each row of matrix \code{mat}
are joined into a single string.
Thus if the matrix has 10 rows, it returns a vector of 10 strings. \cr
\item If \code{margin=2}, the elements in each column of matrix \code{mat}
are joined into a single string.
Thus if the matrix has 10 columns, it returns a vector of 10 strings. \cr
}}

\item{sep, collapse}{as in \link[stringi]{stri_join}.}
}
\value{
The \code{stri_join_mat()} function, and its aliases, return a vector of strings.
}
\description{
The \code{stri_join_mat()} function
(and their aliases \code{stri_c_mat} and \code{stri_paste_mat})
perform row-wise (\code{margin=1}; the default) or
column-wise (\code{margin=2}) joining of a matrix of strings,
thereby transforming a matrix of strings into a vector of strings.
}
\details{
The examples section show the uses of the \code{stri_join_mat()} function.
}
\examples{


#############################################################################

# Basic example

x <- matrix(letters[1:25], ncol=5, byrow = TRUE)
print(x)
stri_join_mat(x, margin=1)

x <- matrix(letters[1:25], ncol=5, byrow = FALSE)
print(x)
stri_join_mat(x, margin=2)


#############################################################################
# re-ordering characters in strings ====

x <- c("Hello world", "Goodbye world")
print(x)
mat <- strcut_brk(x)
rank <- stringi::stri_rank(as.vector(mat)) |>  matrix(ncol=ncol(mat))
sorted <- mat \%row~\% rank
print(sorted)
stri_join_mat(sorted, margin=1)
stri_join_mat(sorted, margin=2)

#############################################################################

# re-ordering words ====

x <- c("Hello everyone", "Goodbye everyone")
print(x)
mat <- strcut_brk(x, "word")
rank <- stringi::stri_rank(as.vector(mat)) |> matrix(ncol=ncol(mat))
sorted <- mat \%row~\% rank
print(sorted)
stri_c_mat(sorted, margin=1) # <- alias for stri_join_mat
stri_c_mat(sorted, margin=2)

#############################################################################

# re-ordering sentences ====

x <- c("Hello, who are you? Oh, really?! Cool!", "I don't care. But I really don't.")
print(x)
mat <- strcut_brk(x, "sentence")
rank <- stringi::stri_rank(as.vector(mat)) |> matrix(ncol=ncol(mat))
sorted <- mat \%row~\% rank
print(sorted)
stri_paste_mat(sorted, margin=1) # <- another alias for stri_join_mat
stri_paste_mat(sorted, margin=2)
}
\seealso{
\code{\link[=tinycodet_strings]{tinycodet_strings()}}
}
\concept{join_mat}
