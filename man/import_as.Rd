% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import_as.R
\name{import_as}
\alias{import_as}
\title{Load main package + its foreign exports + its dependencies + its enhances + its extensions under one alias}
\usage{
import_as(
  alias,
  main_package,
  foreign_exports = TRUE,
  dependencies = NULL,
  enhances = NULL,
  extensions = NULL,
  lib.loc = .libPaths(),
  verbose = FALSE,
  loadorder = c("dependencies", "main_package", "enhances", "extensions")
)
}
\arguments{
\item{alias}{a syntactically valid non-hidden variable name (unquoted),
giving the alias object
where the package(s) are to be loaded into. \cr
\cr
NOTE: To keep aliases easily distinguished from other objects
that can also be subset with the \code{$} operator,
I recommend ending (not starting!) the names of all alias names
with a dot (\code{.}) or underscore (\code{_}).}

\item{main_package}{a single string,
giving the name of the main package to load under the given alias.}

\item{foreign_exports}{logical;
some R packages export functions that are not defined in their own package,
but in their direct dependencies; "foreign exports", if you will. \cr
This argument determines what the \code{import_as} function
will do with the foreign exports of the \code{main_package}: \cr
\itemize{
\item If \code{TRUE} the foreign exports from the \code{main_package}
are added to the alias,
even if \code{dependencies = NULL}.
This is the default, as it is analogous to the behaviour of base R's \link{::} operator. \cr
\item If \code{FALSE}, these foreign exports are not added,
and the user must specify the appropriate packages in argument \code{dependencies}.
}}

\item{dependencies}{an optional character vector,
giving the names of the dependencies of the
\code{main_package} to be loaded also under the alias. \cr
Defaults to \code{NULL}, which means no dependencies are loaded. \cr
See \link{pkg_get_deps} to quickly get dependencies from a package.}

\item{enhances}{an optional character vector,
giving the names of the packages enhanced by the
\code{main_package} to be loaded also under the alias. \cr
Defaults to \code{NULL}, which means no enhances are loaded.}

\item{extensions}{an optional character vector,
giving the names of the extensions of the
\code{main_package} to be loaded also under the alias. \cr
Defaults to \code{NULL}, which means no extensions are loaded.}

\item{lib.loc}{character vector specifying library search path
(the location of R library trees to search through). \cr
This is usually \code{.libPaths()}. \cr
See also \link[base]{loadNamespace}.}

\item{verbose}{logical,
indicating whether messages regarding conflicts and foreign exports
should be printed while importing packages (\code{TRUE}),
or if these should not be printed (\code{FALSE}). \cr
Defaults to \code{FALSE},
because all information conveyed by the messages can be more compactly be viewed
by viewing the attributes of the alias object (see \link[base]{attributes}).}

\item{loadorder}{the character vector \cr
\code{c("dependencies", "main_package", "enhances", "extensions")}, \cr
or some re-ordering of this character vector,
giving the relative load order of the groups of packages. \cr
\cr
The default setting (which is highly recommended) is the character vector \cr
\code{c("dependencies", "main_package", "enhances", "extensions")}, \cr
which results in the following load order: \cr
\enumerate{
\item The dependencies, in the order specified by the \code{depenencies} argument. \cr
\item The main_package (see argument \code{main_package}),
including foreign exports (if \code{foreign_exports=TRUE}). \cr
\item The enhances, in the order specified by the \code{enhances} argument. \cr
\item The extensions, in the order specified by the \code{extensions} argument.
}}
}
\value{
The variable named in the \code{alias} argument will be created
in the current environment
(like the global environment, or the environment within a function).
The alias object will contain the following:
\itemize{
\item The (merged) package environment,
containing the exported functions from the packages.
\item The attributes of the alias object will contain
the package order, input arguments, and a conflicts report.
}

To use, for example, function "some_function()" from alias "alias.", use: \cr
\code{alias.$some_function()} \cr
}
\description{
The \code{import_as()} function
imports the namespace of an R package,
and optionally also its dependencies, enhances, and extensions,
under the same alias.
The specified alias will be placed in the current environment
(like the global environment, or the environment within a function). \cr
}
\details{
\bold{On the \code{dependencies}, \code{enhances} and \code{extensions} arguments} \cr
\itemize{
\item \code{dependencies}: "Dependencies" here are defined as any package appearing in the
"Depends", "Imports", or "LinkingTo" fields of the Description file of the
\code{main_package}. So no recursive dependencies.
\item \code{enhances}: Enhances are defined as packages appearing in the "Enhances" field
of the Description file of the \code{main_package}. \cr
\item \code{extensions}: "Extensions" here are defined as reverse-depends or reverse-imports.
It does not matter if these are CRAN or non-CRAN packages.
However, the intended meaning of an extension is not merely being a reverse dependency,
but a package that actually extends the functionality of the \code{main_package}.
}

As implied in the description of the \code{loadorder} argument,
the order of the character vectors given in the
\code{dependencies}, \code{enhances}, and \code{extensions} arguments
matter: \cr
If multiple packages share objects with the same name,
the objects of the package named last will overwrite those of the earlier named packages. \cr
\cr
\cr
\bold{Additional details} \cr
The \code{import_as()} function
does not allow importing base/core R under an alias,
so don't try. \cr
\cr
For a more detailed description of the import system introduced by the
\code{tinyoperations} R package,
please refer to the Read Me file on the GitHub main page: \cr
\url{https://github.com/tony-aw/tinyoperations}
}
\examples{
\dontrun{
import_as( # this creates the 'dr.' object
dr., "dplyr",, extensions = "powerjoin"
)
dr.$mutate
}


}
\seealso{
\link{tinyoperations_import}, \link[=source_inops]{source_module}, \link[=pkg_get_deps]{pkgs}
}
