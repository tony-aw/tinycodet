% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transform_if.R
\name{transform_if}
\alias{transform_if}
\title{The transform_if function}
\usage{
transform_if(
  x,
  cond,
  yes = function(x) x,
  no = function(x) x,
  other = function(x) return(NA),
  text = NULL
)
}
\arguments{
\item{x}{a vector, matrix, or array.}

\item{cond}{a (possibly anonymous) function that returns a \code{logical} vector
of the same length/dimensions as \code{x}. \cr
For example: \code{\(x)x>0}. \cr}

\item{yes}{the (possibly anonymous) transformation function to use
when \code{cond(x)==TRUE}. \cr
For example: \code{log}. \cr
If this is not specified, \code{yes} defaults to \code{function(x)x}.}

\item{no}{the (possibly anonymous) transformation function to use
when \code{cond(x)==FALSE}. \cr
For example: \code{log}. \cr
If this is not specified, \code{no} defaults to \code{function(x)x}.}

\item{other}{the (possibly anonymous) transformation function to use
when \code{cond(x)} returns \code{NA}. \cr
If this is not specified, \code{other} defaults to \code{function(x)return(NA)}. \cr
Note that \code{other(x)} is run when \code{cond(x)} is \code{NA},
not necessarily when \code{x} itself is \code{NA}!}

\item{text}{a single string,
to be used instead of the arguments
\code{cond, yes, no, other},
in the form of \cr
\code{"x ; cond ; yes ; no ; other"}, with \code{"x"} being the declared variable. \cr
If this string is given, \code{cond, yes, no, other} will be ignored. \cr
The single string in question should have the following properties: \cr
\itemize{
\item It should consist of 5 pieces of text, separated by semicolons (\code{;}).
\item The first piece should be a single name, declaring the name of the variable.
\item The second, third, fourth, and fifth pieces of text should give the expressions describing the functions
to use for \code{cond, yes, no, other}, respectively, in exactly that order.
\item Suppose the declared variable is named \code{x}.
Then, each expression in text pieces 2 to 5 will be translated as: \cr
\code{function(x) text}. \cr
Therefore, a function like \code{log} must be written in the text as
\code{"log(x)"}, not just \code{"log"}.
\item All variables used on pieces 2 to 5
that do no match the declared variable from the first piece,
are taken from the environment from which \code{transform_if()} was called.
\item ALL 5 pieces of text are mandatory; any missing piece results in an error.
\item Thus the following functions (with the declared variable being \code{x}), \cr
\code{cond=\(x)x > y, yes=log, no=\(x)x^2, other=\(x)-1000}, \cr
can be expressed in a single string as: \cr
\code{"x; x > y; log(x) ; x^2 ; -1000"}
}}
}
\value{
Similar to \link[base]{ifelse}.
However, unlike \code{ifelse()}, the transformations are evaluated as
\code{yes(x[cond(x)])} and \code{no(x[!cond(x)])},
ensuring no unnecessary warnings or errors occur. \cr
\cr
}
\description{
The \code{transform_if()} function transforms an object \code{x},
based on the logical result (\code{TRUE, FALSE, NA}) of condition function \code{cond(x)},
such that: \cr

\itemize{
\item For every value where \code{cond(x)==TRUE}, function \code{yes(x)} is run.
\item For every value where \code{cond(x)==FALSE}, function \code{no(x)} is run.
\item For every value where \code{cond(x)==NA}, function \code{other(x)} is run. \cr
}
}
\details{
Be careful with coercion! For example the following code: \cr
\code{x <- c("a", "b")} \cr
\code{transform_if(x, \(x)x=="a", as.numeric, as.logical)} \cr
returns: \cr
\code{[1] NA NA} \cr
due to the same character vector being given 2 incompatible classes. \cr
\cr
Using \code{cond, yes, no, other} directly
is a tiny bit faster than using the \code{text} argument
(because the text must first be translated into functions). \cr
}
\examples{
x <- c(-10:9, NA, NA)
object_with_very_long_name <- matrix(x, ncol=2)
print(object_with_very_long_name)
y <- 0
z <- 1000
object_with_very_long_name |> transform_if(\(x)x>y, log, \(x)x^2, \(x)-z)
object_with_very_long_name |> transform_if(text = "x ; x>y ; log(x) ; x^2 ; -z")

}
\seealso{
\code{\link[=tinyoperations_dry]{tinyoperations_dry()}}
}
