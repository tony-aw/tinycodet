% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkgs.R
\name{pkgs}
\alias{pkgs}
\alias{pkgs_get_deps}
\alias{\%installed in\%}
\alias{\%::?\%}
\title{Miscellaneous package functions}
\usage{
pkgs_get_deps(
  package,
  lib.loc = .libPaths(),
  deps_type = c("Depends", "Imports", "LinkingTo"),
  base = FALSE,
  recom = FALSE
)

pkgs \%installed in\% lib.loc

alias \%::?\% f
}
\arguments{
\item{package}{a single string giving the package name}

\item{lib.loc}{character vector specifying library search path
(the location of R library trees to search through).
This is usually \code{.libPaths()}.
See also \link[base]{loadNamespace}.}

\item{deps_type}{a character vector, giving the dependency types to be used. \cr
Defaults to \code{c("Depends", "Imports", "LinkingTo")}.}

\item{base}{logical,
indicating whether base/core R packages should be included (\code{TRUE}),
or not included (\code{FALSE}; the default).}

\item{recom}{logical,
indicating whether the pre-installed "recommended" R packages should be included (\code{TRUE}),
or not included (\code{FALSE}; the default).
Note that only the recommended R packages actually installed in your system are taken into consideration.}

\item{pkgs}{a single string, or character vector, with the package name(s).}

\item{alias}{the alias created by \link{import_as}, either as string or expression.}

\item{f}{the function name, either as string or expression.}
}
\value{
For  \code{pkgs \%installed in\% lib.loc}:
Returns a logical vector, where \code{TRUE} indicates a package is installed,
and \code{FALSE} indicates a package is not installed. \cr
\cr
For \code{pkgs_get_deps()}:
A character vector of dependencies.
}
\description{
The \code{pkgs \%installed in\% lib.loc} operator
checks if one or more package(s) \code{pkgs} exist(s) in library location \code{lib.loc}. \cr
Now you no longer have to attach a package with \code{require()} simply to check if it exists. \cr
Moreover, this operator makes it syntactically explicit in your code
where you are looking for your R package(s). \cr
\cr
The \code{pkgs_get_deps()} function gets the dependencies of a package
from the Description file. It works on non-CRAN packages also. \cr
\cr
The \code{alias \%::?\% fun_name} operator
finds the help file for function \code{fun_name} loaded in the \code{alias}.
}
\examples{

\dontrun{
pkgs <- c(unlist(tools::package_dependencies("devtools")), "devtools")
pkgs \%installed in\% .libPaths()
import_as( # this creates the 'dr.' object
dr., "dplyr", depends=c("tibble", "tidyselect"), extends = "powerjoin"
) 
dr. \%::?\% mutate
}



}
\references{
https://stackoverflow.com/questions/30223957/elegantly-extract-r-package-dependencies-of-a-package-not-listed-on-cran
}
