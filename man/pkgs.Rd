% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkgs.R
\name{\%m import <-\%}
\alias{\%m import <-\%}
\alias{import_data}
\title{Package import management operator and function}
\usage{
alias \%m import <-\% pkgs

import_data(dataname, package)
}
\arguments{
\item{alias}{a variable name (unquoted),
giving the (not yet existing) object
where the package(s) are to be assigned to.}

\item{pkgs}{a character vector with the package name(s). \cr
NOTE: The order matters! If 2 packages share objects with the same name,
the package named last will overwrite the earlier named package.}

\item{dataname}{a single string, giving the name of the dataset.}

\item{package}{a single string, giving the name of the package.}
}
\value{
For \code{\%m import <-\%}: \cr
The variable named in the \code{alias} argument will be created
(if it did not already exist),
and it will contain the (merged) package environment. \cr
\cr
For \code{import_data()}: \cr
Returns the data directly.
Thus, one can assign the data like so: \code{mydata <- import_data(...)}.
}
\description{
The \code{alias \%m import <-\% pkgs} operator
imports the namespaces of multiple R package under the same alias. \cr
\cr
The \code{alias \%m import <-\% pkgs} command is essentially the same as \cr
\code{alias <- loadNamespace("packagename")} \cr
except the \code{alias \%m import <-\% pkgs} operator
allows assigning multiple packages to the same alias,
and this operator does not import internal functions
(i.e. internal functions are kept internal, as they should). \cr
\cr
The \code{alias \%m import <-\% pkgs} operator will tell the user
about conflicting objects. It will also inform the user when importing
a package that consists mostly of infix operators. \cr
\cr
Note: the user should not use this operator unless the user knows what he/she is doing. \cr
The operator will give a warning when more than 3 packages being imported into the same alias. \cr
\cr
The \code{import_data(dataname, package)} function gets a specified data set from a package. \cr
Unlike \code{utils::data()}, \code{import_data()} returns the dataset directly,
and allows assigning the dataset like so: \cr
\code{mydata <- import_data(...)}.
}
\examples{

\dontrun{
fv \%m import <-\% c("data.table", "collapse", "tidytable")

d <- import_data("chicago", "gamair")
}



}
