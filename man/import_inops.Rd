% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import_inops.R
\name{import_inops}
\alias{import_inops}
\title{Expose infix operators to the current environment}
\usage{
import_inops(
  pkgs,
  lib.loc = .libPaths(),
  exclude,
  include.only,
  overwrite = TRUE,
  inherits = FALSE
)
}
\arguments{
\item{pkgs}{a single string, or character vector, with the package name(s). \cr
NOTES: \cr
\enumerate{
\item The order of the character vector matters!
If multiple packages share infix operators with the same name,
the conflicting operators of the package named last
will overwrite those of the earlier named packages. \cr
\item The \code{import_inops} function performs a basic check
that the packages are mostly (reverse) dependencies of each other.
If not, it will give an error.
}}

\item{lib.loc}{character vector specifying library search path
(the location of R library trees to search through). \cr
This is usually \code{.libPaths()}. \cr
See also \link[base]{loadNamespace}.}

\item{exclude}{a character vector,
giving the infix operators NOT to expose to the current environment. \cr
This can be handy to prevent overwriting any (user defined)
infix operators already present in the current environment. \cr
\cr
NOTE: You cannot specify both the \code{exclude} and \code{include.only} arguments.
Only one or the other, or neither.}

\item{include.only}{a character vector,
giving the infix operators to expose to the current environment,
and the rest of the operators will not be exposed. \cr
This can be handy to prevent overwriting any (user defined)
infix operators already present in the current environment. \cr
\cr
NOTE: You cannot specify both the \code{exclude} and \code{include.only} arguments.
Only one or the other, or neither.}

\item{overwrite}{logical,
indicating if it is allowed to overwrite existing infix operators. \cr
\itemize{
\item If \code{TRUE} (default), a warning is given when operators existing in the current environment
are being overwritten,
but the function continuous nonetheless.
\item If \code{FALSE}, an error is produced
when the to be exposed operators already exist in the current environment,
and the function is halted.
}}

\item{inherits}{logical; when \code{overwrite=FALSE},
should enclosed environments,
especially package namespaces,
also be taken into account? \cr
Defaults to \code{FALSE}. \cr
See also \link[base]{exists}.}
}
\value{
For \code{import_inops()}: \cr
The infix operators from the specified packages will be placed
in the current environment
(like the Global environment, or the environment within a function). \cr
\cr
}
\description{
The \code{import_inops()} function
exposes the infix operators of the specified packages to the current environment
(like the global environment, or the environment within a function). \cr
To ensure the user can still verify which operator function came from which package,
a "package" attribute is added to each exposed operator. \cr
Naturally, the namespace attribute of each of the operators remains intact. \cr
If you wish to globally attach infix operators,
instead of just placing them in the current environment,
see \link{pkg_lsf}. \cr
}
\details{
The \code{import_inops()} function does not support overloading base/core R operators,
so don't try. \cr
\cr
For a more detailed description of the import system introduced by the
\code{tinyoperations} R package,
please refer to the Read Me file on the GitHub main page: \cr
\url{https://github.com/tony-aw/tinyoperations}
}
\examples{
\dontrun{
import_inops("data.table")
}


}
\seealso{
\link{tinyoperations_import}, \link[=source_inops]{source_module}, \link[=pkg_get_deps]{pkgs}
}
