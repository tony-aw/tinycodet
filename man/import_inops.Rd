% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import_inops.R
\name{import_inops}
\alias{import_inops}
\title{(un)expose infix operators from package namespace in the current environment}
\usage{
import_inops(expose = NULL, unexpose = NULL, lib.loc = .libPaths(), ...)
}
\arguments{
\item{expose, unexpose}{either one of the following:
\itemize{
\item an alias object as produced by the \link{import_as} function.
\item a string giving the package name.
}}

\item{lib.loc}{character vector specifying library search path
(the location of R library trees to search through). \cr
Only used when supplying a character vector of package names to
\code{expose} / \code{unexpose},
and ignored when supplying an alias object to
\code{expose} / \code{unexpose}
(the library is already defined inside the alias object). \cr
The \code{lib.loc} argument would usually be \code{.libPaths()}. \cr
See also \link[base]{loadNamespace}.}

\item{...}{additional arguments,
only relevant if the \code{expose} argument is used. \cr
See \link{import_inops.control}.}
}
\value{
If using argument \code{expose}: \cr
The infix operators specified in the given package or alias will be placed
in the current environment
(like the Global environment, or the environment within a function). \cr
\cr
If using argument \code{unexpose}: \cr
The infix operators specified in the given package or alias,
exposed by \code{import_inops()}, will be removed from the current environment
(like the Global environment, or the environment within a function). \cr
If such infix operators could not be found, this function simply returns \code{NULL}. \cr
}
\description{
\code{import_inops(expose=...)}
exposes infix operators specified
in a package or an alias object to the current environment
(like the global environment or the environment within a function). \cr
\cr
\code{import_inops(unexpose=...)}
unexposes (i.e. removes) the infix operators specified
in a packages or an alias object
from the current environment
(like the global environment or the environment within a function). \cr
Note that in this case only infix operators exposed by
the \code{tinycodet} import system
will be removed from the current environment;
"regular" (i.e. user-specified) infix operators will not be touched. \cr
\cr
}
\details{
The \code{import_inops()} function does not support overloading base/core R operators. \cr
\cr
When using \code{import_inops()} to remove infix operators from the current environment,
it will use the attributes of those operators to determine if the infix operator came from
the \code{tinycodet} import system or not.
Only infix operators exposed by the \code{tinycodet} import system will be removed.
}
\examples{
\dontrun{
import_as(dt., "data.table")
import_inops(expose = dt.) # expose infix operators from alias
import_inops(unexpose = dt.) # unexposed infix operators from current environment
import_inops(expose = "data.table") # expose infix operators from package
import_inops(unexpose = "data.table") # remove the exposed infix operators from environment

# additional arguments (only used when exposing, not unexposing):
import_as(dt., "data.table")
import_inops(expose = dt., include.only = ":=")
import_inops(unexpose = dt.)
import_inops(expose = "data.table", exclude = ":=")
import_inops(unexpose = "data.table")
import_inops(expose = dt., overwrite = FALSE)
import_inops(unexpose = dt.)
import_inops(expose = "data.table", overwrite = FALSE)
import_inops(unexpose = "data.table")
}


}
\seealso{
\code{\link[=tinycodet_import]{tinycodet_import()}}, \code{\link[=import_inops.control]{import_inops.control()}}
}
