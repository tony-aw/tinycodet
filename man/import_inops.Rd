% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import_inops.R
\name{import_inops}
\alias{import_inops}
\title{Expose infix operators to the current environment}
\usage{
import_inops(
  pkgs,
  lib.loc = .libPaths(),
  exclude,
  include.only,
  overwrite = TRUE,
  inherits = FALSE,
  delete
)
}
\arguments{
\item{pkgs}{a character vector of package name(s),
specifying the packages from which to load infix operators,
and place them in the current environment. \cr
NOTE: The order of the character vector matters!
If multiple packages share infix operators with the same name,
the conflicting operators of the package named last
will overwrite those of the earlier named packages.}

\item{lib.loc}{character vector specifying library search path
(the location of R library trees to search through). \cr
This is usually \code{.libPaths()}. \cr
See also \link[base]{loadNamespace}.}

\item{exclude}{a character vector,
giving the infix operators NOT to expose to the current environment. \cr
This can be handy to prevent overwriting any (user defined)
infix operators already present in the current environment. \cr}

\item{include.only}{a character vector,
giving the infix operators to expose to the current environment,
and the rest of the operators will not be exposed. \cr
This can be handy to prevent overwriting any (user defined)
infix operators already present in the current environment. \cr}

\item{overwrite}{logical,
indicating if it is allowed to overwrite existing infix operators. \cr
\itemize{
\item If \code{TRUE} (default), a warning is given when operators existing in the current environment
are being overwritten,
but the function continuous nonetheless.
\item If \code{FALSE}, an error is produced
when the to be exposed operators already exist in the current environment,
and the function is halted.
}}

\item{inherits}{logical; when \code{overwrite=FALSE},
should enclosed environments,
especially package namespaces,
also be taken into account? \cr
Defaults to \code{FALSE}. \cr
See also \link[base]{exists}.}

\item{delete}{a character vector of package name(s),
specifying the infix operators from which package namespaces to delete from the current environment. \cr
The \code{import_inops()} function will attempt not to deleted
infix operators that were manually defined by the user themselves.}
}
\value{
If \code{pkgs} is specified: \cr
The infix operators from the specified packages will be placed
in the current environment
(like the Global environment, or the environment within a function). \cr
The infix operators will be LOCKED.
For information on the binding lock used, see \link{import_lock}. \cr
\cr
If \code{delete} is specified: \cr
The infix operators from the packages specified in \code{delete},
exposed by \code{import_inops()}, will be deleted. \cr
If such infix operators could not be found, this function returns \code{NULL}. \cr
}
\description{
The \code{import_inops()} function can do one of two things,
depending on whether the \code{pkgs} argument is specified,
or the \code{delete} argument is specified. \cr
\cr
When using the \code{import_inops()} function
with the \code{pkgs} argument specified,
it will place the infix operators of the specified packages in the current environment
(like the global environment, or the environment within a function). \cr
(If you wish to globally attach infix operators,
instead of just placing them in the current environment,
see \link{pkg_lsf}.) \cr
\cr
When using the \code{import_inops()} function
with the \code{delete} argument specified,
it will delete the locked infix operators with namespaces
corresponding to the specified packages. \cr
As this function specifically deletes locked infix operators,
it will attempt to only remove infix operators actually exposed by \code{import_inops()} itself,
thus keeping any user specified locked infix operators untouched;
for more information on this, see \link{import_lock}. \cr
Only infix operators in the current environment
(like the global environment, or the environment within a function)
will be deleted. \cr
}
\details{
\bold{On the \code{exclude, include.only, overwrite, inherits} arguments}: \cr
The \code{exclude, include.only, overwrite, inherits} arguments are not used
when the user specifies the \code{delete} argument;
they are only used when the user specifies the \code{pkgs} argument. \cr
You cannot specify both the \code{exclude} and \code{include.only} arguments.
Only one or the other, or neither. \cr
\cr
\bold{On the \code{pkgs} and \code{delete} arguments}: \cr
You cannot specify both the \code{pkgs} and \code{delete} arguments.
Only one or the other. \cr
Unlike the \link{import_as} function, the \code{import_inops()} function does
not require the packages to be necessarily related to each other. \cr
\cr
\bold{Other details}: \cr
The \code{import_inops()} function does not support overloading base/core R operators,
so don't try. \cr
\cr
}
\examples{
\dontrun{
import_inops("data.table") # expose infix operators
import_inops(delete="data.table") # remove the exposed infix operators.
}


}
\seealso{
\code{\link[=tinyoperations_import]{tinyoperations_import()}}
}
