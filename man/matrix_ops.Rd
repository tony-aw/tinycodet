% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matrix_ops.R
\name{matrix_ops}
\alias{matrix_ops}
\alias{\%row~\%}
\alias{\%col~\%}
\title{Matrix custom re-ordering operators}
\usage{
x \%row~\% rank

x \%col~\% rank
}
\arguments{
\item{x}{a matrix}

\item{rank}{a matrix with the same dimensions as \code{x},
giving the ordering rank of every element of matrix \code{x}. \cr}
}
\value{
A modified matrix.
}
\description{
Infix operators for custom row- and column-wise rank-based re-ordering of matrices \cr
\cr
The \code{x \%row~\% rank} operator re-orders the elements of every row of matrix \code{x}
according to the rank given in matrix \code{rank}. \cr
\cr
The \code{x \%col~\% rank} operator re-orders the elements of every column of matrix \code{x}
according to the rank given in matrix \code{rank}. \cr
\cr
}
\details{
If matrix \code{x} is a numeric matrix,
and one wants to sort the elements of every row or column numerically,
\code{x \%row~\% x} or \code{x \%col~\% x} would suffice, respectively. \cr
\cr
If matrix \code{x} is not numeric,
\code{x \%row~\% x} and \code{x \%col~\% x} are still possible,
but probably not the best option.
In the non-numeric case,
providing a ranking matrix for \code{rank} would be faster and give more accurate ordering.
See the examples section. \cr
\cr
These operators internally only use vectorized operations
(no loops or apply-like functions),
and are faster than re-ordering matrices using loops or apply-like functions.
}
\examples{


# numeric matrix ====

mat <- matrix(sample(1:25), nrow=5)
print(mat)
mat \%row~\% mat # sort elements of every row
mat \%row~\% -mat # reverse-sort elements of every row
mat \%col~\% mat # sort elements of every column
mat \%col~\% -mat # reverse-sort elements of every column

mat <- matrix(sample(1:25), nrow=5)
print(mat)
rank <- sample(1:length(mat)) |> matrix(ncol=ncol(mat)) # randomized rank
mat \%row~\% rank # randomly shuffle every row independently
mat \%col~\% rank # randomize shuffle every column independently

# character matrix ====

mat <- matrix(sample(letters, 25), nrow=5)
print(mat)
rank <- stringi::stri_rank(as.vector(mat)) # alphabetic ranking from stringi
rank <- matrix(rank, ncol=ncol(mat)) # rank matrix
mat \%row~\% rank # sort elements of every row
mat \%row~\% -rank # reverse-sort elements of every row
mat \%col~\% rank # sort elements of every column
mat \%col~\% -rank # reverse-sort elements of every column

mat <- matrix(sample(letters, 25), nrow=5)
print(mat)
rank <- sample(1:length(mat)) |> matrix(ncol=ncol(mat)) # randomized rank
mat \%row~\%  rank# randomly shuffle every row independently
mat \%col~\% rank # randomize shuffle every column independently



}
